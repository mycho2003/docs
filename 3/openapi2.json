{
  "components": {
    "parameters": {
      "BillableMetricId": {
        "name": "billable_metric_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": "13117714-3f05-48e5-a6e9-a66093f13b4d"
      },
      "CustomerId": {
        "name": "customer_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
      },
      "InvoiceId": {
        "name": "invoice_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": "6a37bb88-8538-48c5-b37b-a41c836328bd"
      },
      "NextPage": {
        "name": "next_page",
        "in": "query",
        "description": "Cursor that indicates where the next page of results should start.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "PageLimit": {
        "name": "limit",
        "in": "query",
        "description": "Max number of results that should be returned",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        }
      },
      "InvoiceStatus": {
        "name": "status",
        "in": "query",
        "description": "Invoice status, e.g. DRAFT, FINALIZED, or VOID",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "InvoiceStatusNonVoid": {
        "name": "status",
        "in": "query",
        "description": "Invoice status, e.g. DRAFT or FINALIZED",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "SkipZeroQtyLineItems": {
        "name": "skip_zero_qty_line_items",
        "in": "query",
        "description": "If set, all zero quantity line items will be filtered out of the response",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      }
    },
    "responses": {
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "examples": {
      "SubscriptionQuantityHistoryExample": {
        "subscription_id": "1a824d53-bde6-4d82-96d7-6347ff227d5c",
        "fiat_credit_type_id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
        "history": [
          {
            "starting_at": "2020-01-01T00:00:00.000Z",
            "data": [
              {
                "quantity": 100,
                "unit_price": 1000,
                "total": 100000
              }
            ]
          },
          {
            "starting_at": "2020-02-01T00:00:00.000Z",
            "data": [
              {
                "quantity": 100,
                "unit_price": 1000,
                "total": 100000
              },
              {
                "quantity": 200,
                "unit_price": 2000,
                "total": 400000
              }
            ]
          }
        ]
      },
      "ContractInvoiceExample": {
        "id": "6a37bb88-8538-48c5-b37b-a41c836328bd",
        "customer_id": "617e39d8-68f4-4592-b8d2-c2bf26a76989",
        "type": "USAGE",
        "start_timestamp": "2021-01-01T00:00:00Z",
        "end_timestamp": "2021-02-01T00:00:00Z",
        "credit_type": {
          "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
          "name": "USD (cents)"
        },
        "contract_id": "9de042a1-b955-43ce-9ab4-e3c2004570d1",
        "line_items": [
          {
            "credit_type": {
              "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
              "name": "USD (cents)"
            },
            "name": "CPU hours",
            "quantity": 1488,
            "total": 14392,
            "product_id": "5c1f40cd-9ff8-4e90-ae53-5f81b0e9d1e8"
          }
        ],
        "total": 14392,
        "status": "FINALIZED"
      },
      "BreakdownInvoiceExample": {
        "data": [
          {
            "id": "6a37bb88-8538-48c5-b37b-a41c836328bd",
            "customer_id": "617e39d8-68f4-4592-b8d2-c2bf26a76989",
            "type": "USAGE",
            "start_timestamp": "2021-01-01T00:00:00Z",
            "end_timestamp": "2021-02-01T00:00:00Z",
            "breakdown_start_timestamp": "2021-01-01T00:00:00Z",
            "breakdown_end_timestamp": "2021-01-02T00:00:00Z",
            "credit_type": {
              "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
              "name": "USD (cents)"
            },
            "contract_id": "9de042a1-b955-43ce-9ab4-e3c2004570d1",
            "line_items": [
              {
                "credit_type": {
                  "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                  "name": "USD (cents)"
                },
                "name": "CPU hours",
                "quantity": 1488,
                "total": 14392,
                "product_id": "5c1f40cd-9ff8-4e90-ae53-5f81b0e9d1e8"
              }
            ],
            "status": "DRAFT",
            "subtotal": 14392,
            "total": 14392
          },
          {
            "id": "6a37bb88-8538-48c5-b37b-a41c836328bd",
            "customer_id": "617e39d8-68f4-4592-b8d2-c2bf26a76989",
            "type": "USAGE",
            "start_timestamp": "2021-01-01T00:00:00Z",
            "end_timestamp": "2021-02-01T00:00:00Z",
            "breakdown_start_timestamp": "2021-01-02T00:00:00Z",
            "breakdown_end_timestamp": "2021-01-03T00:00:00Z",
            "credit_type": {
              "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
              "name": "USD (cents)"
            },
            "contract_id": "9de042a1-b955-43ce-9ab4-e3c2004570d1",
            "line_items": [
              {
                "credit_type": {
                  "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                  "name": "USD (cents)"
                },
                "name": "CPU hours",
                "quantity": 1488,
                "total": 14392,
                "product_id": "5c1f40cd-9ff8-4e90-ae53-5f81b0e9d1e8"
              }
            ],
            "status": "DRAFT",
            "subtotal": 14392,
            "total": 14392
          }
        ],
        "next_page": null
      },
      "ContractExample": {
        "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
        "customer_id": "e3fd63fd-fc9f-4153-a543-1fc2261a0e1c",
        "initial": {
          "name": "My contract",
          "rate_card_id": "92f3080d-27ca-4306-a23f-2430de61851e",
          "starting_at": "2020-01-01T00:00:00.000Z",
          "net_payment_terms_days": 7,
          "ending_before": "2022-01-01T00:00:00.000Z",
          "commits": [
            {
              "id": "62c0cb84-bf3f-48b9-9bcf-a8ddf8c1cf35",
              "type": "PREPAID",
              "name": "My test commit",
              "description": "My test commit description",
              "product": {
                "id": "2e30f074-d04c-412e-a134-851ebfa5ceb2",
                "name": "My product A"
              },
              "rollover_fraction": 0.1,
              "applicable_product_ids": [
                "13a2179b-f0cb-460b-85a1-cd42964ca533"
              ],
              "access_schedule": {
                "credit_type": {
                  "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                  "name": "USD (cents)"
                },
                "schedule_items": [
                  {
                    "id": "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
                    "amount": 10000000,
                    "starting_at": "2020-02-01T00:00:00.000Z",
                    "ending_before": "2021-02-01T00:00:00.000Z"
                  }
                ]
              },
              "invoice_schedule": {
                "credit_type": {
                  "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                  "name": "USD (cents)"
                },
                "schedule_items": [
                  {
                    "id": "f15e4e23-f74e-4de4-9b3a-8b07434116c4",
                    "invoice_id": "525b9759-7bbd-4a05-aab1-d7c43c976b57",
                    "amount": 10000000,
                    "unit_price": 10000000,
                    "quantity": 1,
                    "timestamp": "2020-03-01T00:00:00.000Z"
                  }
                ],
                "do_not_invoice": false
              },
              "ledger": [
                {
                  "invoice_id": "525b9759-7bbd-4a05-aab1-d7c43c976b57",
                  "amount": 10000000,
                  "timestamp": "2020-03-01T00:00:00.000Z",
                  "type": "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION",
                  "segment_id": "2d45952c-5a6e-43a9-8aab-f61ee21be81a"
                }
              ]
            }
          ],
          "overrides": [
            {
              "id": "6cf3292a-e85c-4be6-822c-e25ba9d19757",
              "product": {
                "id": "eae8903b-693b-41a7-8c0b-f23748c9a9c8",
                "name": "My product B"
              },
              "starting_at": "2020-01-01T00:00:00.000Z",
              "type": "MULTIPLIER",
              "multiplier": 0.1
            }
          ],
          "scheduled_charges": [],
          "scheduled_charges_on_usage_invoices": "ALL",
          "transitions": [
            {
              "type": "RENEWAL",
              "from_contract_id": "9bf48856-b430-42f4-844f-4d2ea85bcff8",
              "to_contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
            }
          ],
          "reseller_royalties": [],
          "usage_statement_schedule": {
            "frequency": "MONTHLY",
            "billing_anchor_date": "2020-01-01T00:00:00.000Z"
          },
          "created_at": "2019-12-31T14:23:55.234Z",
          "created_by": "Alice"
        },
        "current": {
          "rate_card_id": "92f3080d-27ca-4306-a23f-2430de61851e",
          "starting_at": "2020-01-01T00:00:00.000Z",
          "net_payment_terms_days": 7,
          "ending_before": "2022-01-01T00:00:00.000Z",
          "commits": [
            {
              "id": "62c0cb84-bf3f-48b9-9bcf-a8ddf8c1cf35",
              "type": "PREPAID",
              "name": "My test commit",
              "description": "My test commit description",
              "product": {
                "id": "2e30f074-d04c-412e-a134-851ebfa5ceb2",
                "name": "My product A"
              },
              "rollover_fraction": 0.1,
              "applicable_product_ids": [
                "13a2179b-f0cb-460b-85a1-cd42964ca533"
              ],
              "access_schedule": {
                "credit_type": {
                  "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                  "name": "USD (cents)"
                },
                "schedule_items": [
                  {
                    "id": "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
                    "amount": 10000000,
                    "starting_at": "2020-02-01T00:00:00.000Z",
                    "ending_before": "2021-02-01T00:00:00.000Z"
                  }
                ]
              },
              "invoice_schedule": {
                "credit_type": {
                  "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                  "name": "USD (cents)"
                },
                "schedule_items": [
                  {
                    "id": "f15e4e23-f74e-4de4-9b3a-8b07434116c4",
                    "invoice_id": "525b9759-7bbd-4a05-aab1-d7c43c976b57",
                    "amount": 10000000,
                    "unit_price": 10000000,
                    "quantity": 1,
                    "timestamp": "2020-03-01T00:00:00.000Z"
                  }
                ],
                "do_not_invoice": false
              }
            }
          ],
          "overrides": [
            {
              "id": "6cf3292a-e85c-4be6-822c-e25ba9d19757",
              "product": {
                "id": "eae8903b-693b-41a7-8c0b-f23748c9a9c8",
                "name": "My product B"
              },
              "starting_at": "2020-01-01T00:00:00.000Z",
              "type": "MULTIPLIER",
              "multiplier": 0.1
            }
          ],
          "scheduled_charges": [
            {
              "id": "8e511ff1-3fd5-4d86-bc89-1e80239874bf",
              "name": "My test scheduled charge",
              "product": {
                "id": "2e30f074-d04c-412e-a134-851ebfa5ceb2",
                "name": "My product A"
              },
              "schedule": {
                "schedule_items": [
                  {
                    "id": "6ca40ebc-9c01-484e-a64e-4e47fbbd0ebe",
                    "invoice_id": "5cced82b-5464-41b4-9ea7-3e080e0a4dba",
                    "amount": 1000000,
                    "unit_price": 1000000,
                    "quantity": 1,
                    "timestamp": "2020-02-15T00:00:00.000Z"
                  }
                ]
              }
            }
          ],
          "scheduled_charges_on_usage_invoices": "ALL",
          "transitions": [
            {
              "type": "RENEWAL",
              "from_contract_id": "9bf48856-b430-42f4-844f-4d2ea85bcff8",
              "to_contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
            }
          ],
          "reseller_royalties": [],
          "usage_statement_schedule": {
            "frequency": "MONTHLY",
            "billing_anchor_date": "2020-01-01T00:00:00.000Z"
          },
          "created_at": "2019-12-31T14:23:55.234Z",
          "created_by": "Alice"
        },
        "amendments": [
          {
            "id": "4e2fab26-31ea-473c-b07d-1ce10e7c0146",
            "starting_at": "2020-04-01T00:00:00.000Z",
            "scheduled_charges": [
              {
                "id": "8e511ff1-3fd5-4d86-bc89-1e80239874bf",
                "name": "My test scheduled charge",
                "product": {
                  "id": "2e30f074-d04c-412e-a134-851ebfa5ceb2",
                  "name": "My product A"
                },
                "schedule": {
                  "schedule_items": [
                    {
                      "id": "6ca40ebc-9c01-484e-a64e-4e47fbbd0ebe",
                      "invoice_id": "5cced82b-5464-41b4-9ea7-3e080e0a4dba",
                      "amount": 1000000,
                      "unit_price": 1000000,
                      "quantity": 1,
                      "timestamp": "2020-02-15T00:00:00.000Z"
                    }
                  ]
                }
              }
            ],
            "commits": [],
            "overrides": [],
            "created_at": "2019-12-31T16:12:45.123Z",
            "created_by": "Bob"
          }
        ],
        "custom_fields": {
          "x_account_id": "KyVnHhSBWl7eY2bl"
        }
      },
      "ContractExampleV2": {
        "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
        "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
        "rate_card_id": "92f3080d-27ca-4306-a23f-2430de61851e",
        "starting_at": "2020-01-01T00:00:00.000Z",
        "net_payment_terms_days": 7,
        "ending_before": "2022-01-01T00:00:00.000Z",
        "commits": [
          {
            "id": "62c0cb84-bf3f-48b9-9bcf-a8ddf8c1cf35",
            "type": "PREPAID",
            "name": "My test commit",
            "description": "My test commit description",
            "product": {
              "id": "2e30f074-d04c-412e-a134-851ebfa5ceb2",
              "name": "My product A"
            },
            "rollover_fraction": 0.1,
            "applicable_product_ids": ["13a2179b-f0cb-460b-85a1-cd42964ca533"],
            "access_schedule": {
              "credit_type": {
                "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                "name": "USD (cents)"
              },
              "schedule_items": [
                {
                  "id": "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
                  "amount": 10000000,
                  "starting_at": "2020-02-01T00:00:00.000Z",
                  "ending_before": "2021-02-01T00:00:00.000Z"
                }
              ]
            },
            "invoice_schedule": {
              "credit_type": {
                "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                "name": "USD (cents)"
              },
              "schedule_items": [
                {
                  "id": "f15e4e23-f74e-4de4-9b3a-8b07434116c4",
                  "invoice_id": "525b9759-7bbd-4a05-aab1-d7c43c976b57",
                  "amount": 10000000,
                  "unit_price": 10000000,
                  "quantity": 1,
                  "timestamp": "2020-03-01T00:00:00.000Z"
                }
              ],
              "do_not_invoice": false
            }
          }
        ],
        "overrides": [
          {
            "id": "6cf3292a-e85c-4be6-822c-e25ba9d19757",
            "product": {
              "id": "eae8903b-693b-41a7-8c0b-f23748c9a9c8",
              "name": "My product B"
            },
            "starting_at": "2020-01-01T00:00:00.000Z",
            "type": "MULTIPLIER",
            "multiplier": 0.1
          }
        ],
        "scheduled_charges": [
          {
            "id": "8e511ff1-3fd5-4d86-bc89-1e80239874bf",
            "name": "My test scheduled charge",
            "product": {
              "id": "2e30f074-d04c-412e-a134-851ebfa5ceb2",
              "name": "My product A"
            },
            "schedule": {
              "schedule_items": [
                {
                  "id": "6ca40ebc-9c01-484e-a64e-4e47fbbd0ebe",
                  "invoice_id": "5cced82b-5464-41b4-9ea7-3e080e0a4dba",
                  "amount": 1000000,
                  "unit_price": 1000000,
                  "quantity": 1,
                  "timestamp": "2020-02-15T00:00:00.000Z"
                }
              ]
            }
          }
        ],
        "scheduled_charges_on_usage_invoices": "ALL",
        "transitions": [
          {
            "type": "RENEWAL",
            "from_contract_id": "9bf48856-b430-42f4-844f-4d2ea85bcff8",
            "to_contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
          }
        ],
        "usage_statement_schedule": {
          "frequency": "MONTHLY",
          "billing_anchor_date": "2020-01-01T00:00:00.000Z"
        },
        "created_at": "2019-12-31T14:23:55.234Z",
        "created_by": "Alice",
        "custom_fields": {
          "x_account_id": "KyVnHhSBWl7eY2bl"
        },
        "usage_filter": []
      },
      "CommitExample": {
        "id": "62c0cb84-bf3f-48b9-9bcf-a8ddf8c1cf35",
        "type": "PREPAID",
        "rate_type": "LIST_RATE",
        "name": "My test commit",
        "description": "My test commit description",
        "priority": 100,
        "product": {
          "id": "2e30f074-d04c-412e-a134-851ebfa5ceb2",
          "name": "My product A"
        },
        "rollover_fraction": 0.1,
        "applicable_product_ids": ["13a2179b-f0cb-460b-85a1-cd42964ca533"],
        "applicable_contract_ids": ["d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"],
        "access_schedule": {
          "credit_type": {
            "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
            "name": "USD (cents)"
          },
          "schedule_items": [
            {
              "id": "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
              "amount": 10000000,
              "starting_at": "2020-02-01T00:00:00.000Z",
              "ending_before": "2021-02-01T00:00:00.000Z"
            }
          ]
        },
        "invoice_schedule": {
          "credit_type": {
            "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
            "name": "USD (cents)"
          },
          "schedule_items": [
            {
              "id": "f15e4e23-f74e-4de4-9b3a-8b07434116c4",
              "invoice_id": "525b9759-7bbd-4a05-aab1-d7c43c976b57",
              "amount": 10000000,
              "unit_price": 10000000,
              "quantity": 1,
              "timestamp": "2020-03-01T00:00:00.000Z"
            }
          ],
          "do_not_invoice": false
        },
        "invoice_contract": {
          "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
        },
        "ledger": [
          {
            "invoice_id": "525b9759-7bbd-4a05-aab1-d7c43c976b57",
            "amount": 10000000,
            "timestamp": "2020-03-01T00:00:00.000Z",
            "type": "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION",
            "segment_id": "2d45952c-5a6e-43a9-8aab-f61ee21be81a"
          }
        ],
        "uniqueness_key": "946g9bepi1-uniqueness-key"
      },
      "CreditExample": {
        "id": "fa411f5b-fb85-4755-9d4d-530717be083c",
        "type": "CREDIT",
        "rate_type": "LIST_RATE",
        "name": "My test credit",
        "description": "My test credit description",
        "priority": 100,
        "product": {
          "id": "2e30f074-d04c-412e-a134-851ebfa5ceb2",
          "name": "My product A"
        },
        "applicable_product_ids": ["13a2179b-f0cb-460b-85a1-cd42964ca533"],
        "applicable_contract_ids": ["d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"],
        "access_schedule": {
          "credit_type": {
            "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
            "name": "USD (cents)"
          },
          "schedule_items": [
            {
              "id": "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
              "amount": 10000000,
              "starting_at": "2020-02-01T00:00:00.000Z",
              "ending_before": "2021-02-01T00:00:00.000Z"
            }
          ]
        },
        "ledger": [
          {
            "invoice_id": "525b9759-7bbd-4a05-aab1-d7c43c976b57",
            "amount": 10000000,
            "timestamp": "2020-03-01T00:00:00.000Z",
            "type": "CREDIT_AUTOMATED_INVOICE_DEDUCTION",
            "segment_id": "2d45952c-5a6e-43a9-8aab-f61ee21be81a"
          }
        ],
        "uniqueness_key": "372p7cvwr3-uniqueness-key"
      },
      "ContractEditExample": [
        {
          "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
          "add_commits": [
            {
              "id": "addda517-6d7a-42ea-834c-f5e6cf8c670e",
              "type": "PREPAID",
              "product": {
                "id": "2e30f074-d04c-412e-a134-851ebfa5ceb2",
                "name": "My product A"
              },
              "description": "A new commit",
              "applicable_product_tags": ["tag1", "tag2"],
              "access_schedule": {
                "credit_type": {
                  "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                  "name": "USD (cents)"
                },
                "schedule_items": [
                  {
                    "id": "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
                    "amount": 10000000,
                    "starting_at": "2020-02-01T00:00:00.000Z",
                    "ending_before": "2021-02-01T00:00:00.000Z"
                  }
                ]
              },
              "invoice_schedule": {
                "credit_type": {
                  "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                  "name": "USD (cents)"
                },
                "schedule_items": [
                  {
                    "id": "f15e4e23-f74e-4de4-9b3a-8b07434116c4",
                    "invoice_id": "525b9759-7bbd-4a05-aab1-d7c43c976b57",
                    "amount": 10000000,
                    "unit_price": 10000000,
                    "quantity": 1,
                    "timestamp": "2020-03-01T00:00:00.000Z"
                  }
                ],
                "do_not_invoice": false
              }
            }
          ]
        },
        {
          "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
          "add_overrides": [
            {
              "id": "6cf3292a-e85c-4be6-822c-e25ba9d19757",
              "starting_at": "2020-01-01T00:00:00.000Z",
              "type": "MULTIPLIER",
              "multiplier": 1.5,
              "priority": 1,
              "override_specifiers": [
                {
                  "product_tags": ["tag1"],
                  "pricing_group_values": {
                    "region": "us-west-1",
                    "hardware_type": "gpu"
                  }
                }
              ],
              "entitled": true
            }
          ]
        }
      ]
    },
    "schemas": {
      "EmbeddableDashboardPayload": {
        "required": ["customer_id", "dashboard"],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "dashboard": {
            "type": "string",
            "enum": ["invoices", "usage", "commits_and_credits"],
            "description": "The type of dashboard to retrieve."
          },
          "dashboard_options": {
            "type": "array",
            "description": "Optional dashboard specific options",
            "items": {
              "type": "object",
              "required": ["key", "value"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The option key name"
                },
                "value": {
                  "type": "string",
                  "description": "The option value"
                }
              }
            }
          },
          "color_overrides": {
            "type": "array",
            "description": "Optional list of colors to override",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The color to override",
                  "enum": [
                    "Gray_dark",
                    "Gray_medium",
                    "Gray_light",
                    "Gray_extralight",
                    "White",
                    "Primary_medium",
                    "Primary_light",
                    "UsageLine_0",
                    "UsageLine_1",
                    "UsageLine_2",
                    "UsageLine_3",
                    "UsageLine_4",
                    "UsageLine_5",
                    "UsageLine_6",
                    "UsageLine_7",
                    "UsageLine_8",
                    "UsageLine_9",
                    "Primary_green",
                    "Primary_red",
                    "Progress_bar",
                    "Progress_bar_background"
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "Hex value representation of the color"
                }
              }
            }
          },
          "bm_group_key_overrides": {
            "type": "array",
            "description": "Optional list of billable metric group key overrides",
            "items": {
              "type": "object",
              "required": ["group_key_name"],
              "properties": {
                "group_key_name": {
                  "type": "string",
                  "description": "The name of the billable metric group key."
                },
                "display_name": {
                  "type": "string",
                  "description": "The display name for the billable metric group key"
                },
                "value_display_names": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "<key, value> pairs of the billable metric group key values and their display names. e.g. {\"a\": \"Asia\", \"b\": \"Euro\"}"
                }
              }
            }
          }
        }
      },
      "CreateCustomerAlertPayload": {
        "required": ["alert_type", "name", "threshold"],
        "type": "object",
        "properties": {
          "alert_type": {
            "type": "string",
            "enum": [
              "spend_threshold_reached",
              "monthly_invoice_total_spend_threshold_reached",
              "low_remaining_days_for_commit_segment_reached",
              "low_remaining_commit_balance_reached",
              "low_remaining_commit_percentage_reached",
              "low_remaining_days_for_contract_credit_segment_reached",
              "low_remaining_contract_credit_balance_reached",
              "low_remaining_contract_credit_percentage_reached",
              "low_remaining_contract_credit_and_commit_balance_reached",
              "invoice_total_reached"
            ],
            "description": "Type of the alert"
          },
          "name": {
            "type": "string",
            "description": "Name of the alert"
          },
          "uniqueness_key": {
            "$ref": "#/components/schemas/UniquenessKey"
          },
          "threshold": {
            "type": "number",
            "description": "Threshold value of the alert policy.  Depending upon the alert type, this number may represent a financial amount, the days remaining, or a percentage reached."
          },
          "credit_type_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the credit's currency, defaults to USD. If the specific alert type requires a pricing unit/currency, find the ID in the [Metronome app](https://app.metronome.com/offering/pricing-units)."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "If provided, will create this alert for this specific customer. To create an alert for all customers, do not specify a `customer_id`."
          },
          "billable_metric_id": {
            "type": "string",
            "format": "uuid",
            "description": "For alerts of type `usage_threshold_reached`, specifies which billable metric to track the usage for."
          },
          "credit_grant_type_filters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings, representing a way to filter the credit grant this alert applies to, by looking at the credit_grant_type field on the credit grant. This field is only defined for CreditPercentage and CreditBalance alerts"
          },
          "evaluate_on_create": {
            "type": "boolean",
            "description": "If true, the alert will evaluate immediately on customers that already meet the alert threshold. If false, it will only evaluate on future customers that trigger the alert threshold. Defaults to true."
          },
          "custom_field_filters": {
            "type": "array",
            "description": "A list of custom field filters for alert types that support advanced filtering. Only present for contract invoices.",
            "items": {
              "$ref": "#/components/schemas/CustomFieldFilterType"
            }
          },
          "invoice_types_filter": {
            "$ref": "#/components/schemas/InvoiceTypesFilterType"
          },
          "group_values": {
            "type": "array",
            "description": "Only present for `spend_threshold_reached` alerts. Scope alert to a specific group key on individual line items.",
            "items": {
              "$ref": "#/components/schemas/GroupValueFilterType"
            }
          }
        }
      },
      "GetCustomerAlertPayload": {
        "required": ["customer_id", "alert_id"],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "The Metronome ID of the customer"
          },
          "alert_id": {
            "type": "string",
            "format": "uuid",
            "description": "The Metronome ID of the alert"
          }
        }
      },
      "ListCustomerAlertsPayload": {
        "required": ["customer_id"],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "The Metronome ID of the customer"
          },
          "alert_statuses": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled",
                "archived",
                "ENABLED",
                "DISABLED",
                "ARCHIVED",
                "Enabled",
                "Disabled",
                "Archived"
              ]
            },
            "description": "Optionally filter by alert status. If absent, only enabled alerts will be returned."
          }
        }
      },
      "ResetCustomerAlertsPayload": {
        "required": ["customer_id", "alert_id"],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "The Metronome ID of the customer"
          },
          "alert_id": {
            "type": "string",
            "format": "uuid",
            "description": "The Metronome ID of the alert"
          }
        }
      },
      "ArchiveAlertPayload": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The Metronome ID of the alert"
          },
          "release_uniqueness_key": {
            "type": "boolean",
            "description": "If true, resets the uniqueness key on this alert so it can be re-used"
          }
        }
      },
      "CustomerAlert": {
        "required": ["customer_status", "alert"],
        "type": "object",
        "properties": {
          "customer_status": {
            "type": "string",
            "enum": ["ok", "in_alarm", "evaluating"],
            "nullable": true,
            "description": "The status of the customer alert. If the alert is archived, null will be returned."
          },
          "triggered_by": {
            "type": "string",
            "nullable": true,
            "description": "If present, indicates the reason the alert was triggered."
          },
          "alert": {
            "$ref": "#/components/schemas/Alert"
          }
        }
      },
      "Alert": {
        "required": ["id", "name", "type", "status", "threshold", "updated_at"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the Metronome ID of the alert"
          },
          "name": {
            "type": "string",
            "description": "Name of the alert"
          },
          "uniqueness_key": {
            "$ref": "#/components/schemas/UniquenessKey"
          },
          "type": {
            "type": "string",
            "enum": [
              "spend_threshold_reached",
              "monthly_invoice_total_spend_threshold_reached",
              "low_remaining_days_for_commit_segment_reached",
              "low_remaining_commit_balance_reached",
              "low_remaining_commit_percentage_reached",
              "low_remaining_days_for_contract_credit_segment_reached",
              "low_remaining_contract_credit_balance_reached",
              "low_remaining_contract_credit_percentage_reached",
              "low_remaining_contract_credit_and_commit_balance_reached",
              "invoice_total_reached"
            ],
            "description": "Type of the alert"
          },
          "status": {
            "type": "string",
            "enum": ["enabled", "archived", "disabled"],
            "description": "Status of the alert"
          },
          "credit_type": {
            "$ref": "#/components/schemas/CreditType",
            "nullable": true
          },
          "threshold": {
            "type": "number",
            "description": "Threshold value of the alert policy"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the alert was last updated"
          },
          "credit_grant_type_filters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings, representing a way to filter the credit grant this alert applies to, by looking at the credit_grant_type field on the credit grant. This field is only defined for CreditPercentage and CreditBalance alerts"
          },
          "custom_field_filters": {
            "type": "array",
            "description": "A list of custom field filters for alert types that support advanced filtering",
            "items": {
              "$ref": "#/components/schemas/CustomFieldFilterType"
            }
          },
          "invoice_types_filter": {
            "$ref": "#/components/schemas/InvoiceTypesFilterType"
          },
          "group_values": {
            "type": "array",
            "description": "Only present for `spend_threshold_reached` alerts. Scope alert to a specific group key on individual line items.",
            "items": {
              "$ref": "#/components/schemas/GroupValueFilterType"
            }
          }
        }
      },
      "CustomerBillingProviderConfigurationLookup": {
        "type": "object",
        "description": "The billing provider configuration associated with a contract. Provide either an ID or the provider and delivery method.",
        "properties": {
          "billing_provider_configuration_id": {
            "type": "string",
            "format": "uuid",
            "description": "The Metronome ID of the billing provider configuration. Use when a customer has multiple configurations with the same billing provider and delivery method. Otherwise, specify the billing_provider and delivery_method."
          },
          "billing_provider": {
            "$ref": "#/components/schemas/ContractsBillingProviderType",
            "description": "Do not specify if using billing_provider_configuration_id."
          },
          "delivery_method": {
            "$ref": "#/components/schemas/BillingProviderDeliveryMethodType",
            "description": "Do not specify if using billing_provider_configuration_id."
          }
        }
      },
      "BillingProviderType": {
        "type": "string",
        "enum": [
          "aws_marketplace",
          "stripe",
          "netsuite",
          "custom",
          "azure_marketplace",
          "quickbooks_online",
          "workday",
          "gcp_marketplace"
        ]
      },
      "GABillingProviderType": {
        "type": "string",
        "enum": ["aws_marketplace", "azure_marketplace"]
      },
      "ContractsBillingProviderType": {
        "type": "string",
        "enum": [
          "aws_marketplace",
          "azure_marketplace",
          "gcp_marketplace",
          "stripe",
          "netsuite"
        ]
      },
      "BillingProviderDeliveryMethodType": {
        "type": "string",
        "enum": ["direct_to_billing_provider", "aws_sqs", "tackle", "aws_sns"]
      },
      "GABillingProviderDeliveryMethodType": {
        "type": "string",
        "enum": ["direct_to_billing_provider", "aws_sqs", "aws_sns"]
      },
      "BillingProviderSettingsType": {
        "type": "string",
        "enum": ["stripe"]
      },
      "SetIngestAliasesPayload": {
        "required": ["ingest_aliases"],
        "type": "object",
        "properties": {
          "ingest_aliases": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 128
            },
            "maxItems": 2000
          }
        }
      },
      "LegacyCreateCustomerPayload": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "ingest_aliases": {
            "type": "array",
            "description": "Aliases that can be used to refer to this customer in usage events",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 128
            },
            "maxItems": 2000
          },
          "external_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128,
            "description": "(deprecated, use ingest_aliases instead) an alias that can be used to refer to this customer in usage events"
          },
          "name": {
            "type": "string",
            "description": "This will be truncated to 160 characters if the provided name is longer."
          },
          "customer_billing_provider_configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerBillingProviderConfigurationCreateCustomerInput"
            }
          },
          "custom_fields": {
            "x-cf-entity": "customer",
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "CreateCustomerPayload": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "ingest_aliases": {
            "type": "array",
            "description": "Aliases that can be used to refer to this customer in usage events",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 128
            },
            "maxItems": 2000
          },
          "name": {
            "type": "string",
            "description": "This will be truncated to 160 characters if the provided name is longer."
          },
          "customer_billing_provider_configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerBillingProviderConfigurationCreateCustomerInput"
            }
          },
          "custom_fields": {
            "x-cf-entity": "customer",
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "SetCustomerNamePayload": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new name for the customer. This will be truncated to 160 characters if the provided name is longer."
          }
        }
      },
      "CustomerConfigPayload": {
        "type": "object",
        "properties": {
          "salesforce_account_id": {
            "type": "string",
            "description": "The Salesforce account ID for the customer",
            "nullable": true
          },
          "leave_stripe_invoices_in_draft": {
            "type": "boolean",
            "description": "Leave in draft or set to auto-advance on invoices sent to Stripe. Falls back to the client-level config if unset, which defaults to true if unset.",
            "nullable": true
          }
        }
      },
      "CustomerConfig": {
        "required": ["salesforce_account_id"],
        "type": "object",
        "properties": {
          "salesforce_account_id": {
            "type": "string",
            "description": "The Salesforce account ID for the customer",
            "nullable": true
          }
        }
      },
      "Customer": {
        "required": ["external_id", "ingest_aliases", "id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "the Metronome ID of the customer"
          },
          "external_id": {
            "type": "string",
            "description": "(deprecated, use ingest_aliases instead) the first ID (Metronome or ingest alias) that can be used in usage events"
          },
          "ingest_aliases": {
            "type": "array",
            "description": "aliases for this customer that can be used instead of the Metronome customer ID in usage events",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "custom_fields": {
            "x-cf-entity": "customer",
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "CustomerDetail": {
        "required": [
          "external_id",
          "id",
          "name",
          "created_at",
          "customer_config",
          "ingest_aliases",
          "custom_fields"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "the Metronome ID of the customer"
          },
          "external_id": {
            "type": "string",
            "description": "(deprecated, use ingest_aliases instead) the first ID (Metronome or ingest alias) that can be used in usage events"
          },
          "ingest_aliases": {
            "type": "array",
            "description": "aliases for this customer that can be used instead of the Metronome customer ID in usage events",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "customer_config": {
            "$ref": "#/components/schemas/CustomerConfig"
          },
          "custom_fields": {
            "x-cf-entity": "customer",
            "$ref": "#/components/schemas/CustomField"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the customer was created."
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the customer was archived. Null if the customer is active.",
            "nullable": true
          }
        }
      },
      "CustomerPlanDetail": {
        "required": [
          "id",
          "name",
          "custom_fields",
          "starting_on",
          "customer_plan_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "starting_on": {
            "type": "string",
            "format": "date-time",
            "description": "The start date of the plan"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "The end date of the plan",
            "nullable": true
          },
          "custom_fields": {
            "x-cf-entity": "plan",
            "$ref": "#/components/schemas/CustomField"
          },
          "customer_plan_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "BillableStatus": {
        "type": "string",
        "enum": ["billable", "unbillable"]
      },
      "CreditGrantRolloverSettings": {
        "type": "object",
        "description": "Configure a rollover for this credit grant so if it expires it rolls over a configured amount to a new credit grant. This feature is currently opt-in only. Contact Metronome to be added to the beta.",
        "required": ["expires_at", "priority", "rollover_amount"],
        "properties": {
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date to expire the rollover credits."
          },
          "priority": {
            "type": "number",
            "description": "The priority to give the rollover credit grant that gets created when a rollover happens."
          },
          "rollover_amount": {
            "description": "Specify how much to rollover to the rollover credit grant",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RolloverAmountMaxPercentage"
              },
              {
                "$ref": "#/components/schemas/RolloverAmountMaxAmount"
              }
            ]
          }
        }
      },
      "RolloverAmountMaxPercentage": {
        "type": "object",
        "required": ["type", "value"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["MAX_PERCENTAGE"],
            "description": "Rollover up to a percentage of the original credit grant amount."
          },
          "value": {
            "type": "number",
            "description": "The maximum percentage (0-1) of the original credit grant to rollover.",
            "minimum": 0,
            "maximum": 1
          }
        }
      },
      "RolloverAmountMaxAmount": {
        "type": "object",
        "required": ["type", "value"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["MAX_AMOUNT"],
            "description": "Rollover up to a fixed amount of the original credit grant amount."
          },
          "value": {
            "type": "number",
            "description": "The maximum amount to rollover."
          }
        }
      },
      "NameValuePair": {
        "type": "object",
        "required": ["name", "value"],
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "RechargeSettingsStatus": {
        "type": "object",
        "required": ["code"],
        "properties": {
          "code": {
            "type": "string",
            "enum": ["active", "disabled", "processing", "disabled_error"],
            "description": "the status of the recharge"
          },
          "stripe_error_code": {
            "type": "string",
            "description": "the error code returned by Stripe if the reason why the recharge failed"
          },
          "last_credit_grant": {
            "type": "string",
            "format": "uuid",
            "description": "the Metronome ID of the last credit grant that was created by this recharge"
          }
        }
      },
      "PrepaidGrantOptions": {
        "type": "object",
        "description": "Options for prepaid credits.  If specified, the credits will not be released until payment is received.",
        "required": ["billing_provider_type"],
        "properties": {
          "billing_provider_type": {
            "type": "string",
            "description": "The type of billing provider to use for the prepaid invoice.  Currently only 'stripe' is supported."
          },
          "stripe_options": {
            "type": "object",
            "description": "Options for prepaid credits using Stripe",
            "properties": {
              "calculate_tax": {
                "type": "boolean",
                "description": "Whether to calculate tax for the prepaid invoice Defaults to false if not provided."
              },
              "tax_platform": {
                "$ref": "#/components/schemas/TaxPlatform",
                "description": "The tax platform used for calculating tax. Defaults to 'stripe' if not provided."
              },
              "skip_tax_on_tax_platform_error": {
                "type": "boolean",
                "description": "Whether to skip tax calculation if the tax platform returns an error. Defaults to true if not provided."
              },
              "precalculated_tax": {
                "type": "number",
                "description": "The tax amount to use for the prepaid invoice. If provided, this will be used instead of calculating tax. Not applicable for recharge settings. Decimal numbers are not supported and the value is the smallest denomination of the currency (e.g. cents)."
              },
              "tax_product_id": {
                "type": "string",
                "description": "Optional Stripe product ID to use for the tax line item in Stripe. If omitted a random Stripe product will be created and used for the invoice."
              },
              "redirect_url": {
                "type": "string",
                "description": "The URL to redirect the user to after they have corrected a billing issue"
              },
              "invoice_custom_fields": {
                "type": "array",
                "description": "Custom fields to add to the prepaid invoice",
                "items": {
                  "$ref": "#/components/schemas/NameValuePair"
                }
              },
              "invoice_metadata": {
                "type": "object",
                "additionalProperties": true,
                "description": "Invoice metadata to add to the prepaid invoice"
              },
              "payment_method_id": {
                "type": "string",
                "description": "Optional Stripe payment method ID to use."
              },
              "product_id": {
                "type": "string",
                "description": "Optional Stripe product ID for the invoice line item. This will be passed to Stripe on the associated credit grant invoice line item and other tax platforms if applicable."
              },
              "radar_session_id": {
                "type": "string",
                "description": "Optional Radar session ID to send to Stripe when creating the payment intent."
              }
            }
          }
        }
      },
      "PrepaidRechargeGrantOptions": {
        "type": "object",
        "description": "Options for prepaid credits.  If specified, the credits will not be released until payment is received.",
        "required": ["billing_provider_type"],
        "properties": {
          "billing_provider_type": {
            "type": "string",
            "description": "The type of billing provider to use for the prepaid invoice.  Currently only 'stripe' is supported."
          },
          "stripe_options": {
            "type": "object",
            "description": "Options for prepaid credits using Stripe",
            "properties": {
              "calculate_tax": {
                "type": "boolean",
                "description": "Whether to calculate tax for the prepaid invoice Defaults to false if not provided."
              },
              "tax_platform": {
                "$ref": "#/components/schemas/TaxPlatform",
                "description": "The tax platform used for calculating tax. Defaults to 'stripe' if not provided."
              },
              "skip_tax_on_tax_platform_error": {
                "type": "boolean",
                "description": "Whether to skip tax calculation if the tax platform returns an error. Defaults to true if not provided."
              },
              "tax_product_id": {
                "type": "string",
                "description": "Optional Stripe product ID to use for the tax line item. If omitted a random Stripe product will be created and used for the invoice."
              },
              "redirect_url": {
                "type": "string",
                "description": "The URL to redirect the user to after they have corrected a billing issue"
              },
              "invoice_custom_fields": {
                "type": "array",
                "description": "Custom fields to add to the prepaid invoice",
                "items": {
                  "$ref": "#/components/schemas/NameValuePair"
                }
              },
              "invoice_metadata": {
                "type": "object",
                "additionalProperties": true,
                "description": "Invoice metadata to add to the prepaid invoice"
              },
              "payment_method_id": {
                "type": "string",
                "description": "Optional Stripe payment method ID to use."
              },
              "product_id": {
                "type": "string",
                "description": "Optional Stripe product ID to use for the grant."
              }
            }
          }
        }
      },
      "TaxPlatform": {
        "type": "string",
        "enum": ["stripe", "anrok"]
      },
      "CustomFieldFilterType": {
        "type": "object",
        "required": ["entity", "key", "value"],
        "properties": {
          "entity": {
            "type": "string",
            "enum": ["Contract", "Commit", "ContractCredit"]
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "GroupValueFilterType": {
        "type": "object",
        "required": ["key", "value"],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "InvoiceTypesFilterType": {
        "type": "array",
        "description": "Only supported for invoice_total_reached alerts. A list of invoice types to evaluate.",
        "items": {
          "$ref": "#/components/schemas/InvoiceType"
        }
      },
      "CreditType": {
        "required": ["name", "id"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CreditTypeConversionInput": {
        "type": "object",
        "required": ["custom_credit_type_id", "fiat_per_custom_credit"],
        "properties": {
          "custom_credit_type_id": {
            "type": "string",
            "format": "uuid"
          },
          "fiat_per_custom_credit": {
            "type": "number"
          }
        }
      },
      "CreditTypeConversion": {
        "required": ["fiat_per_custom_credit", "custom_credit_type"],
        "type": "object",
        "properties": {
          "fiat_per_custom_credit": {
            "type": "string"
          },
          "custom_credit_type": {
            "$ref": "#/components/schemas/CreditType"
          }
        }
      },
      "Event": {
        "required": [
          "customer_id",
          "event_type",
          "timestamp",
          "transaction_id"
        ],
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "customer_id": {
            "type": "string",
            "minLength": 1
          },
          "event_type": {
            "type": "string",
            "minLength": 1
          },
          "timestamp": {
            "type": "string",
            "description": "RFC 3339 formatted"
          },
          "properties": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "PreviewEvent": {
        "required": ["event_type"],
        "type": "object",
        "properties": {
          "event_type": {
            "type": "string",
            "minLength": 1
          },
          "timestamp": {
            "type": "string",
            "description": "RFC 3339 formatted. If not provided, the current time will be used."
          },
          "properties": {
            "type": "object",
            "additionalProperties": true
          },
          "transaction_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128,
            "description": "This has no effect for preview events, but may be set for consistency with Event objects. Duplicate transaction_ids are NOT filtered out, even within the same request."
          },
          "customer_id": {
            "type": "string",
            "minLength": 1,
            "description": "This has no effect for preview events, but may be set for consistency with Event objects. They will be processed even if they do not match the customer's ID or ingest aliases."
          }
        }
      },
      "Error": {
        "required": ["message"],
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "CreditLedgerEntry": {
        "type": "object",
        "required": [
          "amount",
          "reason",
          "running_balance",
          "effective_at",
          "created_by",
          "credit_grant_id"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "an amount representing the change to the customer's credit balance"
          },
          "reason": {
            "type": "string",
            "example": "Automated invoice deduction"
          },
          "running_balance": {
            "type": "number",
            "description": "the running balance for this credit type at the time of the ledger entry, including all preceding charges"
          },
          "effective_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "credit_grant_id": {
            "type": "string",
            "format": "uuid",
            "description": "the credit grant this entry is related to"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "if this entry is a deduction, the Metronome ID of the invoice where the credit deduction was consumed; if this entry is a grant, the Metronome ID of the invoice where the grant's paid_amount was charged"
          }
        }
      },
      "CreditTypeLedger": {
        "type": "object",
        "required": [
          "credit_type",
          "starting_balance",
          "ending_balance",
          "entries",
          "pending_entries"
        ],
        "properties": {
          "credit_type": {
            "$ref": "#/components/schemas/CreditType"
          },
          "starting_balance": {
            "type": "object",
            "required": [
              "excluding_pending",
              "including_pending",
              "effective_at"
            ],
            "properties": {
              "excluding_pending": {
                "type": "number",
                "description": "the starting balance, including all posted grants, deductions, and expirations that happened at or before the effective_at timestamp"
              },
              "including_pending": {
                "type": "number",
                "description": "the excluding_pending balance plus any pending activity that has not been posted at the time of the query"
              },
              "effective_at": {
                "type": "string",
                "format": "date-time",
                "description": "the starting_on request parameter (if supplied) or the first credit grant's effective_at date"
              }
            }
          },
          "ending_balance": {
            "description": "the effective balances at the end of the specified time window",
            "type": "object",
            "required": [
              "excluding_pending",
              "including_pending",
              "effective_at"
            ],
            "properties": {
              "excluding_pending": {
                "type": "number",
                "description": "the ending balance, including the balance of all grants that have not expired before the effective_at date and deductions that happened before the effective_at date"
              },
              "including_pending": {
                "type": "number",
                "description": "the excluding_pending balance plus any pending invoice deductions and expirations that will happen by the effective_at date"
              },
              "effective_at": {
                "type": "string",
                "format": "date-time",
                "description": "the ending_before request parameter (if supplied) or the current billing period's end date"
              }
            }
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditLedgerEntry"
            }
          },
          "pending_entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditLedgerEntry"
            }
          }
        }
      },
      "Id": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "BillableMetricWithDeprecatedFields": {
        "required": ["name", "id"],
        "type": "object",
        "properties": {
          "group_by": {
            "type": "array",
            "description": "(DEPRECATED) use group_keys instead",
            "items": {
              "type": "string",
              "description": "A list of keys that can be used to additionally segment the values of the billable metric when making usage queries"
            }
          },
          "group_keys": {
            "$ref": "#/components/schemas/GroupKeysArray"
          },
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "aggregate": {
            "type": "string",
            "description": "(DEPRECATED) use aggregation_type instead"
          },
          "aggregate_keys": {
            "type": "array",
            "description": "(DEPRECATED) use aggregation_key instead",
            "items": {
              "type": "string"
            }
          },
          "filter": {
            "type": "object",
            "description": "(DEPRECATED) use property_filters & event_type_filter instead",
            "additionalProperties": true
          },
          "aggregation_type": {
            "$ref": "#/components/schemas/AggregationType"
          },
          "aggregation_key": {
            "$ref": "#/components/schemas/AggregationKey"
          },
          "event_type_filter": {
            "$ref": "#/components/schemas/EventTypeFilter"
          },
          "property_filters": {
            "$ref": "#/components/schemas/PropertyFiltersArray"
          },
          "custom_fields": {
            "x-cf-entity": "billable_metric",
            "$ref": "#/components/schemas/CustomField"
          },
          "sql": {
            "type": "string",
            "description": "The SQL query associated with the billable metric"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the billable metric was archived. If not provided, the billable metric is not archived."
          }
        }
      },
      "PagedUsageQueryPayload": {
        "required": ["billable_metric_id", "customer_id", "window_size"],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "billable_metric_id": {
            "type": "string",
            "format": "uuid"
          },
          "window_size": {
            "type": "string",
            "description": "A window_size of \"day\" or \"hour\" will return the usage for the specified period segmented into daily or hourly aggregates. A window_size of \"none\" will return a single usage aggregate for the entirety of the specified period.",
            "enum": [
              "hour",
              "day",
              "none",
              "HOUR",
              "DAY",
              "NONE",
              "Hour",
              "Day",
              "None"
            ]
          },
          "starting_on": {
            "type": "string",
            "format": "date-time"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          },
          "group_by": {
            "type": "object",
            "required": ["key"],
            "properties": {
              "key": {
                "type": "string",
                "description": "The name of the group_by key to use"
              },
              "values": {
                "type": "array",
                "description": "Values of the group_by key to return in the query. Omit this if you'd like all values for the key returned.",
                "minItems": 1,
                "items": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          },
          "current_period": {
            "type": "boolean",
            "description": "If true, will return the usage for the current billing period. Will return an error if the customer is currently uncontracted or starting_on and ending_before are specified when this is true."
          }
        }
      },
      "UsageBatchQueryPayload": {
        "required": ["window_size", "starting_on", "ending_before"],
        "type": "object",
        "properties": {
          "customer_ids": {
            "type": "array",
            "description": "A list of Metronome customer IDs to fetch usage for. If absent, usage for all customers will be returned.",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "billable_metrics": {
            "type": "array",
            "description": "A list of billable metrics to fetch usage for. If absent, all billable metrics will be returned.",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "group_by": {
                  "type": "object",
                  "required": ["key"],
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The name of the group_by key to use"
                    },
                    "values": {
                      "type": "array",
                      "description": "Values of the group_by key to return in the query. If this field is omitted, all available values will be returned, up to a maximum of 200.",
                      "minItems": 1,
                      "maxItems": 200,
                      "items": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "window_size": {
            "type": "string",
            "description": "A window_size of \"day\" or \"hour\" will return the usage for the specified period segmented into daily or hourly aggregates. A window_size of \"none\" will return a single usage aggregate for the entirety of the specified period.",
            "enum": [
              "hour",
              "day",
              "none",
              "HOUR",
              "DAY",
              "NONE",
              "Hour",
              "Day",
              "None"
            ]
          },
          "starting_on": {
            "type": "string",
            "format": "date-time"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PagedUsageAggregate": {
        "required": [
          "starting_on",
          "ending_before",
          "group_key",
          "group_value",
          "value"
        ],
        "type": "object",
        "properties": {
          "starting_on": {
            "type": "string",
            "format": "date-time"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          },
          "group_key": {
            "type": "string",
            "nullable": true
          },
          "group_value": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "UsageBatchAggregate": {
        "required": [
          "customer_id",
          "billable_metric_id",
          "billable_metric_name",
          "start_timestamp",
          "end_timestamp",
          "value"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "billable_metric_id": {
            "type": "string",
            "format": "uuid"
          },
          "billable_metric_name": {
            "type": "string"
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "end_timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "number",
            "nullable": true
          },
          "groups": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "nullable": true
            },
            "description": "Values will be either a number or null. Null indicates that there were no matches for the group_by value."
          }
        }
      },
      "LineItemBreakdown": {
        "type": "object",
        "required": ["name", "cost"],
        "properties": {
          "name": {
            "type": "string"
          },
          "cost": {
            "type": "number"
          },
          "group_key": {
            "type": "string"
          },
          "group_value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CostsPerCreditType": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "cost": {
              "type": "number"
            },
            "line_item_breakdown": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LineItemBreakdown"
              }
            }
          }
        }
      },
      "InvoiceStatus": {
        "type": "string",
        "example": "DRAFT, VOID, or FINALIZED"
      },
      "InvoiceType": {
        "type": "string",
        "example": "PLAN_ARREARS, SCHEDULED, USAGE, CORRECTION, CREDIT_PURCHASE, or SEAT_PURCHASE"
      },
      "Invoice": {
        "required": [
          "id",
          "customer_id",
          "credit_type",
          "line_items",
          "status",
          "total",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "customer_custom_fields": {
            "$ref": "#/components/schemas/CustomField"
          },
          "net_payment_terms_days": {
            "type": "number"
          },
          "credit_type": {
            "$ref": "#/components/schemas/CreditType"
          },
          "line_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineItem"
            }
          },
          "start_timestamp": {
            "description": "Beginning of the usage period this invoice covers (UTC)",
            "type": "string",
            "format": "date-time"
          },
          "end_timestamp": {
            "description": "End of the usage period this invoice covers (UTC)",
            "type": "string",
            "format": "date-time"
          },
          "issued_at": {
            "description": "When the invoice was issued (UTC)",
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "description": "When the invoice was created (UTC). This field is present for correction invoices only.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/InvoiceStatus"
          },
          "total": {
            "type": "number"
          },
          "type": {
            "$ref": "#/components/schemas/InvoiceType"
          },
          "external_invoice": {
            "$ref": "#/components/schemas/ExternalInvoice",
            "nullable": true
          },
          "contract_id": {
            "type": "string",
            "format": "uuid"
          },
          "contract_custom_fields": {
            "$ref": "#/components/schemas/CustomField"
          },
          "amendment_id": {
            "type": "string",
            "format": "uuid"
          },
          "custom_fields": {
            "x-cf-entity": "invoice",
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "BreakdownInvoice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Invoice"
          },
          {
            "type": "object",
            "required": [
              "breakdown_start_timestamp",
              "breakdown_end_timestamp"
            ],
            "properties": {
              "breakdown_start_timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "breakdown_end_timestamp": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "UsageInvoice": {
        "required": [
          "id",
          "customer_id",
          "credit_type",
          "line_items",
          "status",
          "total",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "credit_type": {
            "$ref": "#/components/schemas/CreditType"
          },
          "line_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineItem"
            }
          },
          "start_timestamp": {
            "description": "Beginning of the usage period this invoice covers (UTC)",
            "type": "string",
            "format": "date-time"
          },
          "end_timestamp": {
            "description": "End of the usage period this invoice covers (UTC)",
            "type": "string",
            "format": "date-time"
          },
          "issued_at": {
            "description": "When the invoice was issued (UTC)",
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "description": "When the invoice was created (UTC). This field is present for correction invoices only.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/InvoiceStatus"
          },
          "subtotal": {
            "type": "number"
          },
          "type": {
            "$ref": "#/components/schemas/InvoiceType"
          },
          "contract_id": {
            "type": "string",
            "format": "uuid"
          },
          "amendment_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ExternalInvoiceStatus": {
        "type": "string",
        "enum": [
          "DRAFT",
          "FINALIZED",
          "PAID",
          "UNCOLLECTIBLE",
          "VOID",
          "DELETED",
          "PAYMENT_FAILED",
          "INVALID_REQUEST_ERROR",
          "SKIPPED",
          "SENT",
          "QUEUED"
        ]
      },
      "ExternalInvoice": {
        "required": ["billing_provider_type"],
        "type": "object",
        "properties": {
          "billing_provider_type": {
            "$ref": "#/components/schemas/BillingProviderType"
          },
          "invoice_id": {
            "type": "string"
          },
          "issued_at_timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "external_status": {
            "$ref": "#/components/schemas/ExternalInvoiceStatus"
          }
        }
      },
      "InvoiceLineItem": {
        "required": ["name", "total", "credit_type"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity associated with the line item."
          },
          "total": {
            "type": "number"
          },
          "unit_price": {
            "type": "number",
            "description": "The unit price associated with the line item."
          },
          "list_price": {
            "$ref": "#/components/schemas/Rate",
            "description": "Only present for contract invoices and when the `include_list_prices` query parameter is set to true. This will include the list rate for the charge if applicable.  Only present for usage and subscription line items.\n"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the product associated with the line item."
          },
          "product_custom_fields": {
            "$ref": "#/components/schemas/CustomField"
          },
          "product_tags": {
            "$ref": "#/components/schemas/Tags",
            "description": "The current product tags associated with the line item's `product_id`."
          },
          "product_type": {
            "type": "string",
            "description": "The type of the line item's product. Possible values are `FixedProductListItem` (for `FIXED` type products), `UsageProductListItem` (for `USAGE` type products), `SubscriptionProductListItem` (for `SUBSCRIPTION` type products) or `CompositeProductListItem` (for `COMPOSITE` type products).  For scheduled charges, commit and credit payments, the value is `FixedProductListItem`.\n"
          },
          "is_prorated": {
            "type": "boolean",
            "description": "Indicates whether the line item is prorated for `SUBSCRIPTION` type product."
          },
          "credit_type": {
            "$ref": "#/components/schemas/CreditType"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "The line item's start date (inclusive)."
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "The line item's end date (exclusive)."
          },
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "description": "For line items with product of `USAGE`, `SUBSCRIPTION`, or `COMPOSITE` types, the ID of the credit or commit that was applied to this line item. For line items with product type of `FIXED`, the ID of the prepaid or postpaid commit that is being paid for."
          },
          "applied_commit_or_credit": {
            "$ref": "#/components/schemas/AppliedCommitOrCredit",
            "description": "Details about the credit or commit that was applied to this line item. Only present on line items with product of `USAGE`, `SUBSCRIPTION` or `COMPOSITE` types."
          },
          "commit_custom_fields": {
            "$ref": "#/components/schemas/CustomField"
          },
          "commit_segment_id": {
            "type": "string",
            "format": "uuid"
          },
          "commit_type": {
            "type": "string",
            "description": "`PrepaidCommit` (for commit types `PREPAID` and `CREDIT`) or `PostpaidCommit` (for commit type `POSTPAID`)."
          },
          "postpaid_commit": {
            "description": "Only present for line items paying for a postpaid commit true-up.",
            "$ref": "#/components/schemas/PostpaidCommit"
          },
          "custom_fields": {
            "x-cf-entity": "product",
            "$ref": "#/components/schemas/CustomField"
          },
          "pricing_group_values": {
            "type": "object",
            "description": "Includes the pricing group values associated with this line item if dimensional pricing is used.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "presentation_group_values": {
            "type": "object",
            "description": "Includes the presentation group values associated with this line item if presentation group keys are used.",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "metadata": {
            "type": "string"
          },
          "scheduled_charge_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of scheduled charge."
          },
          "scheduled_charge_custom_fields": {
            "$ref": "#/components/schemas/CustomField"
          },
          "subscription_custom_fields": {
            "$ref": "#/components/schemas/CustomField"
          },
          "tier": {
            "$ref": "#/components/schemas/TierMetadata",
            "description": "Populated if the line item has a tiered price."
          },
          "discount_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the discount applied to this line item."
          },
          "discount_custom_fields": {
            "x-cf-entity": "discount",
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "TierMetadata": {
        "required": ["level", "starting_at"],
        "type": "object",
        "properties": {
          "size": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "number"
          },
          "starting_at": {
            "type": "string"
          }
        }
      },
      "InvoiceTier": {
        "required": ["starting_at", "quantity", "price", "subtotal"],
        "type": "object",
        "properties": {
          "starting_at": {
            "type": "number",
            "description": "at what metric amount this tier begins"
          },
          "quantity": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "subtotal": {
            "type": "number"
          }
        }
      },
      "ChargeType": {
        "type": "string",
        "enum": ["usage", "fixed", "composite", "minimum", "seat"]
      },
      "ManagedEntity": {
        "type": "string",
        "enum": [
          "alert",
          "billable_metric",
          "charge",
          "commit",
          "contract_credit",
          "contract_product",
          "contract",
          "customer",
          "discount",
          "invoice",
          "product",
          "rate_card",
          "scheduled_charge",
          "subscription"
        ]
      },
      "ManagedVendor": {
        "type": "string",
        "enum": ["chargebee", "netsuite", "stripe"]
      },
      "CustomField": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "Tags": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "AuditLog": {
        "type": "object",
        "required": ["id", "timestamp", "request"],
        "properties": {
          "id": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "actor": {
            "$ref": "#/components/schemas/Actor"
          },
          "request": {
            "type": "object",
            "required": ["id"],
            "properties": {
              "id": {
                "type": "string"
              },
              "ip": {
                "type": "string"
              },
              "user_agent": {
                "type": "string"
              }
            }
          },
          "resource_type": {
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["success", "failure", "pending"]
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Actor": {
        "type": "object",
        "required": ["id", "name"],
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Service": {
        "type": "object",
        "required": ["name", "usage", "ips"],
        "properties": {
          "name": {
            "type": "string"
          },
          "usage": {
            "type": "string",
            "enum": ["makes_connections_from", "accepts_connections_at"]
          },
          "ips": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProductListItemState": {
        "type": "object",
        "required": ["name", "created_at", "created_by"],
        "properties": {
          "name": {
            "type": "string"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "billable_metric_id": {
            "type": "string"
          },
          "composite_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "quantity_conversion": {
            "$ref": "#/components/schemas/QuantityConversion"
          },
          "quantity_rounding": {
            "$ref": "#/components/schemas/QuantityRounding"
          },
          "composite_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "exclude_free_usage": {
            "type": "boolean"
          },
          "pricing_group_key": {
            "$ref": "#/components/schemas/PricingGroupKey"
          },
          "presentation_group_key": {
            "$ref": "#/components/schemas/PresentationGroupKey"
          }
        }
      },
      "ListProductsPayload": {
        "type": "object",
        "properties": {
          "archive_filter": {
            "type": "string",
            "enum": ["ARCHIVED", "NOT_ARCHIVED", "ALL"],
            "description": "Filter options for the product list. If not provided, defaults to not archived."
          }
        }
      },
      "ProductListItem": {
        "type": "object",
        "required": ["id", "type", "initial", "current", "updates"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "USAGE",
              "SUBSCRIPTION",
              "COMPOSITE",
              "FIXED",
              "PRO_SERVICE"
            ]
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "initial": {
            "$ref": "#/components/schemas/ProductListItemState"
          },
          "current": {
            "$ref": "#/components/schemas/ProductListItemState"
          },
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductListItemUpdate"
            }
          },
          "custom_fields": {
            "x-cf-entity": "contract_product",
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "CreateProductListItemPayload": {
        "type": "object",
        "required": ["name", "type"],
        "properties": {
          "name": {
            "type": "string",
            "description": "displayed on invoices"
          },
          "type": {
            "type": "string",
            "enum": [
              "FIXED",
              "fixed",
              "USAGE",
              "usage",
              "COMPOSITE",
              "composite",
              "SUBSCRIPTION",
              "subscription"
            ]
          },
          "billable_metric_id": {
            "type": "string",
            "format": "uuid",
            "description": "Required for USAGE products"
          },
          "composite_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Required for COMPOSITE products"
          },
          "composite_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required for COMPOSITE products"
          },
          "exclude_free_usage": {
            "type": "boolean",
            "description": "Beta feature only available for composite products. If true, products with $0 will not be included when computing composite usage. Defaults to false"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pricing_group_key": {
            "$ref": "#/components/schemas/PricingGroupKey"
          },
          "presentation_group_key": {
            "$ref": "#/components/schemas/PresentationGroupKey"
          },
          "quantity_conversion": {
            "$ref": "#/components/schemas/QuantityConversion"
          },
          "quantity_rounding": {
            "$ref": "#/components/schemas/QuantityRounding"
          }
        }
      },
      "ProductListItemUpdate": {
        "type": "object",
        "required": ["created_at", "created_by"],
        "properties": {
          "name": {
            "type": "string"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "billable_metric_id": {
            "type": "string",
            "format": "uuid"
          },
          "quantity_conversion": {
            "$ref": "#/components/schemas/QuantityConversion"
          },
          "quantity_rounding": {
            "$ref": "#/components/schemas/QuantityRounding"
          },
          "composite_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "composite_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "exclude_free_usage": {
            "type": "boolean"
          },
          "pricing_group_key": {
            "$ref": "#/components/schemas/PricingGroupKey"
          },
          "presentation_group_key": {
            "$ref": "#/components/schemas/PresentationGroupKey"
          }
        }
      },
      "UpdateProductListItemPayload": {
        "type": "object",
        "required": ["product_id", "starting_at"],
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the product to update"
          },
          "name": {
            "type": "string",
            "description": "displayed on invoices. If not provided, defaults to product's current name."
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp representing when the update should go into effect. It must be on an hour boundary (e.g. 1:00, not 1:30)."
          },
          "exclude_free_usage": {
            "type": "boolean",
            "description": "Beta feature only available for composite products. If true, products with $0 will not be included when computing composite usage. Defaults to false"
          },
          "billable_metric_id": {
            "type": "string",
            "format": "uuid",
            "description": "Available for USAGE products only. If not provided, defaults to product's current billable metric."
          },
          "composite_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Available for COMPOSITE products only. If not provided, defaults to product's current composite_product_ids."
          },
          "quantity_conversion": {
            "$ref": "#/components/schemas/QuantityConversion"
          },
          "quantity_rounding": {
            "$ref": "#/components/schemas/QuantityRounding"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If not provided, defaults to product's current tags"
          },
          "composite_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available for COMPOSITE products only. If not provided, defaults to product's current composite_tags."
          },
          "pricing_group_key": {
            "$ref": "#/components/schemas/PricingGroupKey"
          },
          "presentation_group_key": {
            "$ref": "#/components/schemas/PresentationGroupKey"
          }
        }
      },
      "ArchiveProductListItemPayload": {
        "type": "object",
        "required": ["product_id"],
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the product to be archived"
          }
        }
      },
      "RateCard": {
        "type": "object",
        "required": ["id", "name", "created_at", "created_by"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fiat_credit_type": {
            "$ref": "#/components/schemas/CreditType"
          },
          "credit_type_conversions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditTypeConversion"
            }
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateCardAlias"
            }
          },
          "custom_fields": {
            "x-cf-entity": "rate_card",
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "RateCardAlias": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "QuantityConversion": {
        "type": "object",
        "nullable": true,
        "description": "Optional. Only valid for USAGE products. If provided, the quantity will be converted using the provided conversion factor and operation. For example, if the operation is \"multiply\" and the conversion factor is 100, then the quantity will be multiplied by 100. This can be used in cases where data is sent in one unit and priced in another.  For example, data could be sent in MB and priced in GB. In this case, the conversion factor would be 1024 and the operation would be \"divide\".",
        "required": ["conversion_factor", "operation"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Optional name for this conversion."
          },
          "conversion_factor": {
            "type": "number",
            "description": "The factor to multiply or divide the quantity by."
          },
          "operation": {
            "type": "string",
            "enum": ["multiply", "divide", "MULTIPLY", "DIVIDE"],
            "description": "The operation to perform on the quantity"
          }
        }
      },
      "QuantityRounding": {
        "type": "object",
        "nullable": true,
        "description": "Optional. Only valid for USAGE products. If provided, the quantity will be rounded using the provided rounding method and decimal places. For example, if the method is \"round up\" and the decimal places is 0, then the quantity will be rounded up to the nearest integer.",
        "required": ["rounding_method", "decimal_places"],
        "properties": {
          "rounding_method": {
            "type": "string",
            "enum": [
              "round_up",
              "round_down",
              "round_half_up",
              "ROUND_UP",
              "ROUND_DOWN",
              "ROUND_HALF_UP"
            ]
          },
          "decimal_places": {
            "type": "number",
            "minimum": 0
          }
        }
      },
      "Tier": {
        "type": "object",
        "required": ["price"],
        "properties": {
          "size": {
            "type": "number"
          },
          "price": {
            "type": "number"
          }
        }
      },
      "CommitRate": {
        "type": "object",
        "description": "A distinct rate on the rate card. You can choose to use this rate rather than list rate when consuming a credit or commit.",
        "required": ["rate_type"],
        "properties": {
          "rate_type": {
            "type": "string",
            "enum": ["FLAT", "flat", "TIERED", "tiered"]
          },
          "price": {
            "type": "number",
            "description": "Commit rate price. For FLAT rate_type, this must be >=0."
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tier"
            },
            "description": "Only set for TIERED rate_type."
          }
        }
      },
      "CreateRateCardPayload": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Used only in UI/API. It is not exposed to end customers."
          },
          "description": {
            "type": "string"
          },
          "fiat_credit_type_id": {
            "type": "string",
            "format": "uuid",
            "example": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
            "description": "The Metronome ID of the credit type to associate with the rate card, defaults to USD (cents) if not passed."
          },
          "credit_type_conversions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditTypeConversionInput"
            },
            "description": "Required when using custom pricing units in rates."
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateCardAlias"
            },
            "description": "Reference this alias when creating a contract. If the same alias is assigned to multiple rate cards, it will reference the rate card to which it was most recently assigned. It is not exposed to end customers."
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "UpdateRateCardPayload": {
        "type": "object",
        "required": ["rate_card_id"],
        "properties": {
          "rate_card_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the rate card to update"
          },
          "name": {
            "type": "string",
            "description": "Used only in UI/API. It is not exposed to end customers."
          },
          "description": {
            "type": "string"
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateCardAlias"
            },
            "description": "Reference this alias when creating a contract. If the same alias is assigned to multiple rate cards, it will reference the rate card to which it was most recently assigned. It is not exposed to end customers."
          }
        }
      },
      "AddRatePayload": {
        "type": "object",
        "required": [
          "rate_card_id",
          "product_id",
          "starting_at",
          "entitled",
          "rate_type"
        ],
        "properties": {
          "rate_card_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the rate card to update"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the product to add a rate for"
          },
          "pricing_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. List of pricing group key value pairs which will be used to calculate the price."
          },
          "billing_frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "QUARTERLY",
              "ANNUAL",
              "WEEKLY",
              "monthly",
              "quarterly",
              "annual",
              "weekly"
            ],
            "description": "Optional. Frequency to bill subscriptions with. Required for subscription type products with Flat rate."
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "inclusive effective date"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "exclusive end date"
          },
          "entitled": {
            "type": "boolean"
          },
          "rate_type": {
            "type": "string",
            "enum": [
              "FLAT",
              "flat",
              "PERCENTAGE",
              "percentage",
              "TIERED",
              "tiered"
            ]
          },
          "price": {
            "type": "number",
            "description": "Default price. For FLAT and SUBSCRIPTION rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1."
          },
          "credit_type_id": {
            "type": "string",
            "format": "uuid",
            "example": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
            "description": "The Metronome ID of the credit type to associate with price, defaults to USD (cents) if not passed. Used by all rate_types except type PERCENTAGE. PERCENTAGE rates use the credit type of associated rates."
          },
          "use_list_prices": {
            "type": "boolean",
            "description": "Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract."
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tier"
            },
            "description": "Only set for TIERED rate_type."
          },
          "commit_rate": {
            "$ref": "#/components/schemas/CommitRate"
          }
        }
      },
      "RatePayload": {
        "type": "object",
        "required": ["product_id", "starting_at", "entitled", "rate_type"],
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the product to add a rate for"
          },
          "pricing_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. List of pricing group key value pairs which will be used to calculate the price."
          },
          "billing_frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "QUARTERLY",
              "ANNUAL",
              "WEEKLY",
              "monthly",
              "quarterly",
              "annual",
              "weekly"
            ],
            "description": "Optional. Frequency to bill subscriptions with. Required for subscription type products with Flat rate."
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "inclusive effective date"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "exclusive end date"
          },
          "entitled": {
            "type": "boolean"
          },
          "rate_type": {
            "type": "string",
            "enum": [
              "FLAT",
              "flat",
              "PERCENTAGE",
              "percentage",
              "TIERED",
              "tiered"
            ]
          },
          "price": {
            "type": "number",
            "description": "Default price. For FLAT and SUBSCRIPTION rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1."
          },
          "credit_type_id": {
            "type": "string",
            "format": "uuid",
            "example": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
            "description": "\"The Metronome ID of the credit type to associate with price, defaults to USD (cents) if not passed. Used by all rate_types except type PERCENTAGE. PERCENTAGE rates use the credit type of associated rates.\""
          },
          "quantity": {
            "type": "number",
            "description": "Default quantity. For SUBSCRIPTION rate_type, this must be >=0."
          },
          "is_prorated": {
            "type": "boolean",
            "description": "Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be set to true."
          },
          "use_list_prices": {
            "type": "boolean",
            "description": "Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract."
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tier"
            },
            "description": "Only set for TIERED rate_type."
          },
          "commit_rate": {
            "$ref": "#/components/schemas/CommitRate"
          }
        }
      },
      "SetRateCardProductsOrderPayload": {
        "type": "object",
        "required": ["rate_card_id", "product_order"],
        "properties": {
          "rate_card_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the rate card to update"
          },
          "product_order": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "MoveRateCardProductsPayload": {
        "type": "object",
        "required": ["rate_card_id", "product_moves"],
        "properties": {
          "rate_card_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the rate card to update"
          },
          "product_moves": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["product_id", "position"],
              "properties": {
                "product_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "ID of the product to move"
                },
                "position": {
                  "type": "number",
                  "description": "0-based index of the new position of the product",
                  "minimum": 0
                }
              }
            }
          }
        }
      },
      "GetContractRateSchedulePayload": {
        "type": "object",
        "required": ["customer_id", "contract_id"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer for whose contract to get the rate schedule for."
          },
          "contract_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the contract to get the rate schedule for."
          },
          "at": {
            "type": "string",
            "format": "date-time",
            "description": "optional timestamp which overlaps with the returned rate schedule segments. When not specified, the current timestamp will be used."
          },
          "selectors": {
            "description": "List of rate selectors, rates matching ANY of the selectors will be included in the response. Passing no selectors will result in all rates being returned.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateSelectorWithProductTags"
            }
          }
        }
      },
      "GetRateSchedulePayload": {
        "type": "object",
        "required": ["rate_card_id", "starting_at"],
        "properties": {
          "rate_card_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the rate card to get the schedule for"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "inclusive starting point for the rates schedule"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "optional exclusive end date for the rates schedule. When not specified rates will show all future schedule segments."
          },
          "selectors": {
            "description": "List of rate selectors, rates matching ANY of the selector will be included in the response Passing no selectors will result in all rates being returned.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateSelector"
            }
          }
        }
      },
      "GetRatesPayload": {
        "type": "object",
        "required": ["rate_card_id", "at"],
        "properties": {
          "rate_card_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the rate card to get the schedule for"
          },
          "at": {
            "type": "string",
            "format": "date-time",
            "description": "inclusive starting point for the rates schedule"
          },
          "selectors": {
            "description": "List of rate selectors, rates matching ANY of the selector will be included in the response Passing no selectors will result in all rates being returned.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateSelectorWithProductTags"
            }
          }
        }
      },
      "RateSelector": {
        "type": "object",
        "properties": {
          "billing_frequency": {
            "description": "Subscription rates matching the billing frequency will be included in the response.",
            "type": "string",
            "enum": [
              "MONTHLY",
              "Monthly",
              "monthly",
              "QUARTERLY",
              "Quarterly",
              "quarterly",
              "ANNUAL",
              "Annual",
              "annual",
              "WEEKLY",
              "Weekly",
              "weekly"
            ]
          },
          "product_id": {
            "description": "Rates matching the product id will be included in the response.",
            "type": "string",
            "format": "uuid"
          },
          "pricing_group_values": {
            "description": "List of pricing group key value pairs, rates matching all of the key / value pairs will be included in the response.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "partial_pricing_group_values": {
            "description": "List of pricing group key value pairs, rates containing the matching key / value pairs will be included in the response.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RateSelectorWithProductTags": {
        "type": "object",
        "properties": {
          "billing_frequency": {
            "description": "Subscription rates matching the billing frequency will be included in the response.",
            "type": "string",
            "enum": [
              "MONTHLY",
              "Monthly",
              "monthly",
              "QUARTERLY",
              "Quarterly",
              "quarterly",
              "ANNUAL",
              "Annual",
              "annual",
              "WEEKLY",
              "Weekly",
              "weekly"
            ]
          },
          "product_id": {
            "description": "Rates matching the product id will be included in the response.",
            "type": "string",
            "format": "uuid"
          },
          "product_tags": {
            "description": "List of product tags, rates matching any of the tags will be included in the response.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pricing_group_values": {
            "description": "List of pricing group key value pairs, rates matching all of the key / value pairs will be included in the response.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "partial_pricing_group_values": {
            "description": "List of pricing group key value pairs, rates containing the matching key / value pairs will be included in the response.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RateSchedule": {
        "type": "object",
        "required": [
          "product_id",
          "product_name",
          "product_tags",
          "product_custom_fields",
          "starting_at",
          "entitled",
          "rate"
        ],
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "product_name": {
            "type": "string"
          },
          "product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "product_custom_fields": {
            "$ref": "#/components/schemas/CustomField"
          },
          "pricing_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          },
          "entitled": {
            "type": "boolean"
          },
          "rate": {
            "$ref": "#/components/schemas/Rate"
          },
          "commit_rate": {
            "$ref": "#/components/schemas/CommitRate"
          },
          "billing_frequency": {
            "type": "string",
            "enum": ["MONTHLY", "QUARTERLY", "ANNUAL", "WEEKLY"]
          }
        }
      },
      "ContractRateSchedule": {
        "type": "object",
        "required": [
          "rate_card_id",
          "product_id",
          "product_name",
          "product_tags",
          "product_custom_fields",
          "starting_at",
          "entitled",
          "list_rate"
        ],
        "properties": {
          "rate_card_id": {
            "type": "string",
            "format": "uuid"
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "product_name": {
            "type": "string"
          },
          "product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "product_custom_fields": {
            "$ref": "#/components/schemas/CustomField"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          },
          "entitled": {
            "type": "boolean"
          },
          "pricing_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "list_rate": {
            "$ref": "#/components/schemas/Rate"
          },
          "override_rate": {
            "$ref": "#/components/schemas/Rate"
          },
          "commit_rate": {
            "$ref": "#/components/schemas/CommitRate"
          },
          "billing_frequency": {
            "type": "string",
            "enum": ["MONTHLY", "QUARTERLY", "ANNUAL", "WEEKLY"]
          }
        }
      },
      "Rate": {
        "type": "object",
        "required": ["rate_type"],
        "properties": {
          "rate_type": {
            "type": "string",
            "enum": [
              "FLAT",
              "flat",
              "PERCENTAGE",
              "percentage",
              "TIERED",
              "tiered"
            ]
          },
          "price": {
            "type": "number",
            "description": "Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1."
          },
          "use_list_prices": {
            "type": "boolean",
            "description": "Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract."
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tier"
            },
            "description": "Only set for TIERED rate_type."
          },
          "pricing_group_values": {
            "type": "object",
            "description": "if pricing groups are used, this will contain the values used to calculate the price",
            "additionalProperties": {
              "type": "string"
            }
          },
          "credit_type": {
            "$ref": "#/components/schemas/CreditType"
          }
        }
      },
      "RateWithCommitRate": {
        "type": "object",
        "required": ["rate_type"],
        "properties": {
          "rate_type": {
            "type": "string",
            "enum": [
              "FLAT",
              "flat",
              "PERCENTAGE",
              "percentage",
              "TIERED",
              "tiered"
            ]
          },
          "price": {
            "type": "number",
            "description": "Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1."
          },
          "use_list_prices": {
            "type": "boolean",
            "description": "Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract."
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tier"
            },
            "description": "Only set for TIERED rate_type."
          },
          "pricing_group_values": {
            "type": "object",
            "description": "if pricing groups are used, this will contain the values used to calculate the price",
            "additionalProperties": {
              "type": "string"
            }
          },
          "credit_type": {
            "$ref": "#/components/schemas/CreditType"
          },
          "commit_rate": {
            "$ref": "#/components/schemas/CommitRate"
          }
        }
      },
      "OverrideSpecifierInput": {
        "type": "object",
        "properties": {
          "commit_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Can only be used for commit specific overrides. Must be used in conjunction with one of product_id, product_tags, pricing_group_values, or presentation_group_values. If provided, the override will only apply to the specified commits. If not provided, the override will apply to all commits."
          },
          "recurring_commit_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Can only be used for commit specific overrides. Must be used in conjunction with one of product_id, product_tags, pricing_group_values, or presentation_group_values. If provided, the override will only apply to commits created by the specified recurring commit ids."
          },
          "recurring_credit_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Can only be used for commit specific overrides. Must be used in conjunction with one of product_id, product_tags, pricing_group_values, or presentation_group_values. If provided, the override will only apply to credits created by the specified recurring credit ids."
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "If provided, the override will only apply to the product with the specified ID."
          },
          "product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If provided, the override will only apply to products with all the specified tags."
          },
          "pricing_group_values": {
            "type": "object",
            "description": "A map of pricing group names to values. The override will only apply to products with the specified pricing group values.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "presentation_group_values": {
            "type": "object",
            "description": "A map of group names to values. The override will only apply to line items with the specified presentation group values.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "billing_frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "QUARTERLY",
              "ANNUAL",
              "monthly",
              "quarterly",
              "annual",
              "WEEKLY",
              "weekly"
            ]
          }
        }
      },
      "OverrideSpecifierInputV2": {
        "type": "object",
        "properties": {
          "commit_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If provided, the override will only apply to the specified commits. Can only be used for commit specific overrides. If not provided, the override will apply to all commits."
          },
          "recurring_commit_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Can only be used for commit specific overrides. Must be used in conjunction with one of product_id, product_tags, pricing_group_values, or presentation_group_values. If provided, the override will only apply to commits created by the specified recurring commit ids."
          },
          "recurring_credit_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Can only be used for commit specific overrides. Must be used in conjunction with one of product_id, product_tags, pricing_group_values, or presentation_group_values. If provided, the override will only apply to commits created by the specified recurring credit ids."
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "If provided, the override will only apply to the product with the specified ID."
          },
          "product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If provided, the override will only apply to products with all the specified tags."
          },
          "pricing_group_values": {
            "type": "object",
            "description": "A map of pricing group names to values. The override will only apply to products with the specified pricing group values.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "presentation_group_values": {
            "type": "object",
            "description": "A map of group names to values. The override will only apply to line items with the specified presentation group values. Can only be used for multiplier overrides.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "billing_frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "QUARTERLY",
              "ANNUAL",
              "WEEKLY",
              "monthly",
              "quarterly",
              "annual",
              "weekly"
            ]
          }
        }
      },
      "OverrideSpecifier": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pricing_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "presentation_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "commit_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recurring_commit_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recurring_credit_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "billing_frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "QUARTERLY",
              "ANNUAL",
              "WEEKLY",
              "monthly",
              "quarterly",
              "annual",
              "weekly"
            ]
          }
        }
      },
      "OverrideSpecifierV2": {
        "type": "object",
        "properties": {
          "commit_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recurring_commit_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recurring_credit_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pricing_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "presentation_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            }
          },
          "billing_frequency": {
            "type": "string",
            "enum": ["MONTHLY", "QUARTERLY", "ANNUAL", "WEEKLY"]
          }
        }
      },
      "OverwriteRate": {
        "type": "object",
        "required": ["rate_type"],
        "properties": {
          "rate_type": {
            "type": "string",
            "enum": [
              "FLAT",
              "flat",
              "PERCENTAGE",
              "percentage",
              "TIERED",
              "tiered"
            ]
          },
          "price": {
            "type": "number",
            "description": "Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1."
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tier"
            },
            "description": "Only set for TIERED rate_type."
          },
          "credit_type": {
            "$ref": "#/components/schemas/CreditType"
          }
        }
      },
      "OverwriteRateV2": {
        "type": "object",
        "required": ["rate_type"],
        "properties": {
          "rate_type": {
            "type": "string",
            "enum": [
              "FLAT",
              "flat",
              "PERCENTAGE",
              "percentage",
              "SUBSCRIPTION",
              "subscription",
              "TIERED",
              "tiered"
            ]
          },
          "price": {
            "type": "number",
            "description": "Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1."
          },
          "quantity": {
            "type": "number",
            "description": "Default quantity. For SUBSCRIPTION rate_type, this must be >=0."
          },
          "is_prorated": {
            "type": "boolean",
            "description": "Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be set to true."
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tier"
            },
            "description": "Only set for TIERED rate_type."
          },
          "credit_type": {
            "$ref": "#/components/schemas/CreditType"
          }
        }
      },
      "OverwriteRateInput": {
        "type": "object",
        "required": ["rate_type"],
        "properties": {
          "rate_type": {
            "type": "string",
            "enum": [
              "FLAT",
              "flat",
              "PERCENTAGE",
              "percentage",
              "TIERED",
              "tiered"
            ]
          },
          "price": {
            "type": "number",
            "description": "Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1."
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tier"
            },
            "description": "Only set for TIERED rate_type."
          },
          "credit_type_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "OverwriteRateInputV2": {
        "type": "object",
        "required": ["rate_type"],
        "properties": {
          "rate_type": {
            "type": "string",
            "enum": [
              "FLAT",
              "flat",
              "PERCENTAGE",
              "percentage",
              "SUBSCRIPTION",
              "subscription",
              "TIERED",
              "tiered"
            ]
          },
          "price": {
            "type": "number",
            "description": "Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1."
          },
          "quantity": {
            "type": "number",
            "description": "Default quantity. For SUBSCRIPTION rate_type, this must be >=0."
          },
          "is_prorated": {
            "type": "boolean",
            "description": "Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be set to true."
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tier"
            },
            "description": "Only set for TIERED rate_type."
          },
          "credit_type_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "OverrideTier": {
        "type": "object",
        "required": ["multiplier"],
        "properties": {
          "size": {
            "type": "number"
          },
          "multiplier": {
            "type": "number"
          }
        }
      },
      "OverrideTierInput": {
        "type": "object",
        "required": ["multiplier"],
        "properties": {
          "size": {
            "type": "number"
          },
          "multiplier": {
            "type": "number"
          }
        }
      },
      "ContractWithoutAmendments": {
        "type": "object",
        "required": [
          "starting_at",
          "commits",
          "overrides",
          "scheduled_charges",
          "transitions",
          "created_at",
          "created_by",
          "usage_statement_schedule"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "rate_card_id": {
            "type": "string",
            "format": "uuid"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          },
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Commit"
            }
          },
          "credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Credit"
            }
          },
          "recurring_commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringCommit"
            }
          },
          "recurring_credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringCredit"
            }
          },
          "overrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Override"
            }
          },
          "scheduled_charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledCharge"
            }
          },
          "scheduled_charges_on_usage_invoices": {
            "$ref": "#/components/schemas/ScheduledChargesOnUsageInvoices"
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractTransition"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "net_payment_terms_days": {
            "type": "number"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          },
          "usage_filter": {
            "$ref": "#/components/schemas/UsageFilter"
          },
          "usage_statement_schedule": {
            "$ref": "#/components/schemas/UsageStatementSchedule"
          },
          "spend_threshold_configuration": {
            "$ref": "#/components/schemas/SpendThresholdConfiguration"
          },
          "prepaid_balance_threshold_configuration": {
            "$ref": "#/components/schemas/PrepaidBalanceThresholdConfiguration"
          }
        }
      },
      "Contract": {
        "type": "object",
        "required": ["id", "customer_id", "initial", "current", "amendments"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the contract was archived. If not returned, the contract is not archived."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "uniqueness_key": {
            "$ref": "#/components/schemas/UniquenessKey"
          },
          "initial": {
            "$ref": "#/components/schemas/ContractWithoutAmendments"
          },
          "current": {
            "$ref": "#/components/schemas/ContractWithoutAmendments"
          },
          "amendments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractAmendment"
            }
          },
          "custom_fields": {
            "x-cf-entity": "contract",
            "$ref": "#/components/schemas/CustomField"
          },
          "customer_billing_provider_configuration": {
            "type": "object",
            "description": "The billing provider configuration associated with a contract.",
            "required": ["billing_provider", "delivery_method"],
            "properties": {
              "billing_provider": {
                "$ref": "#/components/schemas/BillingProviderType"
              },
              "delivery_method": {
                "$ref": "#/components/schemas/BillingProviderDeliveryMethodType"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "configuration": {
                "type": "object",
                "additionalProperties": true,
                "description": "Configuration for the billing provider. The structure of this object is specific to the billing provider."
              }
            }
          },
          "scheduled_charges_on_usage_invoices": {
            "$ref": "#/components/schemas/ScheduledChargesOnUsageInvoices"
          },
          "subscriptions": {
            "$ref": "#/components/schemas/Subscriptions"
          },
          "spend_threshold_configuration": {
            "$ref": "#/components/schemas/SpendThresholdConfiguration"
          },
          "prepaid_balance_threshold_configuration": {
            "$ref": "#/components/schemas/PrepaidBalanceThresholdConfiguration"
          }
        }
      },
      "ContractV2": {
        "type": "object",
        "required": [
          "id",
          "customer_id",
          "starting_at",
          "commits",
          "overrides",
          "scheduled_charges",
          "transitions",
          "created_at",
          "created_by",
          "usage_statement_schedule",
          "usage_filter"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "uniqueness_key": {
            "$ref": "#/components/schemas/UniquenessKey"
          },
          "name": {
            "type": "string"
          },
          "rate_card_id": {
            "type": "string",
            "format": "uuid"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          },
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitV2"
            }
          },
          "credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditV2"
            }
          },
          "has_more": {
            "$ref": "#/components/schemas/HasMore"
          },
          "overrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideV2"
            }
          },
          "scheduled_charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledCharge"
            }
          },
          "scheduled_charges_on_usage_invoices": {
            "$ref": "#/components/schemas/ScheduledChargesOnUsageInvoices"
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractTransition"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "net_payment_terms_days": {
            "type": "number"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time"
          },
          "total_contract_value": {
            "type": "number"
          },
          "usage_filter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsageFilterV2"
            }
          },
          "usage_statement_schedule": {
            "$ref": "#/components/schemas/UsageStatementSchedule"
          },
          "multiplier_override_prioritization": {
            "type": "string",
            "enum": [
              "LOWEST_MULTIPLIER",
              "lowest_multiplier",
              "EXPLICIT",
              "explicit"
            ],
            "description": "Defaults to LOWEST_MULTIPLIER, which applies the greatest discount to list prices automatically. EXPLICIT prioritization requires specifying priorities for each multiplier; the one with the lowest priority value will be prioritized first."
          },
          "custom_fields": {
            "x-cf-entity": "contract",
            "$ref": "#/components/schemas/CustomField"
          },
          "customer_billing_provider_configuration": {
            "type": "object",
            "description": "This field's availability is dependent on your client's configuration.",
            "required": ["id", "billing_provider", "delivery_method"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "ID of Customer's billing provider configuration."
              },
              "billing_provider": {
                "$ref": "#/components/schemas/BillingProviderType"
              },
              "delivery_method": {
                "$ref": "#/components/schemas/BillingProviderDeliveryMethodType"
              }
            }
          },
          "recurring_commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringCommitV2"
            }
          },
          "recurring_credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringCreditV2"
            }
          },
          "spend_threshold_configuration": {
            "$ref": "#/components/schemas/SpendThresholdConfigurationV2"
          },
          "prepaid_balance_threshold_configuration": {
            "$ref": "#/components/schemas/PrepaidBalanceThresholdConfigurationV2"
          },
          "subscriptions": {
            "$ref": "#/components/schemas/Subscriptions"
          }
        }
      },
      "CreateContractPayload": {
        "type": "object",
        "required": ["customer_id", "starting_at"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "uniqueness_key": {
            "$ref": "#/components/schemas/UniquenessKey"
          },
          "net_payment_terms_days": {
            "type": "number"
          },
          "rate_card_id": {
            "type": "string",
            "format": "uuid"
          },
          "rate_card_alias": {
            "type": "string",
            "description": "Selects the rate card linked to the specified alias as of the contract's start date."
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "inclusive contract start time"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "exclusive contract end time"
          },
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitInput"
            }
          },
          "credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditInput"
            }
          },
          "recurring_commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringCommitInput"
            }
          },
          "recurring_credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringCreditInput"
            }
          },
          "multiplier_override_prioritization": {
            "type": "string",
            "enum": [
              "LOWEST_MULTIPLIER",
              "lowest_multiplier",
              "EXPLICIT",
              "explicit"
            ],
            "description": "Defaults to LOWEST_MULTIPLIER, which applies the greatest discount to list prices automatically. EXPLICIT prioritization requires specifying priorities for each multiplier; the one with the lowest priority value will be prioritized first. If tiered overrides are used, prioritization must be explicit."
          },
          "overrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideInput"
            }
          },
          "scheduled_charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledChargeInput"
            }
          },
          "scheduled_charges_on_usage_invoices": {
            "$ref": "#/components/schemas/ScheduledChargesOnUsageInvoices"
          },
          "transition": {
            "$ref": "#/components/schemas/ContractTransitionInput"
          },
          "usage_filter": {
            "$ref": "#/components/schemas/BaseUsageFilter"
          },
          "usage_statement_schedule": {
            "$ref": "#/components/schemas/UsageStatementScheduleInput"
          },
          "custom_fields": {
            "x-cf-entity": "contract",
            "$ref": "#/components/schemas/CustomField"
          },
          "billing_provider_configuration": {
            "$ref": "#/components/schemas/CustomerBillingProviderConfigurationLookup"
          },
          "spend_threshold_configuration": {
            "$ref": "#/components/schemas/SpendThresholdConfiguration"
          },
          "prepaid_balance_threshold_configuration": {
            "$ref": "#/components/schemas/PrepaidBalanceThresholdConfiguration"
          },
          "subscriptions": {
            "$ref": "#/components/schemas/SubscriptionsInput"
          }
        }
      },
      "Subscriptions": {
        "type": "array",
        "description": "List of subscriptions on the contract.",
        "items": {
          "$ref": "#/components/schemas/Subscription"
        }
      },
      "Subscription": {
        "required": [
          "subscription_rate",
          "collection_schedule",
          "proration",
          "quantity_schedule",
          "starting_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "subscription_rate": {
            "$ref": "#/components/schemas/SubscriptionRate"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "collection_schedule": {
            "type": "string",
            "enum": ["ADVANCE", "ARREARS", "advance", "arrears"]
          },
          "proration": {
            "$ref": "#/components/schemas/SubscriptionProration"
          },
          "quantity_schedule": {
            "type": "array",
            "description": "List of quantity schedule items for the subscription. Only includes the current quantity and future quantity changes.",
            "items": {
              "$ref": "#/components/schemas/SubscriptionQuantitySchedule"
            }
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          },
          "fiat_credit_type_id": {
            "type": "string",
            "format": "uuid"
          },
          "custom_fields": {
            "x-cf-entity": "subscription",
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "SubscriptionRate": {
        "type": "object",
        "required": ["billing_frequency", "product"],
        "properties": {
          "billing_frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "QUARTERLY",
              "ANNUAL",
              "WEEKLY",
              "monthly",
              "quarterly",
              "annual",
              "weekly"
            ]
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          }
        }
      },
      "SubscriptionProration": {
        "type": "object",
        "required": ["is_prorated", "invoice_behavior"],
        "properties": {
          "is_prorated": {
            "type": "boolean"
          },
          "invoice_behavior": {
            "type": "string",
            "enum": [
              "BILL_IMMEDIATELY",
              "BILL_ON_NEXT_COLLECTION_DATE",
              "bill_immediately",
              "bill_on_next_collection_date"
            ]
          }
        }
      },
      "SubscriptionQuantitySchedule": {
        "type": "object",
        "required": ["quantity", "starting_at"],
        "properties": {
          "quantity": {
            "type": "number"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SubscriptionsInput": {
        "type": "array",
        "description": "Optional list of [subscriptions](https://docs.metronome.com/manage-product-access/create-subscription/) to add to the contract.",
        "items": {
          "$ref": "#/components/schemas/SubscriptionInput"
        }
      },
      "SubscriptionsInputV2": {
        "type": "array",
        "description": "Optional list of [subscriptions](https://docs.metronome.com/manage-product-access/create-subscription/) to add to the contract.",
        "items": {
          "$ref": "#/components/schemas/SubscriptionInputV2"
        }
      },
      "SubscriptionInput": {
        "required": [
          "subscription_rate",
          "collection_schedule",
          "proration",
          "initial_quantity"
        ],
        "type": "object",
        "properties": {
          "subscription_rate": {
            "$ref": "#/components/schemas/SubscriptionRateInput"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "collection_schedule": {
            "type": "string",
            "enum": ["ADVANCE", "ARREARS", "advance", "arrears"]
          },
          "proration": {
            "$ref": "#/components/schemas/SubscriptionProrationInput"
          },
          "initial_quantity": {
            "type": "number",
            "description": "The initial quantity for the subscription. It must be non-negative value."
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "Inclusive start time for the subscription. If not provided, defaults to contract start date"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "Exclusive end time for the subscription. If not provided, subscription inherits contract end date."
          },
          "custom_fields": {
            "x-cf-entity": "subscription",
            "$ref": "#/components/schemas/CustomField"
          },
          "temporary_id": {
            "type": "string",
            "description": "A temporary ID used to reference the subscription in recurring commit/credit subscription configs created within the same payload."
          }
        }
      },
      "SubscriptionInputV2": {
        "required": [
          "subscription_rate",
          "collection_schedule",
          "proration",
          "initial_quantity"
        ],
        "type": "object",
        "properties": {
          "subscription_rate": {
            "$ref": "#/components/schemas/SubscriptionRateInput"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "collection_schedule": {
            "type": "string",
            "enum": ["ADVANCE", "ARREARS", "advance", "arrears"]
          },
          "proration": {
            "$ref": "#/components/schemas/SubscriptionProrationInput"
          },
          "initial_quantity": {
            "type": "number"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "Inclusive start time for the subscription. If not provided, defaults to contract start date"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "Exclusive end time for the subscription. If not provided, subscription inherits contract end date."
          },
          "custom_fields": {
            "x-cf-entity": "subscription",
            "$ref": "#/components/schemas/CustomField"
          },
          "temporary_id": {
            "type": "string",
            "description": "A temporary ID used to reference the subscription in recurring commit/credit subscription configs created within the same payload."
          }
        }
      },
      "SubscriptionRateInput": {
        "type": "object",
        "required": ["billing_frequency", "product_id"],
        "properties": {
          "billing_frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "QUARTERLY",
              "ANNUAL",
              "WEEKLY",
              "monthly",
              "quarterly",
              "annual",
              "weekly"
            ],
            "description": "Frequency to bill subscription with. Together with product_id, must match existing rate on the rate card."
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "Must be subscription type product"
          }
        }
      },
      "SubscriptionProrationInput": {
        "type": "object",
        "properties": {
          "is_prorated": {
            "type": "boolean",
            "description": "Indicates if the partial period will be prorated or charged a full amount."
          },
          "invoice_behavior": {
            "type": "string",
            "enum": [
              "BILL_IMMEDIATELY",
              "BILL_ON_NEXT_COLLECTION_DATE",
              "bill_immediately",
              "bill_on_next_collection_date"
            ],
            "description": "Indicates how mid-period quantity adjustments are invoiced. \n**BILL_IMMEDIATELY**: Only available when collection schedule is `ADVANCE`. The quantity increase will be billed immediately on the scheduled date.\n**BILL_ON_NEXT_COLLECTION_DATE**: The quantity increase will be billed for in-arrears at the end of the period.\n"
          }
        }
      },
      "PrepaidBalanceThresholdConfiguration": {
        "type": "object",
        "required": [
          "is_enabled",
          "threshold_amount",
          "recharge_to_amount",
          "commit",
          "payment_gate_config"
        ],
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "When set to false, the contract will not be evaluated against the threshold_amount. Toggling to true will result an immediate evaluation, regardless of prior state."
          },
          "threshold_amount": {
            "description": "Specify the threshold amount for the contract. Each time the contract's prepaid balance lowers to this amount, a threshold charge will be initiated.",
            "type": "number"
          },
          "recharge_to_amount": {
            "description": "Specify the amount the balance should be recharged to.",
            "type": "number"
          },
          "custom_credit_type_id": {
            "description": "If provided, the threshold, recharge-to amount, and the resulting threshold commit amount will be in terms of this credit type instead of the fiat currency.",
            "type": "string",
            "format": "uuid"
          },
          "commit": {
            "$ref": "#/components/schemas/PrepaidBalanceThresholdCommit"
          },
          "payment_gate_config": {
            "$ref": "#/components/schemas/PaymentGateConfig"
          }
        }
      },
      "PrepaidBalanceThresholdConfigurationV2": {
        "type": "object",
        "required": [
          "is_enabled",
          "threshold_amount",
          "recharge_to_amount",
          "commit",
          "payment_gate_config"
        ],
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "When set to false, the contract will not be evaluated against the threshold_amount. Toggling to true will result an immediate evaluation, regardless of prior state."
          },
          "threshold_amount": {
            "description": "Specify the threshold amount for the contract. Each time the contract's balance lowers to this amount, a threshold charge will be initiated.",
            "type": "number"
          },
          "recharge_to_amount": {
            "description": "Specify the amount the balance should be recharged to.",
            "type": "number"
          },
          "custom_credit_type_id": {
            "description": "If provided, the threshold, recharge-to amount, and the resulting threshold commit amount will be in terms of this credit type instead of the fiat currency.",
            "type": "string",
            "format": "uuid"
          },
          "commit": {
            "$ref": "#/components/schemas/PrepaidBalanceThresholdCommitV2"
          },
          "payment_gate_config": {
            "$ref": "#/components/schemas/PaymentGateConfigV2"
          }
        }
      },
      "ContractParentHierarchyConfigurationInput": {
        "type": "object",
        "required": ["contract_id", "customer_id"],
        "properties": {
          "contract_id": {
            "type": "string",
            "format": "uuid"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ParentHierarchyConfiguration": {
        "type": "object",
        "required": ["children"],
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HierarchyLink"
            },
            "description": "List of contracts that belong to this parent."
          }
        }
      },
      "ChildHierarchyConfiguration": {
        "type": "object",
        "required": ["parent"],
        "properties": {
          "parent": {
            "$ref": "#/components/schemas/HierarchyLink",
            "description": "The single parent contract/customer for this child."
          }
        }
      },
      "HierarchyLink": {
        "type": "object",
        "required": ["contract_id", "customer_id"],
        "properties": {
          "contract_id": {
            "type": "string",
            "format": "uuid"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "SpendThresholdConfiguration": {
        "type": "object",
        "required": [
          "is_enabled",
          "threshold_amount",
          "commit",
          "payment_gate_config"
        ],
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "When set to false, the contract will not be evaluated against the threshold_amount. Toggling to true will result an immediate evaluation, regardless of prior state."
          },
          "threshold_amount": {
            "description": "Specify the threshold amount for the contract. Each time the contract's usage hits this amount, a threshold charge will be initiated.",
            "type": "number"
          },
          "commit": {
            "$ref": "#/components/schemas/SpendThresholdCommit"
          },
          "payment_gate_config": {
            "$ref": "#/components/schemas/PaymentGateConfig"
          }
        }
      },
      "SpendThresholdConfigurationV2": {
        "type": "object",
        "required": [
          "is_enabled",
          "threshold_amount",
          "commit",
          "payment_gate_config"
        ],
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "When set to false, the contract will not be evaluated against the threshold_amount. Toggling to true will result an immediate evaluation, regardless of prior state."
          },
          "threshold_amount": {
            "description": "Specify the threshold amount for the contract. Each time the contract's usage hits this amount, a threshold charge will be initiated.",
            "type": "number"
          },
          "commit": {
            "$ref": "#/components/schemas/SpendThresholdCommitV2"
          },
          "payment_gate_config": {
            "$ref": "#/components/schemas/PaymentGateConfigV2"
          }
        }
      },
      "PaymentGateConfig": {
        "type": "object",
        "required": ["payment_gate_type"],
        "properties": {
          "payment_gate_type": {
            "type": "string",
            "enum": ["NONE", "STRIPE", "EXTERNAL"],
            "description": "Gate access to the commit balance based on successful collection of payment. Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to facilitate payment using your own payment integration. Select NONE if you do not wish to payment gate the commit balance."
          },
          "tax_type": {
            "type": "string",
            "enum": ["NONE", "STRIPE", "ANROK", "PRECALCULATED"],
            "description": "Stripe tax is only supported for Stripe payment gateway. Select NONE if you do not wish Metronome to calculate tax on your behalf. Leaving this field blank will default to NONE."
          },
          "stripe_config": {
            "description": "Only applicable if using STRIPE as your payment gate type.",
            "type": "object",
            "required": ["payment_type"],
            "properties": {
              "payment_type": {
                "type": "string",
                "enum": ["INVOICE", "PAYMENT_INTENT"],
                "description": "If left blank, will default to INVOICE"
              },
              "invoice_metadata": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as your payment type."
              }
            }
          },
          "precalculated_tax_config": {
            "description": "Only applicable if using PRECALCULATED as your tax type.",
            "type": "object",
            "required": ["tax_amount"],
            "properties": {
              "tax_amount": {
                "type": "number",
                "description": "Amount of tax to be applied. This should be in the same currency and denomination  as the commit's invoice schedule"
              },
              "tax_name": {
                "type": "string",
                "description": "Name of the tax to be applied. This may be used in an invoice line item description."
              }
            }
          }
        }
      },
      "PaymentGateConfigV2": {
        "type": "object",
        "required": ["payment_gate_type"],
        "properties": {
          "payment_gate_type": {
            "type": "string",
            "enum": ["NONE", "STRIPE", "EXTERNAL"],
            "description": "Gate access to the commit balance based on successful collection of payment. Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to facilitate payment using your own payment integration. Select NONE if you do not wish to payment gate the commit balance."
          },
          "tax_type": {
            "type": "string",
            "enum": ["NONE", "STRIPE", "ANROK", "PRECALCULATED"],
            "description": "Stripe tax is only supported for Stripe payment gateway. Select NONE if you do not wish  Metronome to calculate tax on your behalf. Leaving this field blank will default to NONE."
          },
          "stripe_config": {
            "description": "Only applicable if using STRIPE as your payment gateway type.",
            "type": "object",
            "required": ["payment_type"],
            "properties": {
              "payment_type": {
                "type": "string",
                "enum": ["INVOICE", "PAYMENT_INTENT"],
                "description": "If left blank, will default to INVOICE"
              },
              "invoice_metadata": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as your payment type."
              }
            }
          },
          "precalculated_tax_config": {
            "description": "Only applicable if using PRECALCULATED as your tax type.",
            "type": "object",
            "required": ["tax_amount"],
            "properties": {
              "tax_amount": {
                "type": "number",
                "description": "Amount of tax to be applied. This should be in the same currency and denomination  as the commit's invoice schedule"
              },
              "tax_name": {
                "type": "string",
                "description": "Name of the tax to be applied. This may be used in an invoice line item description."
              }
            }
          }
        }
      },
      "BaseThresholdCommit": {
        "type": "object",
        "required": ["product_id"],
        "properties": {
          "product_id": {
            "type": "string",
            "description": "The commit product that will be used to generate the line item for commit payment."
          },
          "name": {
            "type": "string",
            "description": "Specify the name of the line item for the threshold charge. If left blank, it will default to the commit product name."
          },
          "description": {
            "type": "string"
          }
        }
      },
      "BaseThresholdCommitV2": {
        "$ref": "#/components/schemas/UpdateBaseThresholdCommit",
        "required": ["product_id"]
      },
      "PrepaidBalanceThresholdCommit": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseThresholdCommit"
          },
          {
            "type": "object",
            "properties": {
              "applicable_product_ids": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": "Which products the threshold commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
              },
              "applicable_product_tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Which tags the threshold commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
              }
            }
          }
        ]
      },
      "PrepaidBalanceThresholdCommitV2": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseThresholdCommitV2"
          },
          {
            "$ref": "#/components/schemas/OptionalThresholdCommitFields"
          }
        ]
      },
      "SpendThresholdCommit": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseThresholdCommit"
          }
        ]
      },
      "SpendThresholdCommitV2": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseThresholdCommitV2"
          }
        ]
      },
      "ScheduledChargesOnUsageInvoices": {
        "type": "string",
        "description": "Determines which scheduled and commit charges to consolidate onto the Contract's usage invoice. The charge's `timestamp` must match the usage invoice's `ending_before` date for consolidation to occur. This field cannot be modified after a Contract has been created. If this field is omitted, charges will appear on a separate invoice from usage charges.",
        "enum": ["ALL"]
      },
      "UsageStatementScheduleInput": {
        "type": "object",
        "required": ["frequency"],
        "properties": {
          "frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "monthly",
              "QUARTERLY",
              "quarterly",
              "ANNUAL",
              "annual",
              "WEEKLY",
              "weekly"
            ]
          },
          "day": {
            "type": "string",
            "description": "If not provided, defaults to the first day of the month.",
            "enum": [
              "FIRST_OF_MONTH",
              "first_of_month",
              "CONTRACT_START",
              "contract_start",
              "CUSTOM_DATE",
              "custom_date"
            ]
          },
          "billing_anchor_date": {
            "type": "string",
            "format": "date-time",
            "description": "Required when using CUSTOM_DATE. This option lets you set a historical billing anchor date, aligning future billing cycles with a chosen cadence. For example, if a contract starts on 2024-09-15 and you set the anchor date to 2024-09-10 with a MONTHLY frequency, the first usage statement will cover 09-15 to 10-10. Subsequent statements will follow the 10th of each month."
          },
          "invoice_generation_starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date Metronome should start generating usage invoices. If unspecified, contract start date will be used. This is useful to set if you want to import historical invoices via our 'Create Historical Invoices' API rather than having Metronome automatically generate them."
          }
        }
      },
      "UsageStatementSchedule": {
        "type": "object",
        "required": ["frequency", "billing_anchor_date"],
        "properties": {
          "frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "monthly",
              "QUARTERLY",
              "quarterly",
              "ANNUAL",
              "annual",
              "WEEKLY",
              "weekly"
            ]
          },
          "billing_anchor_date": {
            "type": "string",
            "format": "date-time",
            "description": "Contract usage statements follow a selected cadence based on this date."
          }
        }
      },
      "BaseUsageFilter": {
        "type": "object",
        "required": ["group_key", "group_values"],
        "properties": {
          "group_key": {
            "type": "string"
          },
          "group_values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BaseUsageFilterWithRequiredStartingAt": {
        "type": "object",
        "required": ["group_key", "group_values", "starting_at"],
        "properties": {
          "group_key": {
            "type": "string"
          },
          "group_values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UsageFilter": {
        "type": "object",
        "required": ["initial", "current", "updates"],
        "properties": {
          "initial": {
            "$ref": "#/components/schemas/BaseUsageFilter"
          },
          "current": {
            "nullable": true,
            "$ref": "#/components/schemas/BaseUsageFilter"
          },
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseUsageFilterWithRequiredStartingAt"
            }
          }
        }
      },
      "UsageFilterV2": {
        "type": "object",
        "required": ["group_key", "group_values", "starting_at"],
        "properties": {
          "group_key": {
            "type": "string"
          },
          "group_values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "starting_at": {
            "description": "This will match contract starting_at value if usage filter is active from the beginning of the contract.",
            "type": "string",
            "format": "date-time"
          },
          "ending_before": {
            "description": "This will match contract ending_before value if usage filter is active until the end of the contract. It will be undefined if the contract is open-ended.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SetUsageFilterPayload": {
        "type": "object",
        "required": [
          "customer_id",
          "contract_id",
          "group_key",
          "group_values",
          "starting_at"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "contract_id": {
            "type": "string",
            "format": "uuid"
          },
          "group_key": {
            "type": "string"
          },
          "group_values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ContractTransition": {
        "type": "object",
        "required": ["type", "from_contract_id", "to_contract_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["SUPERSEDE", "RENEWAL"]
          },
          "from_contract_id": {
            "type": "string",
            "format": "uuid"
          },
          "to_contract_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ContractAmendment": {
        "type": "object",
        "required": [
          "id",
          "starting_at",
          "commits",
          "overrides",
          "scheduled_charges",
          "created_at",
          "created_by"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          },
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Commit"
            }
          },
          "credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Credit"
            }
          },
          "overrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Override"
            }
          },
          "scheduled_charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledCharge"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          }
        }
      },
      "ArchiveContractPayload": {
        "type": "object",
        "required": ["customer_id", "contract_id", "void_invoices"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer whose contract is to be archived"
          },
          "contract_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the contract to archive"
          },
          "void_invoices": {
            "type": "boolean",
            "description": "If false, the existing finalized invoices will remain after the contract is archived."
          }
        }
      },
      "AmendContractPayload": {
        "type": "object",
        "required": ["customer_id", "contract_id", "starting_at"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer whose contract is to be amended"
          },
          "contract_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the contract to amend"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "inclusive start time for the amendment"
          },
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitInput"
            }
          },
          "credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditInput"
            }
          },
          "overrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideInput"
            }
          },
          "scheduled_charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledChargeInput"
            }
          },
          "custom_fields": {
            "x-cf-entity": "contract",
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "CommitInput": {
        "type": "object",
        "required": ["type", "product_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["PREPAID", "prepaid", "POSTPAID", "postpaid"]
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "commit_rate", "LIST_RATE", "list_rate"]
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "displayed on invoices"
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "access_schedule": {
            "$ref": "#/components/schemas/ScheduleDurationInput",
            "description": "Required: Schedule for distributing the commit to the customer. For \"POSTPAID\" commits only one schedule item is allowed and amount must match invoice_schedule total."
          },
          "invoice_schedule": {
            "$ref": "#/components/schemas/SchedulePointInTimeInput",
            "description": "Required for \"POSTPAID\" commits: the true up invoice will be generated at this time and only one schedule item is allowed; the total must match access_schedule amount. Optional for \"PREPAID\" commits: if not provided, this will be a \"complimentary\" commit with no invoice."
          },
          "amount": {
            "type": "number",
            "description": "(DEPRECATED) Use access_schedule and invoice_schedule instead."
          },
          "description": {
            "type": "string",
            "description": "Used only in UI/API. It is not exposed to end customers."
          },
          "rollover_fraction": {
            "type": "number",
            "description": "Fraction of unused segments that will be rolled over. Must be between 0 and 1."
          },
          "priority": {
            "type": "number",
            "description": "If multiple commits are applicable, the one with the lower priority will apply first."
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which tags the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          },
          "custom_fields": {
            "x-cf-entity": "commit",
            "$ref": "#/components/schemas/CustomField"
          },
          "temporary_id": {
            "type": "string",
            "description": "A temporary ID for the commit that can be used to reference the commit for commit specific overrides."
          },
          "payment_gate_config": {
            "$ref": "#/components/schemas/PaymentGateConfig",
            "description": "optionally payment gate this commit"
          }
        }
      },
      "CommitInputV2": {
        "type": "object",
        "required": ["type", "product_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["PREPAID", "prepaid", "POSTPAID", "postpaid"]
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "commit_rate", "LIST_RATE", "list_rate"]
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "displayed on invoices"
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "access_schedule": {
            "$ref": "#/components/schemas/ScheduleDurationInputV2",
            "description": "Required: Schedule for distributing the commit to the customer. For \"POSTPAID\" commits only one schedule item is allowed and amount must match invoice_schedule total."
          },
          "invoice_schedule": {
            "$ref": "#/components/schemas/SchedulePointInTimeInputV2",
            "description": "Required for \"POSTPAID\" commits: the true up invoice will be generated at this time and only one schedule item is allowed; the total must match access_schedule amount. Optional for \"PREPAID\" commits: if not provided, this will be a \"complimentary\" commit with no invoice."
          },
          "amount": {
            "type": "number",
            "description": "(DEPRECATED) Use access_schedule and invoice_schedule instead."
          },
          "description": {
            "type": "string",
            "description": "Used only in UI/API. It is not exposed to end customers."
          },
          "rollover_fraction": {
            "type": "number",
            "description": "Fraction of unused segments that will be rolled over. Must be between 0 and 1."
          },
          "priority": {
            "type": "number",
            "description": "If multiple commits are applicable, the one with the lower priority will apply first."
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which tags the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`. Instead, to target usage by product or product tag, pass those values in the body of `specifiers`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          },
          "custom_fields": {
            "x-cf-entity": "commit",
            "$ref": "#/components/schemas/CustomField"
          },
          "temporary_id": {
            "type": "string",
            "description": "A temporary ID for the commit that can be used to reference the commit for commit specific overrides."
          },
          "payment_gate_config": {
            "$ref": "#/components/schemas/PaymentGateConfigV2",
            "description": "optionally payment gate this commit"
          }
        }
      },
      "CommitHierarchyChildAccessAll": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["ALL"]
          }
        }
      },
      "CommitHierarchyChildAccessNone": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["NONE"]
          }
        }
      },
      "CommitHierarchyChildAccessContractIds": {
        "type": "object",
        "required": ["type", "contract_ids"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CONTRACT_IDS"]
          },
          "contract_ids": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "CreditInput": {
        "type": "object",
        "required": ["product_id", "access_schedule"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "displayed on invoices"
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "access_schedule": {
            "$ref": "#/components/schemas/ScheduleDurationInput",
            "description": "Schedule for distributing the credit to the customer."
          },
          "description": {
            "type": "string",
            "description": "Used only in UI/API. It is not exposed to end customers."
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the credit applies to. If both applicable_product_ids and applicable_product_tags are not provided, the credit applies to all products."
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which tags the credit applies to. If both applicable_product_ids and applicable_product_tags are not provided, the credit applies to all products."
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          },
          "priority": {
            "type": "number",
            "description": "If multiple credits are applicable, the one with the lower priority will apply first."
          },
          "custom_fields": {
            "x-cf-entity": "contract_credit",
            "$ref": "#/components/schemas/CustomField"
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "commit_rate", "LIST_RATE", "list_rate"]
          }
        }
      },
      "CreditInputV2": {
        "type": "object",
        "required": ["product_id", "access_schedule"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "displayed on invoices"
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "access_schedule": {
            "$ref": "#/components/schemas/ScheduleDurationInputV2",
            "description": "Schedule for distributing the credit to the customer."
          },
          "description": {
            "type": "string",
            "description": "Used only in UI/API. It is not exposed to end customers."
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the credit applies to. If both applicable_product_ids and applicable_product_tags are not provided, the credit applies to all products."
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which tags the credit applies to. If both applicable_product_ids and applicable_product_tags are not provided, the credit applies to all products."
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`. Instead, to target usage by product or product tag, pass those values in the body of `specifiers`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          },
          "priority": {
            "type": "number",
            "description": "If multiple credits are applicable, the one with the lower priority will apply first."
          },
          "custom_fields": {
            "x-cf-entity": "contract_credit",
            "$ref": "#/components/schemas/CustomField"
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "commit_rate", "LIST_RATE", "list_rate"]
          }
        }
      },
      "RecurringCommitInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RecurringCreditInput"
          },
          {
            "type": "object",
            "properties": {
              "invoice_amount": {
                "type": "object",
                "required": ["unit_price", "quantity", "credit_type_id"],
                "properties": {
                  "unit_price": {
                    "type": "number"
                  },
                  "quantity": {
                    "type": "number"
                  },
                  "credit_type_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "description": "The amount the customer should be billed for the commit. Not required."
              }
            }
          }
        ]
      },
      "RecurringCommitInputV2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RecurringCreditInputV2"
          },
          {
            "type": "object",
            "properties": {
              "invoice_amount": {
                "type": "object",
                "required": ["unit_price", "quantity", "credit_type_id"],
                "properties": {
                  "unit_price": {
                    "type": "number"
                  },
                  "quantity": {
                    "type": "number"
                  },
                  "credit_type_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "description": "The amount the customer should be billed for the commit. Not required."
              }
            }
          }
        ]
      },
      "RecurringCreditInput": {
        "type": "object",
        "required": [
          "product_id",
          "access_amount",
          "priority",
          "commit_duration",
          "starting_at"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "displayed on invoices. will be passed through to the individual commits"
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "access_amount": {
            "type": "object",
            "required": ["unit_price", "credit_type_id"],
            "properties": {
              "unit_price": {
                "type": "number"
              },
              "quantity": {
                "type": "number",
                "description": "This field is required unless a subscription is attached via `subscription_config`."
              },
              "credit_type_id": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "The amount of commit to grant."
          },
          "description": {
            "type": "string",
            "description": "Will be passed down to the individual commits"
          },
          "rollover_fraction": {
            "type": "number",
            "description": "Will be passed down to the individual commits. This controls how much of an individual unexpired commit will roll over upon contract transition. Must be between 0 and 1."
          },
          "priority": {
            "type": "number",
            "description": "Will be passed down to the individual commits"
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Will be passed down to the individual commits"
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Will be passed down to the individual commits"
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          },
          "temporary_id": {
            "type": "string",
            "description": "A temporary ID that can be used to reference the recurring commit for commit specific overrides."
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "commit_rate", "LIST_RATE", "list_rate"],
            "description": "Whether the created commits will use the commit rate or list rate"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "determines the start time for the first commit"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "Determines when the contract will stop creating recurring commits. optional"
          },
          "commit_duration": {
            "type": "object",
            "required": ["value"],
            "properties": {
              "value": {
                "type": "number"
              },
              "unit": {
                "type": "string",
                "enum": ["periods", "PERIODS"]
              }
            },
            "description": "Defines the length of the access schedule for each created commit/credit. The value represents the number of units. Unit defaults to \"PERIODS\", where the length of a period is determined by the recurrence_frequency."
          },
          "recurrence_frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "monthly",
              "QUARTERLY",
              "quarterly",
              "ANNUAL",
              "annual",
              "WEEKLY",
              "weekly"
            ],
            "description": "The frequency at which the recurring commits will be created.  If not provided: - The commits will be created on the usage invoice frequency. If provided: - The period defined in the duration will correspond to this frequency. - Commits will be created aligned with the recurring commit's starting_at rather than the usage invoice dates."
          },
          "proration": {
            "type": "string",
            "enum": [
              "NONE",
              "none",
              "FIRST",
              "first",
              "LAST",
              "last",
              "FIRST_AND_LAST",
              "first_and_last"
            ],
            "description": "Determines whether the first and last commit will be prorated.  If not provided, the default is FIRST_AND_LAST (i.e. prorate both the first and last commits)."
          },
          "subscription_config": {
            "description": "Attach a subscription to the recurring commit/credit.",
            "$ref": "#/components/schemas/RecurringCommitSubscriptionConfigInput"
          }
        }
      },
      "RecurringCreditInputV2": {
        "type": "object",
        "required": [
          "product_id",
          "access_amount",
          "priority",
          "commit_duration",
          "starting_at"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "displayed on invoices. will be passed through to the individual commits"
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "access_amount": {
            "type": "object",
            "required": ["unit_price", "credit_type_id"],
            "properties": {
              "unit_price": {
                "type": "number"
              },
              "quantity": {
                "type": "number",
                "description": "This field is required unless a subscription is attached via `subscription_config`."
              },
              "credit_type_id": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "The amount of commit to grant."
          },
          "description": {
            "type": "string",
            "description": "Will be passed down to the individual commits"
          },
          "rollover_fraction": {
            "type": "number",
            "description": "Will be passed down to the individual commits. This controls how much of an individual unexpired commit will roll over upon contract transition. Must be between 0 and 1."
          },
          "priority": {
            "type": "number",
            "description": "Will be passed down to the individual commits"
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Will be passed down to the individual commits"
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Will be passed down to the individual commits"
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`. Instead, to target usage by product or product tag, pass those values in the body of `specifiers`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          },
          "temporary_id": {
            "type": "string",
            "description": "A temporary ID that can be used to reference the recurring commit for commit specific overrides."
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "commit_rate", "LIST_RATE", "list_rate"],
            "description": "Whether the created commits will use the commit rate or list rate"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "determines the start time for the first commit"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "Determines when the contract will stop creating recurring commits. optional"
          },
          "commit_duration": {
            "type": "object",
            "required": ["value"],
            "properties": {
              "value": {
                "type": "number"
              },
              "unit": {
                "type": "string",
                "enum": ["periods", "PERIODS"]
              }
            },
            "description": "Defines the length of the access schedule for each created commit/credit. The value represents the number of units. Unit defaults to \"PERIODS\", where the length of a period is determined by the recurrence_frequency."
          },
          "recurrence_frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "monthly",
              "QUARTERLY",
              "quarterly",
              "ANNUAL",
              "annual",
              "WEEKLY",
              "weekly"
            ],
            "description": "The frequency at which the recurring commits will be created. If not provided: - The commits will be created on the usage invoice frequency. If provided: - The period defined in the duration will correspond to this frequency. - Commits will be created aligned with the recurring commit's starting_at rather than the usage invoice dates."
          },
          "proration": {
            "type": "string",
            "enum": [
              "NONE",
              "none",
              "FIRST",
              "first",
              "LAST",
              "last",
              "FIRST_AND_LAST",
              "first_and_last"
            ],
            "description": "Determines whether the first and last commit will be prorated. If not provided, the default is FIRST_AND_LAST (i.e. prorate both the first and last commits)."
          },
          "subscription_config": {
            "description": "Attach a subscription to the recurring commit/credit.",
            "$ref": "#/components/schemas/RecurringCommitSubscriptionConfigInput"
          }
        }
      },
      "CreateCustomerCommitPayload": {
        "type": "object",
        "required": [
          "customer_id",
          "type",
          "priority",
          "product_id",
          "access_schedule"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["PREPAID", "prepaid", "POSTPAID", "postpaid"]
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "commit_rate", "LIST_RATE", "list_rate"]
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "displayed on invoices"
          },
          "description": {
            "type": "string",
            "description": "Used only in UI/API. It is not exposed to end customers."
          },
          "priority": {
            "type": "number",
            "description": "If multiple credits or commits are applicable, the one with the lower priority will apply first."
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the fixed product associated with the commit. This is required because products are used to invoice the commit amount."
          },
          "access_schedule": {
            "$ref": "#/components/schemas/ScheduleDurationInput",
            "description": "Schedule for distributing the commit to the customer. For \"POSTPAID\" commits only one schedule item is allowed and amount must match invoice_schedule total."
          },
          "invoice_schedule": {
            "$ref": "#/components/schemas/SchedulePointInTimeInput",
            "description": "Required for \"POSTPAID\" commits: the true up invoice will be generated at this time and only one schedule item is allowed; the total must match accesss_schedule amount. Optional for \"PREPAID\" commits: if not provided, this will be a \"complimentary\" commit with no invoice."
          },
          "invoice_contract_id": {
            "type": "string",
            "format": "uuid",
            "description": "The contract that this commit will be billed on. This is required for \"POSTPAID\" commits and for \"PREPAID\" commits unless there is no invoice schedule above (i.e., the commit is 'free')."
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which tags the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "applicable_contract_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which contract the commit applies to. If not provided, the commit applies to all contracts."
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          },
          "custom_fields": {
            "x-cf-entity": "commit",
            "$ref": "#/components/schemas/CustomField"
          },
          "uniqueness_key": {
            "$ref": "#/components/schemas/UniquenessKeyForCommitsAndCredits"
          }
        }
      },
      "CreateCustomerCreditPayload": {
        "type": "object",
        "required": [
          "customer_id",
          "priority",
          "product_id",
          "access_schedule"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "displayed on invoices"
          },
          "description": {
            "type": "string",
            "description": "Used only in UI/API. It is not exposed to end customers."
          },
          "priority": {
            "type": "number",
            "description": "If multiple credits or commits are applicable, the one with the lower priority will apply first."
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "access_schedule": {
            "$ref": "#/components/schemas/ScheduleDurationInput",
            "description": "Schedule for distributing the credit to the customer."
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the credit applies to. If both applicable_product_ids and applicable_product_tags are not provided, the credit applies to all products."
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which tags the credit applies to. If both applicable_product_ids and applicable_product_tags are not provided, the credit applies to all products."
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          },
          "applicable_contract_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which contract the credit applies to. If not provided, the credit applies to all contracts."
          },
          "custom_fields": {
            "x-cf-entity": "contract_credit",
            "$ref": "#/components/schemas/CustomField"
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "commit_rate", "LIST_RATE", "list_rate"]
          },
          "uniqueness_key": {
            "$ref": "#/components/schemas/UniquenessKeyForCommitsAndCredits"
          }
        }
      },
      "RecurringCommit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RecurringCredit"
          },
          {
            "type": "object",
            "properties": {
              "invoice_amount": {
                "type": "object",
                "required": ["unit_price", "quantity", "credit_type_id"],
                "properties": {
                  "unit_price": {
                    "type": "number"
                  },
                  "quantity": {
                    "type": "number"
                  },
                  "credit_type_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "description": "The amount the customer should be billed for the commit. Not required."
              }
            }
          }
        ]
      },
      "RecurringCommitV2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RecurringCreditV2"
          },
          {
            "type": "object",
            "properties": {
              "invoice_amount": {
                "type": "object",
                "required": ["unit_price", "quantity", "credit_type_id"],
                "properties": {
                  "unit_price": {
                    "type": "number"
                  },
                  "quantity": {
                    "type": "number"
                  },
                  "credit_type_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "description": "The amount the customer should be billed for the commit. Not required."
              }
            }
          }
        ]
      },
      "RecurringCredit": {
        "type": "object",
        "required": [
          "id",
          "product",
          "access_amount",
          "priority",
          "commit_duration",
          "starting_at",
          "rate_type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "contract": {
            "type": "object",
            "required": ["id"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Displayed on invoices. Will be passed through to the individual commits"
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "access_amount": {
            "type": "object",
            "required": ["unit_price", "credit_type_id"],
            "properties": {
              "unit_price": {
                "type": "number"
              },
              "quantity": {
                "type": "number"
              },
              "credit_type_id": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "The amount of commit to grant."
          },
          "description": {
            "type": "string",
            "description": "Will be passed down to the individual commits"
          },
          "rollover_fraction": {
            "type": "number",
            "description": "Will be passed down to the individual commits. This controls how much of an individual unexpired commit will roll over upon contract transition. Must be between 0 and 1."
          },
          "priority": {
            "type": "number",
            "description": "Will be passed down to the individual commits"
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Will be passed down to the individual commits"
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Will be passed down to the individual commits"
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifier"
            }
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "commit_rate", "LIST_RATE", "list_rate"],
            "description": "Whether the created commits will use the commit rate or list rate"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "Determines the start time for the first commit"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "Determines when the contract will stop creating recurring commits. Optional"
          },
          "commit_duration": {
            "type": "object",
            "required": ["value"],
            "properties": {
              "value": {
                "type": "number"
              },
              "unit": {
                "type": "string",
                "enum": ["periods", "PERIODS"]
              }
            },
            "description": "The amount of time the created commits will be valid for"
          },
          "recurrence_frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "monthly",
              "QUARTERLY",
              "quarterly",
              "ANNUAL",
              "annual",
              "WEEKLY",
              "weekly"
            ],
            "description": "The frequency at which the recurring commits will be created.  If not provided: - The commits will be created on the usage invoice frequency. If provided: - The period defined in the duration will correspond to this frequency. - Commits will be created aligned with the recurring commit's starting_at rather than the usage invoice dates."
          },
          "proration": {
            "type": "string",
            "enum": [
              "NONE",
              "none",
              "FIRST",
              "first",
              "LAST",
              "last",
              "FIRST_AND_LAST",
              "first_and_last"
            ],
            "description": "Determines whether the first and last commit will be prorated.  If not provided, the default is FIRST_AND_LAST (i.e. prorate both the first and last commits)."
          },
          "subscription_config": {
            "description": "Attach a subscription to the recurring commit/credit.",
            "$ref": "#/components/schemas/RecurringCommitSubscriptionConfig"
          }
        }
      },
      "RecurringCreditV2": {
        "type": "object",
        "required": [
          "id",
          "product",
          "access_amount",
          "priority",
          "commit_duration",
          "starting_at",
          "rate_type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "contract": {
            "type": "object",
            "required": ["id"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Displayed on invoices. Will be passed through to the individual commits"
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "access_amount": {
            "type": "object",
            "required": ["unit_price", "credit_type_id"],
            "properties": {
              "unit_price": {
                "type": "number"
              },
              "quantity": {
                "type": "number"
              },
              "credit_type_id": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "The amount of commit to grant."
          },
          "description": {
            "type": "string",
            "description": "Will be passed down to the individual commits"
          },
          "rollover_fraction": {
            "type": "number",
            "description": "Will be passed down to the individual commits. This controls how much of an individual unexpired commit will roll over upon contract transition. Must be between 0 and 1."
          },
          "priority": {
            "type": "number",
            "description": "Will be passed down to the individual commits"
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Will be passed down to the individual commits"
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Will be passed down to the individual commits"
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifier"
            }
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "commit_rate", "LIST_RATE", "list_rate"],
            "description": "Whether the created commits will use the commit rate or list rate"
          },
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "Determines the start time for the first commit"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "Determines when the contract will stop creating recurring commits. Optional"
          },
          "commit_duration": {
            "type": "object",
            "required": ["value"],
            "properties": {
              "value": {
                "type": "number"
              },
              "unit": {
                "type": "string",
                "enum": ["periods", "PERIODS"]
              }
            },
            "description": "The amount of time the created commits will be valid for"
          },
          "recurrence_frequency": {
            "type": "string",
            "enum": [
              "MONTHLY",
              "monthly",
              "QUARTERLY",
              "quarterly",
              "ANNUAL",
              "annual",
              "WEEKLY",
              "weekly"
            ],
            "description": "The frequency at which the recurring commits will be created. If not provided: - The commits will be created on the usage invoice frequency. If provided: - The period defined in the duration will correspond to this frequency. - Commits will be created aligned with the recurring commit's starting_at rather than the usage invoice dates."
          },
          "proration": {
            "type": "string",
            "enum": [
              "NONE",
              "none",
              "FIRST",
              "first",
              "LAST",
              "last",
              "FIRST_AND_LAST",
              "first_and_last"
            ],
            "description": "Determines whether the first and last commit will be prorated. If not provided, the default is FIRST_AND_LAST (i.e. prorate both the first and last commits)."
          },
          "subscription_config": {
            "description": "Attach a subscription to the recurring commit/credit.",
            "$ref": "#/components/schemas/RecurringCommitSubscriptionConfig"
          }
        }
      },
      "Commit": {
        "type": "object",
        "required": ["id", "type", "product"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "contract": {
            "type": "object",
            "required": ["id"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "type": {
            "type": "string",
            "enum": ["PREPAID", "POSTPAID"]
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "LIST_RATE"]
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "number",
            "description": "If multiple credits or commits are applicable, the one with the lower priority will apply first."
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "access_schedule": {
            "$ref": "#/components/schemas/ScheduleDuration",
            "description": "The schedule that the customer will gain access to the credits purposed with this commit."
          },
          "invoice_schedule": {
            "$ref": "#/components/schemas/SchedulePointInTime",
            "description": "The schedule that the customer will be invoiced for this commit."
          },
          "invoice_contract": {
            "type": "object",
            "required": ["id"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "The contract that this commit will be billed on."
          },
          "rolled_over_from": {
            "type": "object",
            "required": ["contract_id", "commit_id"],
            "properties": {
              "commit_id": {
                "type": "string",
                "format": "uuid"
              },
              "contract_id": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": {
            "type": "string"
          },
          "rollover_fraction": {
            "type": "number"
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifier"
            }
          },
          "applicable_contract_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "amount": {
            "type": "number",
            "description": "(DEPRECATED) Use access_schedule + invoice_schedule instead."
          },
          "ledger": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitLedger"
            },
            "description": "A list of ordered events that impact the balance of a commit. For example, an invoice deduction or a rollover."
          },
          "balance": {
            "$ref": "#/components/schemas/BalanceForCommitsAndCredits"
          },
          "custom_fields": {
            "x-cf-entity": "commit",
            "$ref": "#/components/schemas/CustomField"
          },
          "uniqueness_key": {
            "$ref": "#/components/schemas/UniquenessKeyForCommitsAndCredits"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the commit was archived. If not provided, the commit is not archived."
          }
        }
      },
      "CommitV2": {
        "type": "object",
        "required": ["id", "type", "product"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "contract": {
            "type": "object",
            "required": ["id"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "type": {
            "type": "string",
            "enum": ["PREPAID", "POSTPAID"]
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "LIST_RATE"]
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "number",
            "description": "If multiple credits or commits are applicable, the one with the lower priority will apply first."
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "access_schedule": {
            "$ref": "#/components/schemas/ScheduleDuration",
            "description": "The schedule that the customer will gain access to the credits purposed with this commit."
          },
          "invoice_schedule": {
            "$ref": "#/components/schemas/SchedulePointInTime",
            "description": "The schedule that the customer will be invoiced for this commit."
          },
          "invoice_contract": {
            "type": "object",
            "required": ["id"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "The contract that this commit will be billed on."
          },
          "rolled_over_from": {
            "type": "object",
            "required": ["contract_id", "commit_id"],
            "properties": {
              "commit_id": {
                "type": "string",
                "format": "uuid"
              },
              "contract_id": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": {
            "type": "string"
          },
          "rollover_fraction": {
            "type": "number"
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "applicable_contract_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifier"
            }
          },
          "ledger": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitLedgerV2"
            },
            "description": "A list of ordered events that impact the balance of a commit. For example, an invoice deduction or a rollover."
          },
          "balance": {
            "$ref": "#/components/schemas/BalanceForCommitsAndCredits"
          },
          "custom_fields": {
            "x-cf-entity": "commit",
            "$ref": "#/components/schemas/CustomField"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Credit": {
        "type": "object",
        "required": ["id", "type", "product"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "contract": {
            "type": "object",
            "required": ["id"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "type": {
            "type": "string",
            "enum": ["CREDIT"]
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "number",
            "description": "If multiple credits or commits are applicable, the one with the lower priority will apply first."
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "access_schedule": {
            "$ref": "#/components/schemas/ScheduleDuration",
            "description": "The schedule that the customer will gain access to the credits."
          },
          "description": {
            "type": "string"
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifier"
            }
          },
          "applicable_contract_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "ledger": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditLedger"
            },
            "description": "A list of ordered events that impact the balance of a credit. For example, an invoice deduction or an expiration."
          },
          "balance": {
            "$ref": "#/components/schemas/BalanceForCommitsAndCredits"
          },
          "custom_fields": {
            "x-cf-entity": "contract_credit",
            "$ref": "#/components/schemas/CustomField"
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "LIST_RATE"]
          },
          "uniqueness_key": {
            "$ref": "#/components/schemas/UniquenessKeyForCommitsAndCredits"
          }
        }
      },
      "CreditV2": {
        "type": "object",
        "required": ["id", "type", "product"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "contract": {
            "type": "object",
            "required": ["id"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "type": {
            "type": "string",
            "enum": ["CREDIT"]
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "number",
            "description": "If multiple credits or commits are applicable, the one with the lower priority will apply first."
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "access_schedule": {
            "$ref": "#/components/schemas/ScheduleDuration",
            "description": "The schedule that the customer will gain access to the credits."
          },
          "description": {
            "type": "string"
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifier"
            }
          },
          "applicable_contract_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "ledger": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditLedgerV2"
            },
            "description": "A list of ordered events that impact the balance of a credit. For example, an invoice deduction or an expiration."
          },
          "balance": {
            "$ref": "#/components/schemas/BalanceForCommitsAndCredits"
          },
          "custom_fields": {
            "x-cf-entity": "contract_credit",
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "CommitLedger": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PrepaidCommitSegmentStartLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PrepaidCommitAutomatedInvoiceDeductionLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PrepaidCommitRolloverLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PrepaidCommitExpirationLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PrepaidCommitSeatBasedAdjustmentLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PostpaidCommitInitialBalanceLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PostpaidCommitAutomatedInvoiceDeductionLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PostpaidCommitRolloverLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PostpaidCommitTrueupLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PrepaidCommitManualLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PostpaidCommitManualLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PostpaidCommitExpirationLedgerEntry"
          }
        ]
      },
      "CommitLedgerV2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PrepaidCommitSegmentStartLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PrepaidCommitAutomatedInvoiceDeductionLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PrepaidCommitRolloverLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PrepaidCommitExpirationLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PrepaidCommitCanceledLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PrepaidCommitCreditedLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PrepaidCommitSeatBasedAdjustmentLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PostpaidCommitInitialBalanceLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PostpaidCommitAutomatedInvoiceDeductionLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PostpaidCommitRolloverLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PostpaidCommitTrueupLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PrepaidCommitManualLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PostpaidCommitManualLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/PostpaidCommitExpirationLedgerEntry"
          }
        ]
      },
      "CreditLedger": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreditSegmentStartLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/CreditAutomatedInvoiceDeductionLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/CreditExpirationLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/CreditManualLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/CreditSeatBasedAdjustmentLedgerEntry"
          }
        ]
      },
      "CreditLedgerV2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreditSegmentStartLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/CreditAutomatedInvoiceDeductionLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/CreditExpirationLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/CreditCanceledLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/CreditCreditedLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/CreditManualLedgerEntry"
          },
          {
            "$ref": "#/components/schemas/CreditSeatBasedAdjustmentLedgerEntry"
          }
        ]
      },
      "PrepaidCommitSegmentStartLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["PREPAID_COMMIT_SEGMENT_START"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PrepaidCommitAutomatedInvoiceDeductionLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "invoice_id", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PrepaidCommitRolloverLedgerEntry": {
        "type": "object",
        "required": [
          "type",
          "timestamp",
          "amount",
          "new_contract_id",
          "segment_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["PREPAID_COMMIT_ROLLOVER"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          },
          "new_contract_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PrepaidCommitExpirationLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["PREPAID_COMMIT_EXPIRATION"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PrepaidCommitSeatBasedAdjustmentLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["PREPAID_COMMIT_SEAT_BASED_ADJUSTMENT"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PostpaidCommitAutomatedInvoiceDeductionLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "invoice_id", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PostpaidCommitInitialBalanceLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["POSTPAID_COMMIT_INITIAL_BALANCE"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          }
        }
      },
      "PostpaidCommitRolloverLedgerEntry": {
        "type": "object",
        "required": [
          "type",
          "timestamp",
          "amount",
          "new_contract_id",
          "segment_id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["POSTPAID_COMMIT_ROLLOVER"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          },
          "new_contract_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PostpaidCommitTrueupLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "invoice_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["POSTPAID_COMMIT_TRUEUP"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PrepaidCommitManualLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "reason"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["PREPAID_COMMIT_MANUAL"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "PostpaidCommitExpirationLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["POSTPAID_COMMIT_EXPIRATION"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          }
        }
      },
      "PostpaidCommitManualLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "reason"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["POSTPAID_COMMIT_MANUAL"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "CreditSegmentStartLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CREDIT_SEGMENT_START"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CreditAutomatedInvoiceDeductionLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "invoice_id", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CREDIT_AUTOMATED_INVOICE_DEDUCTION"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CreditExpirationLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CREDIT_EXPIRATION"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CreditManualLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "reason"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CREDIT_MANUAL"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "CreditSeatBasedAdjustmentLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CREDIT_SEAT_BASED_ADJUSTMENT"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PostpaidCommit": {
        "type": "object",
        "required": ["id"],
        "description": "ID of the commit.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ApplySeatIncreaseConfigForRecurringCommit": {
        "type": "object",
        "required": ["is_prorated"],
        "properties": {
          "is_prorated": {
            "type": "boolean",
            "description": "Indicates whether a mid-period seat increase should be prorated."
          }
        }
      },
      "SubscriptionConfigAllocation": {
        "type": "string",
        "enum": ["INDIVIDUAL", "POOLED"]
      },
      "SubscriptionConfigAllocationInput": {
        "type": "string",
        "enum": ["POOLED"],
        "description": "If set to POOLED, allocation added per seat is pooled across the account."
      },
      "RecurringCommitSubscriptionConfig": {
        "type": "object",
        "required": [
          "allocation",
          "apply_seat_increase_config",
          "subscription_id"
        ],
        "properties": {
          "allocation": {
            "$ref": "#/components/schemas/SubscriptionConfigAllocation"
          },
          "apply_seat_increase_config": {
            "$ref": "#/components/schemas/ApplySeatIncreaseConfigForRecurringCommit"
          },
          "subscription_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "RecurringCommitSubscriptionConfigInput": {
        "type": "object",
        "required": ["apply_seat_increase_config", "subscription_id"],
        "properties": {
          "allocation": {
            "$ref": "#/components/schemas/SubscriptionConfigAllocationInput"
          },
          "apply_seat_increase_config": {
            "$ref": "#/components/schemas/ApplySeatIncreaseConfigForRecurringCommit"
          },
          "subscription_id": {
            "type": "string",
            "description": "ID of the subscription to configure on the recurring commit/credit."
          }
        }
      },
      "AppliedCommitOrCredit": {
        "type": "object",
        "required": ["id", "type"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["PREPAID", "POSTPAID", "CREDIT"]
          }
        }
      },
      "CommitSpecifier": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "If provided, the specifier will only apply to the product with the specified ID."
          },
          "product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If provided, the specifier will only apply to products with all the specified tags."
          },
          "pricing_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "presentation_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CommitSpecifierInput": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "If provided, the specifier will only apply to the product with the specified ID."
          },
          "product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If provided, the specifier will only apply to products with all the specified tags."
          },
          "pricing_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "presentation_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "OverrideInput": {
        "type": "object",
        "required": ["starting_at"],
        "properties": {
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the override will start applying (inclusive)"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the override will stop applying (exclusive)"
          },
          "entitled": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "OVERWRITE",
              "overwrite",
              "MULTIPLIER",
              "multiplier",
              "TIERED",
              "tiered"
            ],
            "description": "Overwrites are prioritized over multipliers and tiered overrides."
          },
          "multiplier": {
            "type": "number",
            "description": "Required for MULTIPLIER type. Must be >=0."
          },
          "priority": {
            "type": "number",
            "description": "Required for EXPLICIT multiplier prioritization scheme and all TIERED overrides. Under EXPLICIT prioritization, overwrites are prioritized first, and then tiered and multiplier overrides are prioritized by their priority value (lowest first). Must be > 0."
          },
          "overwrite_rate": {
            "$ref": "#/components/schemas/OverwriteRateInput",
            "description": "Required for OVERWRITE type."
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the product whose rate is being overridden. Cannot be used in conjunction with override_specifiers."
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "tags identifying products whose rates are being overridden. Cannot be used in conjunction with override_specifiers."
          },
          "override_specifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideSpecifierInput"
            },
            "description": "Cannot be used in conjunction with product_id or applicable_product_tags. If provided, the override will apply to all products with the specified specifiers."
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideTierInput"
            },
            "description": "Required for TIERED type. Must have at least one tier."
          },
          "is_commit_specific": {
            "type": "boolean",
            "description": "Indicates whether the override should only apply to commits. Defaults to `false`. If `true`, you can specify relevant commits in `override_specifiers` by passing `commit_ids`. if you do not specify `commit_ids`, then the override will apply when consuming any prepaid or postpaid commit."
          },
          "target": {
            "type": "string",
            "enum": ["COMMIT_RATE", "commit_rate", "LIST_RATE", "list_rate"],
            "description": "Indicates whether the override applies to commit rates or list rates. Can only be used for overrides that have `is_commit_specific` set to `true`. Defaults to `\"LIST_RATE\"`."
          }
        }
      },
      "OverrideInputV2": {
        "type": "object",
        "required": ["starting_at"],
        "properties": {
          "starting_at": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the override will start applying (inclusive)"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the override will stop applying (exclusive)"
          },
          "entitled": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "OVERWRITE",
              "overwrite",
              "MULTIPLIER",
              "multiplier",
              "TIERED",
              "tiered"
            ],
            "description": "Overwrites are prioritized over multipliers and tiered overrides."
          },
          "multiplier": {
            "type": "number",
            "description": "Required for MULTIPLIER type. Must be >=0."
          },
          "priority": {
            "type": "number",
            "description": "Required for EXPLICIT multiplier prioritization scheme and all TIERED overrides. Under EXPLICIT prioritization, overwrites are prioritized first, and then tiered and multiplier overrides are prioritized by their priority value (lowest first). Must be > 0."
          },
          "overwrite_rate": {
            "$ref": "#/components/schemas/OverwriteRateInputV2",
            "description": "Required for OVERWRITE type."
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the product whose rate is being overridden"
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "tags identifying products whose rates are being overridden"
          },
          "override_specifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideSpecifierInputV2"
            },
            "description": "Cannot be used in conjunction with product_id or applicable_product_tags. If provided, the override will apply to all products with the specified specifiers."
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideTierInput"
            },
            "description": "Required for TIERED type. Must have at least one tier."
          },
          "is_commit_specific": {
            "type": "boolean",
            "description": "Indicates whether the override should only apply to commits. Defaults to `false`. If `true`, you can specify relevant commits in `override_specifiers` by passing `commit_ids`."
          },
          "target": {
            "type": "string",
            "enum": ["COMMIT_RATE", "commit_rate", "LIST_RATE", "list_rate"],
            "description": "Indicates whether the override applies to commit rates or list rates. Can only be used for overrides that have `is_commit_specific` set to `true`. Defaults to `\"LIST_RATE\"`."
          }
        }
      },
      "Override": {
        "type": "object",
        "required": ["id", "starting_at"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "override_specifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideSpecifier"
            }
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          },
          "entitled": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": ["OVERWRITE", "MULTIPLIER", "TIERED"]
          },
          "priority": {
            "type": "number"
          },
          "multiplier": {
            "type": "number"
          },
          "overwrite_rate": {
            "$ref": "#/components/schemas/OverwriteRate"
          },
          "override_tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideTier"
            }
          },
          "is_commit_specific": {
            "type": "boolean"
          },
          "target": {
            "type": "string",
            "enum": ["COMMIT_RATE", "LIST_RATE"]
          },
          "rate_type": {
            "type": "string",
            "enum": [
              "FLAT",
              "flat",
              "PERCENTAGE",
              "percentage",
              "TIERED",
              "tiered"
            ]
          },
          "price": {
            "type": "number",
            "description": "Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1."
          },
          "tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tier"
            },
            "description": "Only set for TIERED rate_type."
          },
          "value": {
            "type": "object",
            "additionalProperties": true,
            "description": "Only set for CUSTOM rate_type. This field is interpreted by custom rate processors."
          },
          "credit_type": {
            "$ref": "#/components/schemas/CreditType"
          }
        }
      },
      "OverrideV2": {
        "type": "object",
        "required": ["id", "starting_at"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "override_specifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideSpecifierV2"
            }
          },
          "starting_at": {
            "type": "string",
            "format": "date-time"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          },
          "entitled": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": ["OVERWRITE", "MULTIPLIER", "TIERED"]
          },
          "priority": {
            "type": "number"
          },
          "multiplier": {
            "type": "number"
          },
          "overwrite_rate": {
            "$ref": "#/components/schemas/OverwriteRateV2"
          },
          "override_tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideTier"
            }
          },
          "is_commit_specific": {
            "type": "boolean"
          },
          "target": {
            "type": "string",
            "enum": ["COMMIT_RATE", "LIST_RATE"]
          }
        }
      },
      "ScheduledChargeInput": {
        "type": "object",
        "required": ["product_id", "schedule"],
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "displayed on invoices"
          },
          "schedule": {
            "$ref": "#/components/schemas/SchedulePointInTimeInput"
          }
        }
      },
      "ScheduledChargeInputV2": {
        "type": "object",
        "required": ["product_id", "schedule"],
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "displayed on invoices"
          },
          "schedule": {
            "$ref": "#/components/schemas/SchedulePointInTimeInputV2"
          }
        }
      },
      "ScheduledCharge": {
        "type": "object",
        "required": ["id", "product", "schedule"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "schedule": {
            "$ref": "#/components/schemas/SchedulePointInTime"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "displayed on invoices"
          },
          "custom_fields": {
            "x-cf-entity": "scheduled_charge",
            "$ref": "#/components/schemas/CustomField"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ScheduleDurationInput": {
        "type": "object",
        "required": ["schedule_items"],
        "properties": {
          "credit_type_id": {
            "type": "string",
            "format": "uuid",
            "description": "Defaults to USD (cents) if not passed"
          },
          "schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["amount", "starting_at", "ending_before"],
              "properties": {
                "amount": {
                  "type": "number"
                },
                "starting_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "RFC 3339 timestamp (inclusive)"
                },
                "ending_before": {
                  "type": "string",
                  "format": "date-time",
                  "description": "RFC 3339 timestamp (exclusive)"
                }
              }
            }
          }
        }
      },
      "ScheduleDurationInputV2": {
        "type": "object",
        "required": ["schedule_items"],
        "properties": {
          "credit_type_id": {
            "type": "string",
            "format": "uuid"
          },
          "schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["amount", "starting_at", "ending_before"],
              "properties": {
                "amount": {
                  "type": "number"
                },
                "starting_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "RFC 3339 timestamp (inclusive)"
                },
                "ending_before": {
                  "type": "string",
                  "format": "date-time",
                  "description": "RFC 3339 timestamp (exclusive)"
                }
              }
            }
          }
        }
      },
      "ScheduleDuration": {
        "type": "object",
        "required": ["schedule_items"],
        "properties": {
          "credit_type": {
            "$ref": "#/components/schemas/CreditType"
          },
          "schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id", "amount", "starting_at", "ending_before"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "amount": {
                  "type": "number"
                },
                "starting_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "ending_before": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "SchedulePointInTimeInput": {
        "type": "object",
        "description": "Must provide either schedule_items or recurring_schedule.",
        "properties": {
          "credit_type_id": {
            "type": "string",
            "format": "uuid",
            "description": "Defaults to USD (cents) if not passed."
          },
          "schedule_items": {
            "type": "array",
            "description": "Either provide amount or provide both unit_price and quantity.",
            "items": {
              "type": "object",
              "required": ["timestamp"],
              "properties": {
                "unit_price": {
                  "type": "number",
                  "description": "Unit price for the charge. Will be multiplied by quantity to determine the amount and must be specified with quantity. If specified amount cannot be provided."
                },
                "quantity": {
                  "type": "number",
                  "description": "Quantity for the charge. Will be multiplied by unit_price to determine the amount and must be specified with unit_price. If specified amount cannot be provided."
                },
                "amount": {
                  "type": "number",
                  "description": "Amount for the charge. Can be provided instead of unit_price and quantity. If amount is sent, the unit_price is assumed to be the amount and quantity is inferred to be 1."
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "timestamp of the scheduled event"
                }
              }
            }
          },
          "recurring_schedule": {
            "type": "object",
            "description": "Enter the unit price and quantity for the charge or instead only send the amount. If amount is sent, the unit price is assumed to be the amount and quantity is inferred to be 1.",
            "required": [
              "starting_at",
              "ending_before",
              "frequency",
              "amount_distribution"
            ],
            "properties": {
              "starting_at": {
                "type": "string",
                "format": "date-time",
                "description": "RFC 3339 timestamp (inclusive)."
              },
              "ending_before": {
                "type": "string",
                "format": "date-time",
                "description": "RFC 3339 timestamp (exclusive)."
              },
              "frequency": {
                "$ref": "#/components/schemas/RecurringScheduleFrequency"
              },
              "unit_price": {
                "type": "number",
                "description": "Unit price for the charge. Will be multiplied by quantity to determine the amount and must be specified with quantity. If specified amount cannot be provided."
              },
              "quantity": {
                "type": "number",
                "description": "Quantity for the charge. Will be multiplied by unit_price to determine the amount and must be specified with unit_price. If specified amount cannot be provided."
              },
              "amount": {
                "type": "number",
                "description": "Amount for the charge. Can be provided instead of unit_price and quantity. If amount is sent, the unit_price is assumed to be the amount and quantity is inferred to be 1."
              },
              "amount_distribution": {
                "type": "string",
                "enum": [
                  "DIVIDED",
                  "divided",
                  "DIVIDED_ROUNDED",
                  "divided_rounded",
                  "EACH",
                  "each"
                ]
              }
            }
          },
          "do_not_invoice": {
            "type": "boolean",
            "description": "This field is only applicable to commit invoice schedules. If true, this schedule will not generate an invoice.",
            "default": false
          }
        }
      },
      "SchedulePointInTimeInputV2": {
        "type": "object",
        "description": "Must provide either schedule_items or recurring_schedule.",
        "properties": {
          "credit_type_id": {
            "type": "string",
            "format": "uuid",
            "description": "Defaults to USD (cents) if not passed."
          },
          "schedule_items": {
            "type": "array",
            "description": "Either provide amount or provide both unit_price and quantity.",
            "items": {
              "type": "object",
              "required": ["timestamp"],
              "properties": {
                "unit_price": {
                  "type": "number",
                  "description": "Unit price for the charge. Will be multiplied by quantity to determine the amount and must be specified with quantity. If specified amount cannot be provided."
                },
                "quantity": {
                  "type": "number",
                  "description": "Quantity for the charge. Will be multiplied by unit_price to determine the amount and must be specified with unit_price. If specified amount cannot be provided."
                },
                "amount": {
                  "type": "number",
                  "description": "Amount for the charge. Can be provided instead of unit_price and quantity. If amount is sent, the unit_price is assumed to be the amount and quantity is inferred to be 1."
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "timestamp of the scheduled event"
                }
              }
            }
          },
          "recurring_schedule": {
            "type": "object",
            "description": "Enter the unit price and quantity for the charge or instead only send the amount. If amount is sent, the unit price is assumed to be the amount and quantity is inferred to be 1.",
            "required": [
              "starting_at",
              "ending_before",
              "frequency",
              "amount_distribution"
            ],
            "properties": {
              "starting_at": {
                "type": "string",
                "format": "date-time",
                "description": "RFC 3339 timestamp (inclusive)."
              },
              "ending_before": {
                "type": "string",
                "format": "date-time",
                "description": "RFC 3339 timestamp (exclusive)."
              },
              "frequency": {
                "$ref": "#/components/schemas/RecurringScheduleFrequencyV2"
              },
              "unit_price": {
                "type": "number",
                "description": "Unit price for the charge. Will be multiplied by quantity to determine the amount and must be specified with quantity. If specified amount cannot be provided."
              },
              "quantity": {
                "type": "number",
                "description": "Quantity for the charge. Will be multiplied by unit_price to determine the amount and must be specified with unit_price. If specified amount cannot be provided."
              },
              "amount": {
                "type": "number",
                "description": "Amount for the charge. Can be provided instead of unit_price and quantity. If amount is sent, the unit_price is assumed to be the amount and quantity is inferred to be 1."
              },
              "amount_distribution": {
                "type": "string",
                "enum": [
                  "DIVIDED",
                  "divided",
                  "DIVIDED_ROUNDED",
                  "divided_rounded",
                  "EACH",
                  "each"
                ]
              }
            }
          },
          "do_not_invoice": {
            "type": "boolean",
            "description": "This field is only applicable to commit invoice schedules. If true, this schedule will not generate an invoice.",
            "default": false
          }
        }
      },
      "SchedulePointInTime": {
        "type": "object",
        "properties": {
          "credit_type": {
            "$ref": "#/components/schemas/CreditType"
          },
          "schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "amount",
                "unit_price",
                "quantity",
                "timestamp"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "invoice_id": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "amount": {
                  "type": "number"
                },
                "unit_price": {
                  "type": "number"
                },
                "quantity": {
                  "type": "number"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "do_not_invoice": {
            "type": "boolean",
            "description": "This field is only applicable to commit invoice schedules. If true, this schedule will not generate an invoice.",
            "default": false
          }
        }
      },
      "ResellerType": {
        "type": "string",
        "enum": ["AWS", "AWS_PRO_SERVICE", "GCP", "GCP_PRO_SERVICE"]
      },
      "ContractTransitionInput": {
        "type": "object",
        "required": ["type", "from_contract_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["RENEWAL", "renewal"],
            "description": "This field's available values may vary based on your client's configuration."
          },
          "from_contract_id": {
            "type": "string",
            "format": "uuid"
          },
          "future_invoice_behavior": {
            "type": "object",
            "properties": {
              "trueup": {
                "type": "string",
                "enum": ["remove", "as_is", "REMOVE", "AS_IS"],
                "nullable": true,
                "description": "Controls whether future trueup invoices are billed or removed. Default behavior is AS_IS if not specified."
              }
            }
          }
        }
      },
      "AddManualBalanceLedgerEntryPayload": {
        "type": "object",
        "required": ["customer_id", "id", "segment_id", "amount", "reason"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer whose balance is to be updated."
          },
          "contract_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the contract to update. Leave blank to update a customer level balance."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the balance (commit or credit) to update."
          },
          "segment_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the segment to update."
          },
          "amount": {
            "type": "number",
            "description": "Amount to add to the segment. A negative number will draw down from the balance."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the manual adjustment. This will be displayed in the ledger."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the manual adjustment takes place. If not provided, it will default to the start of the segment."
          }
        }
      },
      "UpdateInvoiceIssueDatePayload": {
        "type": "object",
        "required": ["invoice_id", "issue_date"],
        "properties": {
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the invoice to update. The invoice must still be in DRAFT status."
          },
          "issue_date": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp. This will be the new issue date of the invoice. It must not be after the end date of the contract."
          }
        }
      },
      "UpdateContractEndDatePayload": {
        "type": "object",
        "required": ["customer_id", "contract_id"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer whose contract is to be updated"
          },
          "contract_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the contract to update"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the contract will end (exclusive). If not provided, the contract will be updated to be open-ended."
          },
          "allow_ending_before_finalized_invoice": {
            "type": "boolean",
            "description": "If true, allows setting the contract end date earlier than the end_timestamp of existing finalized invoices. Finalized invoices will be unchanged; if you want to incorporate the new end date, you can void and regenerate finalized usage invoices. Defaults to true."
          }
        }
      },
      "UpdateCommitEndDatePayload": {
        "type": "object",
        "required": ["customer_id", "commit_id"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer whose commit is to be updated"
          },
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the commit to update. Only supports \"PREPAID\" commits."
          },
          "access_ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when access to the commit will end and it will no longer be possible to draw it down (exclusive). If not provided, the access will not be updated."
          },
          "invoices_ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the commit will stop being invoiced (exclusive). If not provided, the invoice schedule will not be updated."
          }
        }
      },
      "UpdateCreditEndDatePayload": {
        "type": "object",
        "required": ["customer_id", "credit_id", "access_ending_before"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer whose credit is to be updated"
          },
          "credit_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the commit to update"
          },
          "access_ending_before": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when access to the credit will end and it will no longer be possible to draw it down (exclusive)."
          }
        }
      },
      "ExternalPaymentGateThresholdCommitPayload": {
        "type": "object",
        "required": ["workflow_id", "outcome"],
        "properties": {
          "workflow_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the workflow to continue"
          },
          "outcome": {
            "type": "string",
            "enum": ["paid", "PAID", "failed", "FAILED"],
            "description": "The outcome of the external payment gate"
          }
        }
      },
      "DisableCommitTrueupPayload": {
        "type": "object",
        "required": ["customer_id", "commit_id", "contract_id"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer whose commit is to be updated"
          },
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the commit to update"
          },
          "contract_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the contract that the commit is on"
          },
          "amendment_id": {
            "type": "string",
            "format": "uuid",
            "description": "If applicable, the amendment ID that the commit is on"
          }
        }
      },
      "CustomerBillingProviderConfiguration": {
        "type": "object",
        "required": [
          "id",
          "billing_provider",
          "customer_id",
          "configuration",
          "delivery_method_id",
          "delivery_method",
          "delivery_method_configuration"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of this configuration; can be provided as the billing_provider_configuration_id when creating a contract."
          },
          "billing_provider": {
            "$ref": "#/components/schemas/BillingProviderType",
            "description": "The billing provider set for this configuration."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": true,
            "description": "Configuration for the billing provider. The structure of this object is specific to the billing provider."
          },
          "delivery_method_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the delivery method to use for this customer."
          },
          "delivery_method": {
            "$ref": "#/components/schemas/BillingProviderDeliveryMethodType",
            "description": "The method to use for delivering invoices to this customer."
          },
          "delivery_method_configuration": {
            "type": "object",
            "additionalProperties": true,
            "description": "Configuration for the delivery method. The structure of this object is specific to the delivery method."
          }
        }
      },
      "CustomerBillingProviderConfigurationInput": {
        "type": "object",
        "properties": {
          "billing_provider": {
            "$ref": "#/components/schemas/BillingProviderType",
            "description": "The billing provider set for this configuration."
          },
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": true,
            "description": "Configuration for the billing provider. The structure of this object is specific to the billing provider and delivery method combination. Defaults to an empty object, however, for most billing provider + delivery method combinations, it will not be a valid configuration.  For AWS marketplace configurations, the aws_is_subscription_product flag can be used to indicate a product with usage-based pricing.  More information can be found [here](https://docs.metronome.com/invoice-customers/solutions/marketplaces/invoice-aws/#provision-aws-marketplace-customers-in-metronome).",
            "example": [
              {
                "aws_customer_id": "cust_1234",
                "aws_product_code": "my_product",
                "aws_region": "us-west-1"
              },
              {
                "azure_subscription_id": "my_subscription"
              },
              {
                "stripe_collection_method": "charge_automatically",
                "leave_stripe_invoices_in_draft": true
              }
            ]
          },
          "delivery_method_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the delivery method to use for this customer. If not provided, the `delivery_method` must be provided."
          },
          "delivery_method": {
            "$ref": "#/components/schemas/BillingProviderDeliveryMethodType",
            "description": "The method to use for delivering invoices to this customer. If not provided, the `delivery_method_id` must be provided."
          }
        },
        "required": ["billing_provider", "customer_id"]
      },
      "CustomerBillingProviderConfigurationCreateCustomerInput": {
        "type": "object",
        "properties": {
          "billing_provider": {
            "$ref": "#/components/schemas/ContractsBillingProviderType",
            "description": "The billing provider set for this configuration."
          },
          "configuration": {
            "type": "object",
            "additionalProperties": true,
            "description": "Configuration for the billing provider. The structure of this object is specific to the billing provider and delivery provider combination. Defaults to an empty object, however, for most billing provider + delivery method combinations, it will not be a valid configuration.",
            "example": [
              {
                "aws_customer_id": "cust_1234",
                "aws_product_code": "my_product",
                "aws_region": "us-west-1",
                "aws_is_subscription_product": false
              },
              {
                "azure_subscription_id": "my_subscription"
              },
              {
                "stripe_collection_method": "charge_automatically",
                "leave_stripe_invoices_in_draft": true
              }
            ]
          },
          "delivery_method_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the delivery method to use for this customer. If not provided, the `delivery_method` must be provided."
          },
          "delivery_method": {
            "$ref": "#/components/schemas/BillingProviderDeliveryMethodType",
            "description": "The method to use for delivering invoices to this customer. If not provided, the `delivery_method_id` must be provided."
          }
        },
        "required": ["billing_provider"]
      },
      "BillingProviderDeliveryMethod": {
        "type": "object",
        "required": [
          "billing_provider",
          "delivery_method_id",
          "delivery_method",
          "delivery_method_configuration"
        ],
        "properties": {
          "billing_provider": {
            "$ref": "#/components/schemas/BillingProviderType",
            "description": "The billing provider set for this configuration."
          },
          "delivery_method_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the delivery method to use for this customer."
          },
          "delivery_method": {
            "$ref": "#/components/schemas/BillingProviderDeliveryMethodType",
            "description": "The method to use for delivering invoices to this customer."
          },
          "delivery_method_configuration": {
            "type": "object",
            "additionalProperties": true,
            "description": "Configuration for the delivery method. The structure of this object is specific to the delivery method. Some configuration may be omitted for security reasons."
          }
        }
      },
      "UniquenessKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "description": "Prevents the creation of duplicates. If a request to create a record is made with a previously used uniqueness key, a new record will not be created and the request will fail with a 409 error."
      },
      "UniquenessKeyForCommitsAndCredits": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "description": "Prevents the creation of duplicates. If a request to create a commit or credit is made with a uniqueness key that was previously used to create a commit or credit, a new record will not be created and the request will fail with a 409 error."
      },
      "BalanceForCommitsAndCredits": {
        "type": "number",
        "description": "The current balance of the credit or commit. This balance reflects the amount of credit or commit that the customer has access to use at this moment - thus, expired and upcoming credit or commit segments contribute 0 to the balance. The balance will match the sum of all ledger entries with the exception of the case where the sum of negative manual ledger entries exceeds the positive amount remaining on the credit or commit - in that case, the balance will be 0. All manual ledger entries associated with active credit or commit segments are included in the balance, including future-dated manual ledger entries."
      },
      "BillableMetricV1": {
        "type": "object",
        "required": ["id", "name"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the billable metric"
          },
          "name": {
            "type": "string",
            "description": "The display name of the billable metric."
          },
          "event_type_filter": {
            "$ref": "#/components/schemas/EventTypeFilter"
          },
          "property_filters": {
            "$ref": "#/components/schemas/PropertyFiltersArray"
          },
          "aggregation_type": {
            "$ref": "#/components/schemas/AggregationType"
          },
          "aggregation_key": {
            "$ref": "#/components/schemas/AggregationKey"
          },
          "group_keys": {
            "$ref": "#/components/schemas/GroupKeysArray"
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomField"
          },
          "sql": {
            "type": "string",
            "description": "The SQL query associated with the billable metric"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the billable metric was archived. If not provided, the billable metric is not archived."
          }
        }
      },
      "CreateBillableMetricV1Payload": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name of the billable metric."
          },
          "sql": {
            "type": "string",
            "description": "The SQL query associated with the billable metric. This field is mutually exclusive with aggregation_type, event_type_filter, property_filters, aggregation_key, and group_keys. If provided, these other fields must be omitted."
          },
          "event_type_filter": {
            "$ref": "#/components/schemas/EventTypeFilter"
          },
          "property_filters": {
            "$ref": "#/components/schemas/PropertyFiltersArray"
          },
          "aggregation_type": {
            "$ref": "#/components/schemas/AggregationType"
          },
          "aggregation_key": {
            "$ref": "#/components/schemas/AggregationKey",
            "description": "Specifies the type of aggregation performed on matching events. Required if `sql` is not provided."
          },
          "group_keys": {
            "$ref": "#/components/schemas/GroupKeysArray"
          },
          "custom_fields": {
            "description": "Custom fields to attach to the billable metric.",
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "PropertyFiltersArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PropertyFilter"
        },
        "description": "A list of filters to match events to this billable metric. Each filter defines a rule on an event property. All rules must pass for the event to match the billable metric."
      },
      "AggregationType": {
        "type": "string",
        "enum": [
          "count",
          "Count",
          "COUNT",
          "latest",
          "Latest",
          "LATEST",
          "max",
          "Max",
          "MAX",
          "sum",
          "Sum",
          "SUM",
          "unique",
          "Unique",
          "UNIQUE"
        ],
        "description": "Specifies the type of aggregation performed on matching events."
      },
      "AggregationKey": {
        "type": "string",
        "description": "A key that specifies which property of the event is used to aggregate data. This key must be one of the property filter names and is not applicable when the aggregation type is 'count'."
      },
      "GroupKeysArray": {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": "Property names that are used to group usage costs on an invoice. Each entry represents a set of properties used to slice events into distinct buckets."
      },
      "EventTypeFilter": {
        "type": "object",
        "properties": {
          "in_values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of event types that are explicitly included in the billable metric. If specified, only events of these types will match the billable metric. Must be non-empty if present."
          },
          "not_in_values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of event types that are explicitly excluded from the billable metric. If specified, events of these types will not match the billable metric. Must be non-empty if present."
          }
        },
        "description": "An optional filtering rule to match the 'event_type' property of an event."
      },
      "PropertyFilter": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the event property."
          },
          "exists": {
            "type": "boolean",
            "description": "Determines whether the property must exist in the event. If true, only events with this property will pass the filter. If false, only events without this property will pass the filter. If null or omitted, the existence of the property is optional."
          },
          "in_values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies the allowed values for the property to match an event. An event will pass the filter only if its property value is included in this list. If undefined, all property values will pass the filter. Must be non-empty if present."
          },
          "not_in_values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies the values that prevent an event from matching the filter. An event will not pass the filter if its property value is included in this list. If null or empty, all property values will pass the filter. Must be non-empty if present."
          }
        }
      },
      "CreateHistoricalContractUsageInvoiceRequestPayload": {
        "type": "object",
        "required": ["invoices", "preview"],
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoricalContractUsageInvoiceInputPayload"
            }
          },
          "preview": {
            "type": "boolean"
          }
        }
      },
      "HistoricalContractUsageInvoiceInputPayload": {
        "type": "object",
        "required": [
          "customer_id",
          "contract_id",
          "credit_type_id",
          "inclusive_start_date",
          "exclusive_end_date",
          "issue_date",
          "usage_line_items"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "contract_id": {
            "type": "string",
            "format": "uuid"
          },
          "credit_type_id": {
            "type": "string",
            "format": "uuid"
          },
          "inclusive_start_date": {
            "type": "string",
            "format": "date-time"
          },
          "exclusive_end_date": {
            "type": "string",
            "format": "date-time"
          },
          "issue_date": {
            "type": "string",
            "format": "date-time"
          },
          "breakdown_granularity": {
            "type": "string",
            "enum": ["hour", "day", "HOUR", "DAY", "Hour", "Day"]
          },
          "usage_line_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoricalContractUsageInvoiceLineItemInput"
            }
          },
          "custom_fields": {
            "$ref": "#/components/schemas/CustomField"
          }
        }
      },
      "HistoricalContractUsageInvoiceLineItemInput": {
        "type": "object",
        "required": [
          "product_id",
          "inclusive_start_date",
          "exclusive_end_date"
        ],
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "inclusive_start_date": {
            "type": "string",
            "format": "date-time"
          },
          "exclusive_end_date": {
            "type": "string",
            "format": "date-time"
          },
          "quantity": {
            "type": "number"
          },
          "pricing_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "presentation_group_values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "subtotals_with_quantity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoricalContractUsageInvoiceLineItemBreakdownSubtotal"
            }
          }
        }
      },
      "HistoricalContractUsageInvoiceLineItemBreakdownSubtotal": {
        "type": "object",
        "required": ["inclusive_start_date", "exclusive_end_date", "quantity"],
        "properties": {
          "inclusive_start_date": {
            "type": "string",
            "format": "date-time"
          },
          "exclusive_end_date": {
            "type": "string",
            "format": "date-time"
          },
          "quantity": {
            "type": "number"
          }
        }
      },
      "PricingGroupKey": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "For USAGE products only. If set, pricing for this product will be determined for each pricing_group_key value, as opposed to the product as a whole. The superset of values in the pricing group key and presentation group key must be set as one compound group key on the billable metric."
      },
      "PresentationGroupKey": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "For USAGE products only. Groups usage line items on invoices. The superset of values in the pricing group key and presentation group key must be set as one compound group key on the billable metric."
      },
      "RecurringScheduleFrequency": {
        "type": "string",
        "enum": [
          "MONTHLY",
          "monthly",
          "QUARTERLY",
          "quarterly",
          "SEMI_ANNUAL",
          "semi_annual",
          "ANNUAL",
          "annual"
        ]
      },
      "RecurringScheduleFrequencyV2": {
        "type": "string",
        "enum": [
          "MONTHLY",
          "monthly",
          "QUARTERLY",
          "quarterly",
          "SEMI_ANNUAL",
          "semi_annual",
          "ANNUAL",
          "annual",
          "WEEKLY",
          "weekly"
        ]
      },
      "SubscriptionQuantityHistory": {
        "type": "object",
        "properties": {
          "subscription_id": {
            "type": "string",
            "format": "uuid"
          },
          "fiat_credit_type_id": {
            "type": "string",
            "format": "uuid"
          },
          "history": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["starting_at", "data"],
              "properties": {
                "starting_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": ["quantity", "unit_price", "total"],
                    "properties": {
                      "quantity": {
                        "type": "number"
                      },
                      "total": {
                        "type": "number"
                      },
                      "unit_price": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AccessScheduleUpdate": {
        "type": "object",
        "properties": {
          "add_schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["amount", "starting_at", "ending_before"],
              "properties": {
                "amount": {
                  "type": "number"
                },
                "starting_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "RFC 3339 timestamp (inclusive)"
                },
                "ending_before": {
                  "type": "string",
                  "format": "date-time",
                  "description": "RFC 3339 timestamp (exclusive)"
                }
              }
            }
          },
          "update_schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "amount": {
                  "type": "number"
                },
                "starting_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "RFC 3339 timestamp (inclusive)"
                },
                "ending_before": {
                  "type": "string",
                  "format": "date-time",
                  "description": "RFC 3339 timestamp (exclusive)"
                }
              }
            }
          },
          "remove_schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      },
      "CommitAdd": {
        "type": "object",
        "required": ["id", "type", "product"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["PREPAID", "POSTPAID"]
          },
          "rate_type": {
            "type": "string",
            "enum": ["COMMIT_RATE", "LIST_RATE"]
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "number",
            "description": "If multiple credits or commits are applicable, the one with the lower priority will apply first."
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "access_schedule": {
            "$ref": "#/components/schemas/ScheduleDuration",
            "description": "The schedule that the customer will gain access to the credits purposed with this commit."
          },
          "invoice_schedule": {
            "$ref": "#/components/schemas/SchedulePointInTime",
            "description": "The schedule that the customer will be invoiced for this commit."
          },
          "description": {
            "type": "string"
          },
          "rollover_fraction": {
            "type": "number"
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`. Instead, to target usage by product or product tag, pass those values in the body of `specifiers`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CommitUpdate": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "access_schedule": {
            "$ref": "#/components/schemas/AccessScheduleUpdate"
          },
          "rollover_fraction": {
            "type": "number",
            "nullable": true
          },
          "invoice_schedule": {
            "$ref": "#/components/schemas/InvoiceScheduleUpdate"
          },
          "applicable_product_ids": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "specifiers": {
            "nullable": true,
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`. Instead, to target usage by product or product tag, pass those values in the body of `specifiers`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          },
          "applicable_product_tags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "description": "Which tags the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "priority": {
            "type": "number",
            "nullable": true,
            "description": "If multiple commits are applicable, the one with the lower priority will apply first."
          }
        }
      },
      "HasMore": {
        "type": "object",
        "description": "Indicates whether there are more items than the limit for this endpoint. Use the respective list endpoints to get the full lists.",
        "required": ["commits", "credits"],
        "properties": {
          "commits": {
            "type": "boolean",
            "description": "Whether there are more commits on this contract than the limit for this endpoint. Use the /contracts/customerCommits/list endpoint to get the full list of commits."
          },
          "credits": {
            "type": "boolean",
            "description": "Whether there are more credits on this contract than the limit for this endpoint. Use the /contracts/customerCredits/list endpoint to get the full list of credits."
          }
        }
      },
      "UpdateBaseThresholdCommit": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string",
            "description": "The commit product that will be used to generate the line item for commit payment."
          },
          "name": {
            "type": "string",
            "description": "Specify the name of the line item for the threshold charge. If left blank, it will default to the commit product name."
          },
          "description": {
            "type": "string"
          }
        }
      },
      "OptionalThresholdCommitFields": {
        "type": "object",
        "properties": {
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the threshold commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which tags the threshold commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          }
        }
      },
      "OptionalThresholdCommitFieldsUpdate": {
        "type": "object",
        "properties": {
          "applicable_product_ids": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the threshold commit applies to. If both applicable_product_ids and applicable_product_tags are not provided, the commit applies to all products."
          },
          "applicable_product_tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which tags the threshold commit applies to. If both applicable_product_ids and applicable_product_tags are not provided, the commit applies to all products."
          }
        }
      },
      "UpdatePrepaidBalanceThresholdCommit": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateBaseThresholdCommit"
          },
          {
            "$ref": "#/components/schemas/OptionalThresholdCommitFieldsUpdate"
          }
        ]
      },
      "UpdateSpendThresholdCommit": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateBaseThresholdCommit"
          }
        ]
      },
      "UpdateSpendThresholdConfiguration": {
        "type": "object",
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "When set to false, the contract will not be evaluated against the threshold_amount. Toggling to true will result an immediate evaluation, regardless of prior state."
          },
          "threshold_amount": {
            "description": "Specify the threshold amount for the contract. Each time the contract's usage hits this amount, a threshold charge will be initiated.",
            "type": "number"
          },
          "commit": {
            "$ref": "#/components/schemas/UpdateSpendThresholdCommit"
          },
          "payment_gate_config": {
            "$ref": "#/components/schemas/PaymentGateConfigV2"
          }
        }
      },
      "UpdatePrepaidBalanceThresholdConfiguration": {
        "type": "object",
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "When set to false, the contract will not be evaluated against the threshold_amount. Toggling to true will result an immediate evaluation, regardless of prior state."
          },
          "threshold_amount": {
            "description": "Specify the threshold amount for the contract. Each time the contract's balance lowers to this amount, a threshold charge will be initiated.",
            "type": "number"
          },
          "recharge_to_amount": {
            "description": "Specify the amount the balance should be recharged to.",
            "type": "number"
          },
          "custom_credit_type_id": {
            "nullable": true,
            "description": "If provided, the threshold, recharge-to amount, and the resulting threshold commit amount will be in terms of this credit type instead of the fiat currency.",
            "type": "string",
            "format": "uuid"
          },
          "commit": {
            "$ref": "#/components/schemas/UpdatePrepaidBalanceThresholdCommit"
          },
          "payment_gate_config": {
            "$ref": "#/components/schemas/PaymentGateConfigV2"
          }
        }
      },
      "ContractEdit": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "add_overrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideV2"
            }
          },
          "add_scheduled_charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledChargeAdd"
            }
          },
          "add_commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitAdd"
            }
          },
          "add_credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditAdd"
            }
          },
          "add_recurring_commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringCommitV2"
            }
          },
          "add_recurring_credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringCreditV2"
            }
          },
          "add_usage_filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsageFilterV2"
            }
          },
          "add_subscriptions": {
            "$ref": "#/components/schemas/Subscriptions"
          },
          "add_prepaid_balance_threshold_configuration": {
            "$ref": "#/components/schemas/PrepaidBalanceThresholdConfigurationV2"
          },
          "add_spend_threshold_configuration": {
            "$ref": "#/components/schemas/SpendThresholdConfigurationV2"
          },
          "update_contract_name": {
            "type": "string",
            "nullable": true,
            "description": "Value to update the contract name to. If not provided, the contract name will remain unchanged."
          },
          "update_scheduled_charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledChargeUpdate"
            }
          },
          "update_commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitUpdate"
            }
          },
          "update_credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditUpdate"
            }
          },
          "update_recurring_commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringCommitUpdate"
            }
          },
          "update_recurring_credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringCreditUpdate"
            }
          },
          "update_contract_end_date": {
            "type": "string",
            "format": "date-time"
          },
          "update_refund_invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundInvoiceUpdate"
            }
          },
          "update_subscriptions": {
            "type": "array",
            "description": "Optional list of subscriptions to update.",
            "items": {
              "$ref": "#/components/schemas/SubscriptionsUpdate"
            }
          },
          "update_prepaid_balance_threshold_configuration": {
            "$ref": "#/components/schemas/UpdatePrepaidBalanceThresholdConfiguration"
          },
          "update_spend_threshold_configuration": {
            "$ref": "#/components/schemas/UpdateSpendThresholdConfiguration"
          },
          "archive_commits": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "archive_credits": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "archive_scheduled_charges": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "remove_overrides": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      },
      "CreditAdd": {
        "type": "object",
        "required": ["id", "type", "product"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["CREDIT"]
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "number",
            "description": "If multiple credits or commits are applicable, the one with the lower priority will apply first."
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "access_schedule": {
            "$ref": "#/components/schemas/ScheduleDuration",
            "description": "The schedule that the customer will gain access to the credits."
          },
          "description": {
            "type": "string"
          },
          "applicable_product_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "applicable_product_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "specifiers": {
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`. Instead, to target usage by product or product tag, pass those values in the body of `specifiers`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          }
        }
      },
      "CreditUpdate": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "access_schedule": {
            "$ref": "#/components/schemas/AccessScheduleUpdate"
          },
          "rollover_fraction": {
            "type": "number",
            "nullable": true
          },
          "priority": {
            "type": "number",
            "nullable": true,
            "description": "If multiple credits are applicable, the one with the lower priority will apply first."
          }
        }
      },
      "CreditCanceledLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "invoice_id", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CREDIT_CANCELED"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CreditCreditedLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "invoice_id", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CREDIT_CREDITED"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "RecurringCommitUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RecurringCreditUpdate"
          },
          {
            "type": "object",
            "properties": {
              "invoice_amount": {
                "type": "object",
                "properties": {
                  "unit_price": {
                    "type": "number"
                  },
                  "quantity": {
                    "type": "number"
                  }
                }
              }
            }
          }
        ]
      },
      "RecurringCreditUpdate": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          },
          "access_amount": {
            "type": "object",
            "properties": {
              "unit_price": {
                "type": "number"
              },
              "quantity": {
                "type": "number"
              }
            }
          }
        }
      },
      "EditContractPayload": {
        "type": "object",
        "required": ["customer_id", "contract_id"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer whose contract is being edited"
          },
          "contract_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the contract being edited"
          },
          "add_commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitInputV2"
            }
          },
          "add_credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditInputV2"
            }
          },
          "add_recurring_commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringCommitInputV2"
            }
          },
          "add_recurring_credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringCreditInputV2"
            }
          },
          "add_overrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverrideInputV2"
            }
          },
          "add_scheduled_charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledChargeInputV2"
            }
          },
          "add_subscriptions": {
            "$ref": "#/components/schemas/SubscriptionsInputV2"
          },
          "add_spend_threshold_configuration": {
            "$ref": "#/components/schemas/SpendThresholdConfigurationV2"
          },
          "add_prepaid_balance_threshold_configuration": {
            "type": "object",
            "$ref": "#/components/schemas/PrepaidBalanceThresholdConfigurationV2"
          },
          "update_contract_name": {
            "type": "string",
            "nullable": true,
            "description": "Value to update the contract name to. If not provided, the contract name will remain unchanged."
          },
          "update_scheduled_charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateScheduledChargeInput"
            }
          },
          "update_commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateCommitInput"
            }
          },
          "update_credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateCreditInput"
            }
          },
          "update_recurring_commits": {
            "type": "array",
            "description": "Edits to these recurring commits will only affect commits whose access schedules has not started. Expired commits, and commits with an active access schedule will remain unchanged.",
            "items": {
              "$ref": "#/components/schemas/UpdateRecurringCommitInput"
            }
          },
          "update_recurring_credits": {
            "type": "array",
            "description": "Edits to these recurring credits will only affect credits whose access schedules has not started. Expired credits, and credits with an active access schedule will remain unchanged.",
            "items": {
              "$ref": "#/components/schemas/UpdateRecurringCreditInput"
            }
          },
          "update_subscriptions": {
            "type": "array",
            "description": "Optional list of subscriptions to update.",
            "items": {
              "$ref": "#/components/schemas/UpdateSubscriptionInput"
            }
          },
          "update_spend_threshold_configuration": {
            "$ref": "#/components/schemas/UpdateSpendThresholdConfiguration"
          },
          "update_prepaid_balance_threshold_configuration": {
            "$ref": "#/components/schemas/UpdatePrepaidBalanceThresholdConfiguration"
          },
          "update_contract_end_date": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp indicating when the contract will end (exclusive).",
            "nullable": true
          },
          "allow_contract_ending_before_finalized_invoice": {
            "type": "boolean",
            "description": "If true, allows setting the contract end date earlier than the end_timestamp of existing finalized invoices. Finalized invoices will be unchanged; if you want to incorporate the new end date, you can void and regenerate finalized usage invoices. Defaults to true."
          },
          "archive_commits": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "description": "IDs of commits to archive"
          },
          "archive_credits": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "description": "IDs of credits to archive"
          },
          "archive_scheduled_charges": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "description": "IDs of scheduled charges to archive"
          },
          "remove_overrides": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "description": "IDs of overrides to remove"
          }
        }
      },
      "EditCommitPayload": {
        "type": "object",
        "required": ["customer_id", "commit_id"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer whose commit is being edited"
          },
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the commit to edit"
          },
          "access_schedule": {
            "$ref": "#/components/schemas/UpdateAccessScheduleInput"
          },
          "invoice_schedule": {
            "$ref": "#/components/schemas/UpdateInvoiceScheduleInput"
          },
          "invoice_contract_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of contract to use for invoicing"
          },
          "applicable_product_ids": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "applicable_product_tags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "description": "Which tags the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "specifiers": {
            "nullable": true,
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`. Instead, to target usage by product or product tag, pass those values in the body of `specifiers`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "priority": {
            "type": "number",
            "nullable": true,
            "description": "If multiple commits are applicable, the one with the lower priority will apply first."
          }
        }
      },
      "EditCreditPayload": {
        "type": "object",
        "required": ["customer_id", "credit_id"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer whose credit is being edited"
          },
          "credit_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the credit to edit"
          },
          "access_schedule": {
            "$ref": "#/components/schemas/UpdateAccessScheduleInput"
          },
          "applicable_product_ids": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the credit applies to. If both applicable_product_ids and applicable_product_tags are not provided, the credit applies to all products."
          },
          "applicable_product_tags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "description": "Which tags the credit applies to. If both applicable_product_ids and applicable_product_tags are not provided, the credit applies to all products."
          },
          "specifiers": {
            "nullable": true,
            "type": "array",
            "description": "List of filters that determine what kind of customer usage draws down a commit or credit. A customer's usage needs to meet the condition of at least one of the specifiers to contribute to a commit's or credit's drawdown. This field cannot be used together with `applicable_product_ids` or `applicable_product_tags`. Instead, to target usage by product or product tag, pass those values in the body of `specifiers`.",
            "items": {
              "$ref": "#/components/schemas/CommitSpecifierInput"
            }
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "priority": {
            "type": "number",
            "nullable": true,
            "description": "If multiple commits are applicable, the one with the lower priority will apply first."
          }
        }
      },
      "ArchiveCommitPayload": {
        "type": "object",
        "required": ["customer_id", "commit_id"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer whose commit is being archived"
          },
          "commit_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the commit to archive"
          }
        }
      },
      "ArchiveCreditPayload": {
        "type": "object",
        "required": ["customer_id", "credit_id"],
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the customer whose credit is being archived"
          },
          "credit_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the credit to archive"
          }
        }
      },
      "PrepaidCommitCanceledLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "invoice_id", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["PREPAID_COMMIT_CANCELED"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PrepaidCommitCreditedLedgerEntry": {
        "type": "object",
        "required": ["type", "timestamp", "amount", "invoice_id", "segment_id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["PREPAID_COMMIT_CREDITED"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "RefundInvoiceUpdate": {
        "type": "object",
        "required": ["invoice_id", "date"],
        "properties": {
          "invoice_id": {
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ScheduledChargeAdd": {
        "type": "object",
        "required": ["id", "product", "schedule"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "product": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "schedule": {
            "$ref": "#/components/schemas/SchedulePointInTime"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "displayed on invoices"
          }
        }
      },
      "ScheduledChargeUpdate": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "invoice_schedule": {
            "$ref": "#/components/schemas/InvoiceScheduleUpdate"
          }
        }
      },
      "UpdateInvoiceScheduleInput": {
        "type": "object",
        "properties": {
          "add_schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["timestamp"],
              "properties": {
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                },
                "amount": {
                  "type": "number"
                },
                "quantity": {
                  "type": "number"
                },
                "unit_price": {
                  "type": "number"
                }
              }
            }
          },
          "update_schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                },
                "amount": {
                  "type": "number"
                },
                "quantity": {
                  "type": "number"
                },
                "unit_price": {
                  "type": "number"
                }
              }
            }
          },
          "remove_schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      },
      "InvoiceScheduleUpdate": {
        "type": "object",
        "properties": {
          "add_schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["timestamp"],
              "properties": {
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                },
                "amount": {
                  "type": "number"
                },
                "quantity": {
                  "type": "number"
                },
                "unit_price": {
                  "type": "number"
                }
              }
            }
          },
          "update_schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                },
                "amount": {
                  "type": "number"
                },
                "quantity": {
                  "type": "number"
                },
                "unit_price": {
                  "type": "number"
                }
              }
            }
          },
          "remove_schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      },
      "UpdateAccessScheduleInput": {
        "type": "object",
        "properties": {
          "add_schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["amount", "starting_at", "ending_before"],
              "properties": {
                "amount": {
                  "type": "number"
                },
                "starting_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "ending_before": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "update_schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "amount": {
                  "type": "number"
                },
                "starting_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "ending_before": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "remove_schedule_items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      },
      "UpdateScheduledChargeInput": {
        "type": "object",
        "required": ["scheduled_charge_id"],
        "properties": {
          "scheduled_charge_id": {
            "type": "string",
            "format": "uuid"
          },
          "invoice_schedule": {
            "$ref": "#/components/schemas/UpdateInvoiceScheduleInput"
          }
        }
      },
      "UpdateCommitInput": {
        "type": "object",
        "required": ["commit_id"],
        "properties": {
          "commit_id": {
            "type": "string",
            "format": "uuid"
          },
          "access_schedule": {
            "$ref": "#/components/schemas/UpdateAccessScheduleInput"
          },
          "rollover_fraction": {
            "type": "number",
            "nullable": true
          },
          "invoice_schedule": {
            "$ref": "#/components/schemas/UpdateInvoiceScheduleInput"
          },
          "applicable_product_ids": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "applicable_product_tags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "description": "Which tags the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "priority": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "UpdateRecurringCommitInput": {
        "type": "object",
        "required": ["recurring_commit_id"],
        "properties": {
          "recurring_commit_id": {
            "type": "string",
            "format": "uuid"
          },
          "access_amount": {
            "type": "object",
            "properties": {
              "unit_price": {
                "type": "number"
              },
              "quantity": {
                "type": "number"
              }
            }
          },
          "invoice_amount": {
            "type": "object",
            "properties": {
              "unit_price": {
                "type": "number"
              },
              "quantity": {
                "type": "number"
              }
            }
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "UpdateRecurringCreditInput": {
        "type": "object",
        "required": ["recurring_credit_id"],
        "properties": {
          "recurring_credit_id": {
            "type": "string",
            "format": "uuid"
          },
          "access_amount": {
            "type": "object",
            "properties": {
              "unit_price": {
                "type": "number"
              },
              "quantity": {
                "type": "number"
              }
            }
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "UpdateCreditInput": {
        "type": "object",
        "required": ["credit_id"],
        "properties": {
          "credit_id": {
            "type": "string",
            "format": "uuid"
          },
          "access_schedule": {
            "$ref": "#/components/schemas/UpdateAccessScheduleInput"
          },
          "applicable_product_ids": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Which products the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "applicable_product_tags": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "description": "Which tags the commit applies to. If applicable_product_ids, applicable_product_tags or specifiers are not provided, the commit applies to all products."
          },
          "product_id": {
            "type": "string",
            "format": "uuid"
          },
          "priority": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "UpdateSubscriptionInput": {
        "type": "object",
        "required": ["subscription_id"],
        "properties": {
          "subscription_id": {
            "type": "string",
            "format": "uuid"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "quantity_updates": {
            "type": "array",
            "description": "Quantity changes are applied on the effective date based on the order which they are sent. For example, if I scheduled the quantity to be 12 on May 21 and then scheduled a quantity delta change of -1, the result from that day would be 11.",
            "items": {
              "type": "object",
              "required": ["starting_at"],
              "properties": {
                "quantity": {
                  "type": "number",
                  "description": "The new quantity for the subscription. Must be provided if quantity_delta is not provided. Must be non-negative."
                },
                "quantity_delta": {
                  "type": "number",
                  "description": "The delta to add to the subscription's quantity. Must be provided if quantity is not provided. Can't be zero. It also can't result in a negative quantity on the subscription."
                },
                "starting_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "SubscriptionsUpdate": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ending_before": {
            "type": "string",
            "format": "date-time"
          },
          "quantity_updates": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["starting_at"],
              "properties": {
                "quantity": {
                  "type": "number"
                },
                "quantity_delta": {
                  "type": "number"
                },
                "starting_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "BaseNotificationConfig": {
        "type": "object",
        "required": [
          "type",
          "policy",
          "environment_type",
          "created_at",
          "created_by"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of notification configuration. This determines the structure of the policy and the kind of notifications that will be sent.\n"
          },
          "policy": {
            "description": "The policy that defines when and how this notification should be triggered. The structure varies based on the notification type.\n"
          },
          "environment_type": {
            "type": "string",
            "description": "The environment type where this notification configuration was created.\n"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp when this notification configuration was created.\n"
          },
          "created_by": {
            "type": "string"
          }
        }
      },
      "LifecycleOffsetNotificationConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNotificationConfig"
          },
          {
            "type": "object",
            "required": ["id", "type", "policy"],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for this offset notification configuration.\n"
              },
              "type": {
                "type": "string",
                "enum": ["OFFSET_LIFECYCLE_EVENT"],
                "description": "Indicates this is an offset lifecycle event notification.\n"
              },
              "policy": {
                "$ref": "#/components/schemas/LifecycleOffsetEventPolicy"
              }
            }
          }
        ]
      },
      "LifecycleOffsetEventPolicy": {
        "type": "object",
        "required": ["type", "offset"],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of lifecycle event that this offset is based on.\n"
          },
          "offset": {
            "type": "string",
            "pattern": "^[+-]?P(?!$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(?!$)(\\d+H)?(\\d+M)?(\\d+S)?)?$",
            "description": "ISO-8601 duration string indicating how much time before or after the base event this notification should be sent. Positive values indicate notifications after the event, negative values indicate notifications before the event. Examples: \"P1D\" (1 day after), \"-PT2H\" (2 hours before), \"P1W\" (1 week after)\n",
            "example": "P1D"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "info": {
    "title": "Metronome",
    "version": "1.0.0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1/alerts/archive": {
      "post": {
        "description": "Archive an existing alert",
        "operationId": "archiveAlert-v1",
        "summary": "Archive an alert",
        "tags": ["Alerts"],
        "requestBody": {
          "description": "The ID of the alert to archive",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveAlertPayload"
              },
              "example": {
                "id": "8deed800-1b7a-495d-a207-6c52bac54dc9"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "8deed800-1b7a-495d-a207-6c52bac54dc9"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/alerts/create": {
      "post": {
        "description": "Create a new alert",
        "operationId": "createAlert-v1",
        "summary": "Create an alert",
        "tags": ["Alerts"],
        "requestBody": {
          "description": "The details of the alert to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerAlertPayload"
              },
              "example": {
                "alert_type": "spend_threshold_reached",
                "credit_type_id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                "name": "$100 spend threshold reached",
                "threshold": 10000,
                "customer_id": "4db51251-61de-4bfe-b9ce-495e244f3491",
                "credit_grant_type_filters": ["enterprise"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "58fb0650-e54a-4d17-93cb-ba8e56c32c65"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/billable-metrics/create": {
      "post": {
        "description": "Creates a new Billable Metric.",
        "operationId": "createBillableMetricV1-v1",
        "summary": "Create a billable metric",
        "tags": ["Billable metrics"],
        "requestBody": {
          "description": "The details of the billable metric to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBillableMetricV1Payload"
              },
              "example": {
                "name": "CPU Hours",
                "event_type_filter": {
                  "in_values": ["cpu_usage"]
                },
                "property_filters": [
                  {
                    "name": "cpu_hours",
                    "exists": true
                  },
                  {
                    "name": "region",
                    "exists": true,
                    "in_values": ["EU", "NA"]
                  },
                  {
                    "name": "machine_type",
                    "exists": true,
                    "in_values": ["slow", "fast"]
                  }
                ],
                "aggregation_type": "SUM",
                "aggregation_key": "cpu_hours",
                "group_keys": [["region"], ["machine_type"]]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "58fb0650-e54a-4d17-93cb-ba8e56c32c65"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/billable-metrics/archive": {
      "post": {
        "description": "Archive an existing billable metric.",
        "operationId": "archiveBillableMetric-v1",
        "summary": "Archive a billable metric",
        "tags": ["Billable metrics"],
        "requestBody": {
          "description": "The ID of the billable metric to archive",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Id"
              },
              "example": {
                "id": "8deed800-1b7a-495d-a207-6c52bac54dc9"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "8deed800-1b7a-495d-a207-6c52bac54dc9"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/customer-alerts/get": {
      "post": {
        "description": "Get the customer alert status and alert information for the specified customer and alert",
        "operationId": "getCustomerAlert-v1",
        "summary": "Get an alert",
        "tags": ["Alerts"],
        "requestBody": {
          "description": "The customer ID and alert ID of the customer alert to get",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCustomerAlertPayload"
              },
              "example": {
                "customer_id": "9b85c1c1-5238-4f2a-a409-61412905e1e1",
                "alert_id": "8deed800-1b7a-495d-a207-6c52bac54dc9"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CustomerAlert"
                    }
                  }
                },
                "example": {
                  "data": {
                    "customer_status": "in_alarm",
                    "alert": {
                      "id": "8deed800-1b7a-495d-a207-6c52bac54dc9",
                      "uniqueness_key": "823j7fqzo1",
                      "name": "Low credit balance alert",
                      "type": "low_credit_balance_reached",
                      "status": "enabled",
                      "credit_type": {
                        "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                        "name": "USD (cents)"
                      },
                      "threshold": 0,
                      "updated_at": "2022-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/customer-alerts/list": {
      "post": {
        "description": "Fetch all customer alert statuses and alert information for a customer",
        "operationId": "listCustomerAlerts-v1",
        "summary": "List customer alerts",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPage"
          }
        ],
        "tags": ["Alerts"],
        "requestBody": {
          "description": "The customer alerts query to run",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListCustomerAlertsPayload"
              },
              "example": {
                "customer_id": "9b85c1c1-5238-4f2a-a409-61412905e1e1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomerAlert"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "customer_status": "in_alarm",
                      "alert": {
                        "id": "8deed800-1b7a-495d-a207-6c52bac54dc9",
                        "name": "Low credit balance alert",
                        "uniqueness_key": "823j7fqzo1",
                        "type": "low_credit_balance_reached",
                        "status": "enabled",
                        "credit_type": {
                          "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                          "name": "USD (cents)"
                        },
                        "threshold": 0,
                        "updated_at": "2022-01-01T00:00:00Z"
                      }
                    },
                    {
                      "customer_status": "ok",
                      "alert": {
                        "id": "3d45fdc3-e237-4acd-a7d9-ccfeb40e71b8",
                        "name": "Spend threshold alert",
                        "type": "spend_threshold_reached",
                        "status": "enabled",
                        "credit_type": {
                          "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                          "name": "USD (cents)"
                        },
                        "threshold": 1000,
                        "updated_at": "2022-01-01T00:00:00Z"
                      }
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      }
    },
    "/v1/customer-alerts/reset": {
      "post": {
        "description": "Reset state for an alert by customer id and force re-evaluation",
        "operationId": "resetCustomerAlerts-v1",
        "summary": "Reset an alert for a customer",
        "tags": ["Alerts"],
        "requestBody": {
          "description": "The customer and alert",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetCustomerAlertsPayload"
              },
              "example": {
                "alert_id": "5e8691bf-b22a-4672-922d-f80eee940f01",
                "customer_id": "4c83caf3-8af4-44e2-9aeb-e290531726d9"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/plans": {},
    "/v1/planDetails/{plan_id}": {},
    "/v1/planDetails/{plan_id}/customers": {},
    "/v1/planDetails/{plan_id}/charges": {},
    "/v1/client/billing-config/{billing_provider_type}/apiKey": {},
    "/v1/client/config/webhook_secret": {},
    "/v1/client/billing-config/stripe": {},
    "/v1/credits/{customer_id}/rechargeSettings/{recharge_settings_id}": {},
    "/v1/credits/{customer_id}/rechargeSettings": {},
    "/v1/credits/createPrepaidGrant": {},
    "/v1/credits/createGrant": {},
    "/v1/credits/editGrant": {},
    "/v1/credits/voidGrant": {},
    "/v1/credits/listGrants": {},
    "/v1/credit-types/list": {
      "get": {
        "description": "List all pricing units (known in the API by the legacy term \"credit types\").",
        "operationId": "listCreditTypes-v1",
        "summary": "List pricing units",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          }
        ],
        "tags": ["Settings"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "is_currency": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                      "name": "USD (cents)",
                      "is_currency": true
                    },
                    {
                      "id": "fa2f1b3d-9d52-4951-a099-25991fd394d6",
                      "name": "cloud consumption units",
                      "is_currency": false
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customer_id}/plans": {},
    "/v1/customers/{customer_id}/plans/add": {},
    "/v1/customers/{customer_id}/plans/{customer_plan_id}/priceAdjustments": {},
    "/v1/customers/{customer_id}/plans/{customer_plan_id}/end": {},
    "/v1/ingest": {
      "post": {
        "description": "Send usage events to Metronome. The body of this request is expected to be a JSON array of between 1 and 100 usage events. Compressed request bodies are supported with a `Content-Encoding: gzip` header. See [Getting usage into Metronome](https://docs.metronome.com/connect-metronome/) to learn more about usage events.\n",
        "operationId": "ingest-v1",
        "summary": "Ingest events",
        "x-nlb-domain-variable": "ingestnlbDomain",
        "x-vpc-connection-id-variable": "ingestvpcLinkId",
        "x-slo-tier": 1,
        "tags": ["Usage"],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "items": {
                  "$ref": "#/components/schemas/Event"
                }
              },
              "example": [
                {
                  "transaction_id": "2021-01-01T00:00:00Z_cluster42",
                  "customer_id": "team@example.com",
                  "event_type": "heartbeat",
                  "timestamp": "2021-01-01T00:00:00Z",
                  "properties": {
                    "cluster_id": "42",
                    "cpu_seconds": 60,
                    "region": "Europe"
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/v1/usage/seats": {},
    "/v1/usage/groups": {
      "post": {
        "description": "Fetch aggregated usage data for the specified customer, billable-metric, and optional group, broken into intervals of the specified length.",
        "operationId": "getPagedUsage-v1",
        "summary": "Get usage data with paginated groupings",
        "x-slo-tier": 1,
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          }
        ],
        "requestBody": {
          "description": "The usage query to run",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PagedUsageQueryPayload"
              },
              "example": {
                "customer_id": "04ca7e72-4229-4a6e-ab11-9f7376fccbcb",
                "billable_metric_id": "222796fd-d29c-429e-89b2-549fabda4ed6",
                "starting_on": "2021-01-01T00:00:00Z",
                "ending_before": "2021-01-03T00:00:00Z",
                "window_size": "day",
                "group_by": {
                  "key": "region",
                  "values": ["US-East", "US-West", "EU-Central"]
                }
              }
            }
          }
        },
        "tags": ["Usage"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PagedUsageAggregate"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "starting_on": "2021-01-01T00:00:00Z",
                      "ending_before": "2021-01-02T00:00:00Z",
                      "group_key": null,
                      "group_value": null,
                      "value": 1234
                    },
                    {
                      "starting_on": "2021-01-02T00:00:00Z",
                      "ending_before": "2021-01-03T00:00:00Z",
                      "group_key": "region",
                      "group_value": "US-East",
                      "value": 567
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      }
    },
    "/v1/usage": {
      "post": {
        "description": "Fetch aggregated usage data for multiple customers and billable-metrics, broken into intervals of the specified length.",
        "operationId": "getUsageBatch-v1",
        "summary": "Get batched usage data",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPage"
          }
        ],
        "requestBody": {
          "description": "The usage query to run",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsageBatchQueryPayload"
              },
              "example": {
                "window_size": "day",
                "starting_on": "2021-01-01T00:00:00Z",
                "ending_before": "2021-01-03T00:00:00Z"
              }
            }
          }
        },
        "tags": ["Usage"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UsageBatchAggregate"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "customer_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                      "billable_metric_id": "9570e4f3-d1da-4b95-ba81-bd40ee002727",
                      "billable_metric_name": "CPU hours",
                      "start_timestamp": "2021-01-01T00:00:00Z",
                      "end_timestamp": "2021-01-02T00:00:00Z",
                      "value": 1234
                    },
                    {
                      "customer_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                      "billable_metric_id": "9570e4f3-d1da-4b95-ba81-bd40ee002727",
                      "billable_metric_name": "CPU hours",
                      "start_timestamp": "2021-01-02T00:00:00Z",
                      "end_timestamp": "2021-01-03T00:00:00Z",
                      "value": 1234
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      }
    },
    "/v1/events/search": {
      "post": {
        "description": "For a set of events, look up matched billable metrics and customers by transaction id. This endpoint looks at transactions that occurred in the last 34 days, and is intended for sampling-based testing workflows. It is heavily rate limited.",
        "operationId": "searchEvents-v1",
        "summary": "Search events",
        "tags": ["Usage"],
        "requestBody": {
          "description": "Search events request",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["transactionIds"],
                "properties": {
                  "transactionIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The transaction IDs of the events to retrieve"
                  }
                }
              },
              "example": {
                "transactionIds": ["2021-01-01T00:00:00Z_cluster42"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "transaction_id",
                      "customer_id",
                      "event_type",
                      "timestamp"
                    ],
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "customer_id": {
                        "type": "string",
                        "description": "The ID of the customer in the ingest event body"
                      },
                      "event_type": {
                        "type": "string"
                      },
                      "properties": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "timestamp": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "transaction_id": {
                        "type": "string"
                      },
                      "is_duplicate": {
                        "type": "boolean"
                      },
                      "processed_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "matched_customer": {
                        "type": "object",
                        "description": "The customer the event was matched to if a match was found",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      },
                      "matched_billable_metrics": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/BillableMetricWithDeprecatedFields"
                        }
                      }
                    }
                  }
                },
                "example": [
                  {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "transaction_id": "2021-01-01T00:00:00Z_cluster42",
                    "customer_id": "team@example.com",
                    "event_type": "heartbeat",
                    "timestamp": "2021-01-01T00:00:00Z",
                    "properties": {
                      "cluster_id": "42",
                      "cpu_seconds": 60,
                      "region": "Europe"
                    },
                    "processed_at": "2021-01-01T00:00:05Z",
                    "is_duplicate": false,
                    "matched_customer": {
                      "id": "98765432-10fe-cba9-8765-432109876543",
                      "name": "Acme Corp"
                    },
                    "matched_billable_metrics": [
                      {
                        "id": "8deed800-1b7a-495d-a207-6c52bac54dc9",
                        "name": "CPU Hours"
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/v1/billable-metrics/{billable_metric_id}": {
      "get": {
        "description": "Get a billable metric.",
        "operationId": "getBillableMetric-v1",
        "summary": "Get a billable metric",
        "tags": ["Billable metrics"],
        "parameters": [
          {
            "$ref": "#/components/parameters/BillableMetricId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BillableMetricV1"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "8deed800-1b7a-495d-a207-6c52bac54dc9",
                    "name": "CPU Hours",
                    "event_type_filter": {
                      "in_values": ["cpu_usage"]
                    },
                    "property_filters": [
                      {
                        "name": "cpu_hours",
                        "exists": true
                      },
                      {
                        "name": "region",
                        "exists": true,
                        "in_values": ["EU", "NA"]
                      },
                      {
                        "name": "machine_type",
                        "exists": true,
                        "in_values": ["slow", "fast"]
                      }
                    ],
                    "aggregation_type": "SUM",
                    "aggregation_key": "cpu_hours",
                    "group_keys": [["region"], ["machine_type"]]
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "description": "Updates the name of a billable metric.",
        "operationId": "updateBillableMetric-v1",
        "summary": "Update a billable metric",
        "tags": ["Billable metrics"],
        "parameters": [
          {
            "$ref": "#/components/parameters/BillableMetricId"
          }
        ],
        "requestBody": {
          "description": "The billable metric to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new name of the metric"
                  }
                }
              },
              "example": {
                "name": "CPU hours"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "8deed800-1b7a-495d-a207-6c52bac54dc9"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/billable-metrics": {
      "get": {
        "description": "List all billable metrics.",
        "operationId": "listAllBillableMetrics-v1",
        "summary": "List all billable metrics",
        "tags": ["Billable metrics"],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          },
          {
            "name": "include_archived",
            "in": "query",
            "description": "If true, the list of returned metrics will include archived metrics",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BillableMetricV1"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "name": "data transfer (GB)",
                      "id": "9570e4f3-d1da-4b95-ba81-bd40ee002727",
                      "aggregation_type": "SUM",
                      "aggregation_key": "bytes",
                      "event_type_filter": {
                        "in_values": ["cpu_usage"]
                      },
                      "property_filters": [
                        {
                          "name": "cpu_hours",
                          "exists": true
                        },
                        {
                          "name": "region",
                          "exists": true,
                          "in_values": ["EU", "NA"]
                        },
                        {
                          "name": "machine_type",
                          "exists": true,
                          "in_values": ["slow", "fast"]
                        }
                      ],
                      "group_keys": [["region"], ["machine_type"]],
                      "custom_fields": {
                        "envionment": "production"
                      }
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/setBillableStatus": {},
    "/v1/customers/archive": {
      "post": {
        "description": "Archive a customer Note: any alerts associated with the customer will not be triggered.\n",
        "operationId": "archiveCustomer-v1",
        "summary": "Archive a customer",
        "tags": ["Customers"],
        "requestBody": {
          "description": "The ID of the customer to archive",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Id"
              },
              "example": {
                "id": "8deed800-1b7a-495d-a207-6c52bac54dc9"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "8deed800-1b7a-495d-a207-6c52bac54dc9"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/customers/{customer_id}": {
      "get": {
        "description": "Get a customer by Metronome ID.",
        "operationId": "getCustomer-v1",
        "summary": "Get a customer",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          }
        ],
        "tags": ["Customers"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CustomerDetail"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                    "created_at": "2024-01-01T00:00:00.000Z",
                    "external_id": "team@example.com",
                    "ingest_aliases": ["team@example.com"],
                    "name": "Example, Inc.",
                    "customer_config": {
                      "salesforce_account_id": "0015500001WO1ZiABL"
                    },
                    "custom_fields": {
                      "x_account_id": "KyVnHhSBWl7eY2bl"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customer_id}/billable-metrics": {
      "get": {
        "description": "Get all billable metrics for a given customer.",
        "operationId": "listBillableMetrics-v1",
        "summary": "Get billable metrics for a customer",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          },
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          },
          {
            "name": "on_current_plan",
            "in": "query",
            "description": "If true, the list of metrics will be filtered to just ones that are on the customer's current plan",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "description": "If true, the list of returned metrics will include archived metrics",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": ["Billable metrics"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BillableMetricWithDeprecatedFields"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "name": "data transfer (GB)",
                      "id": "9570e4f3-d1da-4b95-ba81-bd40ee002727",
                      "group_by": ["cluster", "region"],
                      "aggregate": "sum",
                      "aggregate_keys": ["bytes"],
                      "aggregation_type": "SUM",
                      "aggregation_key": "bytes",
                      "event_type_filter": {
                        "in_values": ["cpu_usage"]
                      },
                      "property_filters": [
                        {
                          "name": "cpu_hours",
                          "exists": true
                        },
                        {
                          "name": "region",
                          "exists": true,
                          "in_values": ["EU", "NA"]
                        },
                        {
                          "name": "machine_type",
                          "exists": true,
                          "in_values": ["slow", "fast"]
                        }
                      ],
                      "group_keys": [["region"], ["machine_type"]]
                    },
                    {
                      "name": "CPU hours",
                      "id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                      "aggregation_type": "SUM",
                      "aggregation_key": "bytes",
                      "event_type_filter": {
                        "in_values": ["cpu_usage"]
                      },
                      "property_filters": [
                        {
                          "name": "cpu_hours",
                          "exists": true
                        },
                        {
                          "name": "region",
                          "exists": true,
                          "in_values": ["EU", "NA"]
                        },
                        {
                          "name": "machine_type",
                          "exists": true,
                          "in_values": ["slow", "fast"]
                        }
                      ],
                      "group_keys": [["region"], ["machine_type"]],
                      "archived_at": "2024-10-01T11:23:44Z"
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers": {
      "get": {
        "description": "List all customers.",
        "operationId": "listCustomers-v1",
        "summary": "List customers",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          },
          {
            "in": "query",
            "name": "ingest_alias",
            "description": "Filter the customer list by ingest_alias",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "customer_ids",
            "description": "Filter the customer list by customer_id.  Up to 100 ids can be provided.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "only_archived",
            "description": "Filter the customer list to only return archived customers. By default, only active customers are returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "salesforce_account_ids",
            "description": "Filter the customer list by salesforce_account_id.  Up to 100 ids can be provided.",
            "required": false,
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": ["Customers"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomerDetail"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                      "external_id": "team@example.com",
                      "created_at": "2024-01-01T00:00:00.000Z",
                      "ingest_aliases": ["team@example.com"],
                      "name": "Example, Inc.",
                      "customer_config": {
                        "salesforce_account_id": "0015500001WO1ZiABL"
                      },
                      "custom_fields": {
                        "x_account_id": "KyVnHhSBWl7eY2bl"
                      }
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new customer",
        "operationId": "createCustomer-v1",
        "summary": "Create a customer",
        "tags": ["Customers"],
        "requestBody": {
          "description": "The customer to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LegacyCreateCustomerPayload"
              },
              "example": {
                "ingest_aliases": ["team@example.com"],
                "name": "Example, Inc.",
                "customer_billing_provider_configurations": [
                  {
                    "billing_provider": "stripe",
                    "delivery_method": "direct_to_billing_provider",
                    "configuration": {
                      "stripe_customer_id": "cus_123",
                      "stripe_collection_method": "charge_automatically"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Customer"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                    "external_id": "team@example.com",
                    "ingest_aliases": ["team@example.com"],
                    "name": "Aperture, Inc."
                  }
                }
              }
            }
          },
          "409": {
            "description": "A customer with this ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customer_id}/setIngestAliases": {
      "post": {
        "description": "Sets the ingest aliases for a customer. Ingest aliases can be used in the `customer_id` field when sending usage events to Metronome. This call is idempotent. It fully replaces the set of ingest aliases for the given customer.\n",
        "operationId": "setIngestAliases-v1",
        "summary": "Create or update customer ingest aliases",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          }
        ],
        "tags": ["Customers"],
        "requestBody": {
          "description": "The aliases to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetIngestAliasesPayload"
              },
              "example": {
                "ingest_aliases": ["team@example.com"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/customers/{customer_id}/setName": {
      "post": {
        "description": "Updates the specified customer's name.\n",
        "operationId": "setCustomerName-v1",
        "summary": "Update a customer name",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          }
        ],
        "tags": ["Customers"],
        "requestBody": {
          "description": "The customer name",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCustomerNamePayload"
              },
              "example": {
                "name": "Example, Inc."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Customer"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                    "external_id": "team@example.com",
                    "ingest_aliases": ["team@example.com"],
                    "name": "Example, Inc."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customer_id}/updateConfig": {
      "post": {
        "description": "Updates the specified customer's config.\n",
        "operationId": "updateCustomerConfig-v1",
        "summary": "Update a customer configuration",
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          }
        ],
        "tags": ["Customers"],
        "requestBody": {
          "description": "The configuration for a specific customer",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerConfigPayload"
              },
              "example": {
                "salesforce_account_id": "0015500001WO1ZiABL"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/credits/listEntries": {},
    "/v1/customers/{customer_id}/purchasedSeats": {},
    "/v1/customers/{customer_id}/invoices/invoice_seats": {},
    "/v1/customers/{customer_id}/invoices": {
      "get": {
        "description": "List all invoices for a given customer, optionally filtered by status, date range, and/or credit type.",
        "operationId": "listInvoices-v1",
        "summary": "List invoices",
        "x-slo-tier": 1,
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          },
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          },
          {
            "$ref": "#/components/parameters/InvoiceStatus"
          },
          {
            "$ref": "#/components/parameters/SkipZeroQtyLineItems"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Invoice sort order by issued_at, e.g. date_asc or date_desc.  Defaults to date_asc.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["date_asc", "date_desc"]
            }
          },
          {
            "in": "query",
            "name": "credit_type_id",
            "description": "Only return invoices for the specified credit type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "starting_on",
            "description": "RFC 3339 timestamp (inclusive). Invoices will only be returned for billing periods that start at or after this time.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "RFC 3339 timestamp (exclusive). Invoices will only be returned for billing periods that end before this time.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "tags": ["Invoices"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invoice"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "examples": {
                  "contracts": {
                    "data": [
                      {
                        "$ref": "#/components/examples/ContractInvoiceExample"
                      }
                    ],
                    "next_page": null
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/customers/{customer_id}/invoices/breakdowns": {
      "get": {
        "description": "List daily or hourly invoice breakdowns for a given customer, optionally filtered by status, date range, and/or credit type.\nImportant considerations:\n- If we receive backdated usage after an invoice has been finalized, the backdated usage will be included in the response and usage numbers may differ.",
        "operationId": "listBreakdownInvoices-v1",
        "summary": "List invoice breakdowns",
        "x-slo-tier": 1,
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          },
          {
            "$ref": "#/components/parameters/InvoiceStatusNonVoid"
          },
          {
            "$ref": "#/components/parameters/SkipZeroQtyLineItems"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Max number of results that should be returned. For daily breakdowns, the response can return up to 35 days worth of breakdowns. For hourly breakdowns, the response can return up to 24 hours. If there are more results, a cursor to the next page is returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "window_size",
            "description": "The granularity of the breakdowns to return. Defaults to day.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["hour", "day", "HOUR", "DAY", "Hour", "Day"]
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Invoice sort order by issued_at, e.g. date_asc or date_desc.  Defaults to date_asc.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["date_asc", "date_desc"]
            }
          },
          {
            "in": "query",
            "name": "credit_type_id",
            "description": "Only return invoices for the specified credit type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "starting_on",
            "description": "RFC 3339 timestamp. Breakdowns will only be returned for time windows that start on or after this time.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-01-01T00:00:00Z"
          },
          {
            "in": "query",
            "name": "ending_before",
            "description": "RFC 3339 timestamp. Breakdowns will only be returned for time windows that end on or before this time.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-02-01T00:00:00Z"
          }
        ],
        "tags": ["Invoices"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BreakdownInvoice"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "$ref": "#/components/examples/BreakdownInvoiceExample"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/customers/{customer_id}/invoices/{invoice_id}": {
      "get": {
        "description": "Fetch a specific invoice for a given customer.",
        "operationId": "getInvoice-v1",
        "summary": "Get an invoice",
        "x-slo-tier": 1,
        "parameters": [
          {
            "$ref": "#/components/parameters/CustomerId"
          },
          {
            "$ref": "#/components/parameters/InvoiceId"
          },
          {
            "$ref": "#/components/parameters/SkipZeroQtyLineItems"
          }
        ],
        "tags": ["Invoices"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Invoice"
                    }
                  }
                },
                "examples": {
                  "contracts": {
                    "data": {
                      "$ref": "#/components/examples/ContractInvoiceExample"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/customers/{customer_id}/invoices/spend-breakdowns": {},
    "/v1/invoices/void": {
      "post": {
        "description": "Void an invoice",
        "operationId": "voidInvoice-v1",
        "summary": "Void an invoice",
        "requestBody": {
          "description": "The invoice id to void",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "description": "The invoice id to void",
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "example": {
                "id": "6a37bb88-8538-48c5-b37b-a41c836328bd"
              }
            }
          }
        },
        "tags": ["Invoices"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["id"],
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "6a37bb88-8538-48c5-b37b-a41c836328bd"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/invoices/regenerate": {
      "post": {
        "description": "Regenerate a voided contract invoice",
        "operationId": "regenerateInvoice-v1",
        "summary": "Regenerate an invoice",
        "requestBody": {
          "description": "The invoice id to regenerate",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "description": "The invoice id to regenerate",
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "example": {
                "id": "6a37bb88-8538-48c5-b37b-a41c836328bd"
              }
            }
          }
        },
        "tags": ["Invoices"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["id"],
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "The new invoice id"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "6a37bb88-8538-48c5-b37b-a41c836328bd"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/{customer_id}/costs": {},
    "/v1/setUpBillingProvider": {
      "post": {
        "summary": "Set up account-level billing provider",
        "operationId": "setUpBillingProvider-v1",
        "description": "Set up account-level configuration for a billing provider. Once configured, individual contracts across customers can be mapped to this configuration using the returned `delivery_method_id`.",
        "tags": ["Settings"],
        "requestBody": {
          "description": "Billing provider, delivery method and configuration to insert",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "billing_provider",
                  "delivery_method",
                  "configuration"
                ],
                "properties": {
                  "billing_provider": {
                    "$ref": "#/components/schemas/GABillingProviderType",
                    "description": "The billing provider set for this configuration."
                  },
                  "delivery_method": {
                    "$ref": "#/components/schemas/GABillingProviderDeliveryMethodType",
                    "description": "The method to use for delivering invoices for this configuration."
                  },
                  "configuration": {
                    "type": "object",
                    "additionalProperties": true,
                    "description": "Account-level configuration for the billing provider. The structure of this object is specific to the billing provider and delivery provider combination. See examples below."
                  }
                }
              },
              "examples": {
                "aws": {
                  "billing_provider": "aws_marketplace",
                  "delivery_method": "direct_to_billing_provider",
                  "configuration": {
                    "aws_external_id": "47b4f6b7-e297-42e8-b175-331d933b402c",
                    "aws_iam_role_arn": "arn:aws:iam::test"
                  }
                },
                "azure": {
                  "billing_provider": "azure_marketplace",
                  "delivery_method": "direct_to_billing_provider",
                  "configuration": {
                    "azure_client_id": "client_id",
                    "raw_azure_client_secret": "secret",
                    "azure_tenant_id": "tenant_id"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["delivery_method_id"],
                      "properties": {
                        "delivery_method_id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/upsertAnrokApiToken": {
      "post": {
        "summary": "Upsert Anrok API token",
        "operationId": "upsertAnrokApiToken-v1",
        "description": "Set the Anrok API token for some specified delivery_method_ids, which can be found in the `/listConfiguredBillingProviders` response.",
        "tags": ["Settings"],
        "requestBody": {
          "description": "Set the Anrok API token for some specified delivery_method_ids",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["delivery_method_ids", "anrok_api_token"],
                "properties": {
                  "delivery_method_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "format": "uuid",
                    "description": "The delivery method IDs of the billing provider configurations to update, can be found in the response of the `/listConfiguredBillingProviders` endpoint."
                  },
                  "anrok_api_token": {
                    "type": "string",
                    "description": "The Anrok API token that is added to the configuration."
                  }
                }
              },
              "example": {
                "delivery_method_ids": ["9a906ebb-fbc7-42e8-8e29-53bfd2db3aca"],
                "anrok_api_token": "s123/sak456/secret.789"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["success"],
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "description": "Whether the update was successful."
                        }
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "success": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/rotateDeltaStreamSecret": {},
    "/v1/listConfiguredBillingProviders": {
      "post": {
        "description": "List account-level information for each configured billing provider. Individual contracts across customers can be mapped to these configurations using their `delivery_method_id`.",
        "operationId": "listConfiguredBillingProviders-v1",
        "summary": "List account-level billing providers",
        "tags": ["Settings"],
        "requestBody": {
          "description": "Optional cursor to the next page of results",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "next_page": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "description": "The cursor to the next page of results"
                  }
                }
              },
              "example": {
                "next_page": "af26878a-de62-4a0d-9b77-3936f7c2b6d6"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BillingProviderDeliveryMethod"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "billing_provider": "stripe",
                      "delivery_method_id": "4422e46f-b374-4159-97e3-300208cdb2e2",
                      "delivery_method": "direct_to_billing_provider",
                      "delivery_method_configuration": {
                        "stripe_account_id": "acct_1P6FywIkTQSg6Mm3",
                        "leave_invoices_in_draft": false,
                        "skip_zero_dollar_invoices": false,
                        "export_invoice_sub_line_items": false,
                        "include_zero_quantity_sub_line_items": true,
                        "stripe_invoice_quantity_always_string": false,
                        "set_effective_at_date_to_inclusive_period_end": false
                      }
                    },
                    {
                      "billing_provider": "aws_marketplace",
                      "delivery_method_id": "5b9e3072-415b-4842-94f0-0b6700c8b6be",
                      "delivery_method": "direct_to_billing_provider",
                      "delivery_method_configuration": {
                        "aws_external_id": "47b4f6b7-e297-42e8-b175-331d933b402c",
                        "aws_iam_role_arn": "arn:aws:iam::123456789012:role/MetronomeRole",
                        "aws_region": "us-east-1"
                      }
                    }
                  ],
                  "next_page": null
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/getCustomerBillingProviderConfigurations": {
      "post": {
        "description": "Fetch billing provider configurations for a customer",
        "operationId": "getCustomerBillingProviderConfigurations-v1",
        "summary": "Fetch billing provider configurations for a customer",
        "tags": ["Customers"],
        "requestBody": {
          "description": "The customer id for which to fetch billing provider configurations",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["customer_id"],
                "properties": {
                  "customer_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "example": {
                "customer_id": "6a37bb88-8538-48c5-b37b-a41c836328bd"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomerBillingProviderConfiguration"
                      }
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": "e045c62b-65e7-4e84-a924-3f06f8b621d0",
                      "billing_provider": "stripe",
                      "customer_id": "6a37bb88-8538-48c5-b37b-a41c836328bd",
                      "configuration": {
                        "stripe_customer_id": "cus_SB7Rq5UAkSmrR3",
                        "stripe_collection_method": "charge_automatically"
                      },
                      "delivery_method": "direct_to_billing_provider",
                      "delivery_method_configuration": {
                        "stripe_account_id": "acct_1P6FywIkTQSg6Mm3",
                        "leave_invoices_in_draft": false,
                        "skip_zero_dollar_invoices": false,
                        "export_invoice_sub_line_items": false,
                        "include_zero_quantity_sub_line_items": true,
                        "stripe_invoice_quantity_always_string": false,
                        "set_effective_at_date_to_inclusive_period_end": false
                      },
                      "delivery_method_id": "4422e46f-b374-4159-97e3-300208cdb2e2"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/setCustomerBillingProviderConfigurations": {
      "post": {
        "description": "Insert billing provider configurations for a customer",
        "operationId": "setCustomerBillingProviderConfigurations-v1",
        "summary": "Set billing provider configurations for a customer",
        "tags": ["Customers"],
        "requestBody": {
          "description": "The details of the billing provider configurations to insert",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["data"],
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomerBillingProviderConfigurationInput"
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "customer_id": "4db51251-61de-4bfe-b9ce-495e244f3491",
                    "billing_provider": "stripe",
                    "configuration": {
                      "stripe_customer_id": "cus_1234",
                      "stripe_collection_method": "charge_automatically",
                      "leave_stripe_invoices_in_draft": true
                    },
                    "delivery_method": "direct_to_billing_provider"
                  },
                  {
                    "customer_id": "4db51251-61de-4bfe-b9ce-495e244f3491",
                    "billing_provider": "aws_marketplace",
                    "configuration": {
                      "aws_customer_id": "ABC123ABC12",
                      "aws_product_code": "my_product",
                      "aws_region": "us-west-1"
                    },
                    "delivery_method": "direct_to_billing_provider"
                  },
                  {
                    "customer_id": "4db51251-61de-4bfe-b9ce-495e244f3491",
                    "billing_provider": "azure_marketplace",
                    "configuration": {
                      "azure_subscription_id": "my_subscription"
                    },
                    "delivery_method_id": "5b9e3072-415b-4842-94f0-0b6700c8b6be"
                  },
                  {
                    "customer_id": "4db51251-61de-4bfe-b9ce-495e244f3491",
                    "billing_provider": "aws_marketplace",
                    "configuration": {
                      "aws_customer_id": "ABC123ABC12",
                      "aws_product_code": "my_product",
                      "aws_region": "us-west-1",
                      "aws_is_subscription_product": true
                    },
                    "delivery_method": "direct_to_billing_provider"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dashboards/getEmbeddableUrl": {
      "post": {
        "description": "Retrieve an embeddable dashboard url for a customer.  The dashboard can be embedded using an iframe in a website.  This will show information such as usage data and customer invoices.",
        "operationId": "embeddableDashboard-v1",
        "summary": "Get an embeddable customer dashboard",
        "tags": ["Customers"],
        "requestBody": {
          "description": "The details of the dashboard to retrieve",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddableDashboardPayload"
              },
              "example": {
                "customer_id": "4db51251-61de-4bfe-b9ce-495e244f3491",
                "dashboard": "invoices",
                "dashboard_options": [
                  {
                    "key": "show_zero_usage_line_items",
                    "value": "false"
                  },
                  {
                    "key": "hide_voided_invoices",
                    "value": "true"
                  }
                ],
                "color_overrides": [
                  {
                    "name": "Gray_dark",
                    "value": "#ff0000"
                  }
                ],
                "bm_group_key_overrides": [
                  {
                    "group_key_name": "tenant_id",
                    "display_name": "Org ID",
                    "value_display_names": {
                      "48ecb18f358f": "Cluster EU",
                      "e358f3ce242d": "Cluster APAC"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "url": "https://embeddable-dashboards.metronome.com/customers/invoices/v1?..."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auditLogs": {
      "get": {
        "description": "Retrieves a range of audit logs. If no further audit logs are currently available, the data array will be empty. As new audit logs are created, subsequent requests using the same next_page value will be in the returned data array, ensuring a continuous and uninterrupted reading of audit logs.\n",
        "operationId": "getAuditLogs-v1",
        "summary": "Get audit logs",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          },
          {
            "name": "starting_on",
            "in": "query",
            "description": "RFC 3339 timestamp of the earliest audit log to return. Cannot be used with 'next_page'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "description": "RFC 3339 timestamp (exclusive). Cannot be used with 'next_page'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order by timestamp, e.g. date_asc or date_desc. Defaults to date_asc.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["date_asc", "date_desc"]
            }
          },
          {
            "name": "resource_id",
            "in": "query",
            "description": "Optional parameter that can be used to filter which audit logs are returned. If you specify resource_id, you must also specify resource_type.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resource_type",
            "in": "query",
            "description": "Optional parameter that can be used to filter which audit logs are returned. If you specify resource_type, you must also specify resource_id.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["Security"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AuditLog"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "description": "The next_page parameter is always returned to support ongoing log retrieval. It enables continuous querying, even when some requests return no new data. Save the next_page token from each response and use it for future requests to ensure no logs are missed. This setup is ideal for regular updates via automated processes, like cron jobs, to fetch logs continuously as they become available. When you receive an empty data array, it indicates a temporary absence of new logs, but subsequent requests might return new data.",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/services": {
      "get": {
        "description": "Fetches a list of services used by Metronome and the associated IP addresses. IP addresses are not necessarily unique between services. In most cases, IP addresses will appear in the list at least 30 days before they are used for the first time.\n",
        "operationId": "getServices-v1",
        "summary": "Get services",
        "tags": ["Security"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["services"],
                  "properties": {
                    "services": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Service"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/customFields/addKey": {
      "post": {
        "description": "Add a key to the allow list for a given entity. There is a 100 character limit on custom field keys.\n",
        "operationId": "addCustomFieldKey-v1",
        "summary": "Create a custom field key",
        "tags": ["Custom fields"],
        "requestBody": {
          "description": "Add a key to the allow list for an entity",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["entity", "key", "enforce_uniqueness"],
                "properties": {
                  "entity": {
                    "$ref": "#/components/schemas/ManagedEntity"
                  },
                  "key": {
                    "type": "string"
                  },
                  "enforce_uniqueness": {
                    "type": "boolean"
                  }
                }
              },
              "example": {
                "entity": "customer",
                "key": "x_account_id",
                "enforce_uniqueness": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/customFields/removeKey": {
      "post": {
        "description": "Remove a key from the allow list for a given entity.\n",
        "operationId": "disableCustomFieldKey-v1",
        "summary": "Delete a custom field key",
        "tags": ["Custom fields"],
        "requestBody": {
          "description": "Remove a key from the allow list for an entity",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["entity", "key"],
                "properties": {
                  "entity": {
                    "$ref": "#/components/schemas/ManagedEntity"
                  },
                  "key": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "entity": "customer",
                "key": "x_account_id"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/customFields/setValues": {
      "post": {
        "description": "Sets one or more custom fields on an instance of a Metronome entity. If a key/value pair passed in this request matches one already set on the entity, its value will be overwritten. Any key/value pairs that exist on the entity that do not match those passed in this request will remain untouched. This endpoint is transactional and will update all key/value pairs or no key/value pairs. Partial updates are not supported. There is a 200 character limit on custom field values.\n",
        "operationId": "setCustomFields-v1",
        "summary": "Set custom field values",
        "tags": ["Custom fields"],
        "requestBody": {
          "description": "The custom field values to set",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["entity", "entity_id", "custom_fields"],
                "properties": {
                  "entity": {
                    "$ref": "#/components/schemas/ManagedEntity"
                  },
                  "entity_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "custom_fields": {
                    "$ref": "#/components/schemas/CustomField"
                  }
                }
              },
              "example": {
                "entity": "customer",
                "entity_id": "99594816-e8a5-4bca-be21-8d1de0f45120",
                "custom_fields": {
                  "x_account_id": "KyVnHhSBWl7eY2bl"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/customFields/deleteValues": {
      "post": {
        "description": "Deletes one or more custom fields on an instance of a Metronome entity.\n",
        "operationId": "deleteCustomFields-v1",
        "summary": "Delete custom fields",
        "tags": ["Custom fields"],
        "requestBody": {
          "description": "Delete one or more custom fields",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["entity", "entity_id", "keys"],
                "properties": {
                  "entity": {
                    "$ref": "#/components/schemas/ManagedEntity"
                  },
                  "entity_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": {
                "entity": "customer",
                "entity_id": "99594816-e8a5-4bca-be21-8d1de0f45120",
                "keys": ["x_account_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/customFields/listKeys": {
      "post": {
        "description": "List all active custom field keys, optionally filtered by entity type.\n",
        "operationId": "listCustomFieldKeys-v1",
        "summary": "List custom field keys",
        "parameters": [
          {
            "$ref": "#/components/parameters/NextPage"
          }
        ],
        "tags": ["Custom fields"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "entities": {
                    "type": "array",
                    "description": "Optional list of entity types to return keys for",
                    "items": {
                      "$ref": "#/components/schemas/ManagedEntity"
                    }
                  }
                }
              },
              "example": {
                "entities": ["customer"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["entity", "key", "enforce_uniqueness"],
                        "properties": {
                          "entity": {
                            "$ref": "#/components/schemas/ManagedEntity"
                          },
                          "key": {
                            "type": "string"
                          },
                          "enforce_uniqueness": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "entity": "customer",
                      "key": "x_account_id",
                      "enforce_uniqueness": true
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      }
    },
    "/v1/contract-pricing/products/get": {
      "post": {
        "description": "Get a specific product\n",
        "operationId": "getProduct-v1",
        "summary": "Get a product",
        "tags": ["Products"],
        "requestBody": {
          "description": "The ID of the product to get",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Id"
              },
              "example": {
                "id": "d84e7f4e-7a70-4fe4-be02-7a5027beffcc"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ProductListItem"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "9c9a4a71-171e-41f9-b8da-d982baf1a388",
                    "type": "COMPOSITE",
                    "initial": {
                      "name": "My Composite Product",
                      "starting_at": "2020-01-01T00:00:00.000Z",
                      "composite_product_ids": [
                        "e5e40bc7-ef69-42ec-a77e-cd696f6bfa3d"
                      ],
                      "created_at": "2019-12-30T04:24:55.123Z",
                      "created_by": "Bob"
                    },
                    "current": {
                      "name": "My Updated Composite Product Name",
                      "starting_at": "2020-01-01T00:00:00.000Z",
                      "composite_product_ids": [
                        "e5e40bc7-ef69-42ec-a77e-cd696f6bfa3d"
                      ],
                      "created_at": "2019-12-30T04:24:55.123Z",
                      "created_by": "Bob"
                    },
                    "updates": [
                      {
                        "name": "My Updated Composite Product Name",
                        "starting_at": "2020-02-01T00:00:00.000Z",
                        "created_at": "2019-12-30T09:24:55.123Z",
                        "created_by": "Alice"
                      }
                    ],
                    "custom_fields": {
                      "x_account_id": "KyVnHhSBWl7eY2bl"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contract-pricing/products/list": {
      "post": {
        "description": "List products\n",
        "operationId": "listProducts-v1",
        "summary": "List products",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          }
        ],
        "tags": ["Products"],
        "requestBody": {
          "description": "Get list of products",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListProductsPayload"
              },
              "example": {
                "archive_filter": "NOT_ARCHIVED"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductListItem"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": "9c9a4a71-171e-41f9-b8da-d982baf1a388",
                      "type": "COMPOSITE",
                      "archived_at": null,
                      "initial": {
                        "name": "My Composite Product",
                        "starting_at": "2020-01-01T00:00:00.000Z",
                        "composite_product_ids": [
                          "e5e40bc7-ef69-42ec-a77e-cd696f6bfa3d"
                        ],
                        "created_at": "2019-12-30T04:24:55.123Z",
                        "created_by": "Bob"
                      },
                      "current": {
                        "name": "My Updated Composite Product Name",
                        "starting_at": "2020-01-01T00:00:00.000Z",
                        "composite_product_ids": [
                          "e5e40bc7-ef69-42ec-a77e-cd696f6bfa3d"
                        ],
                        "created_at": "2019-12-30T04:24:55.123Z",
                        "created_by": "Bob"
                      },
                      "updates": [
                        {
                          "name": "My Updated Composite Product Name",
                          "starting_at": "2020-02-01T00:00:00.000Z",
                          "created_at": "2019-12-30T09:24:55.123Z",
                          "created_by": "Alice"
                        }
                      ],
                      "custom_fields": {
                        "x_account_id": "KyVnHhSBWl7eY2bl"
                      }
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      }
    },
    "/v1/contract-pricing/products/create": {
      "post": {
        "description": "Create a new product\n",
        "operationId": "createProduct-v1",
        "summary": "Create a product",
        "tags": ["Products"],
        "requestBody": {
          "description": "Create a new product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductListItemPayload"
              },
              "example": {
                "name": "My Product",
                "type": "USAGE",
                "billable_metric_id": "13117714-3f05-48e5-a6e9-a66093f13b4d"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contract-pricing/products/update": {
      "post": {
        "description": "Update a product\n",
        "operationId": "updateProduct-v1",
        "summary": "Update a product",
        "tags": ["Products"],
        "requestBody": {
          "description": "Update a product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductListItemPayload"
              },
              "example": {
                "product_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "name": "My Updated Product",
                "starting_at": "2020-01-01T00:00:00.000Z"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contract-pricing/products/archive": {
      "post": {
        "description": "Archive a product\n",
        "operationId": "archiveProductListItem-v1",
        "summary": "Archive a product",
        "tags": ["Products"],
        "requestBody": {
          "description": "Archive a product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveProductListItemPayload"
              },
              "example": {
                "product_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contract-pricing/rate-cards/getRateSchedule": {
      "post": {
        "description": "Get all rates for a rate card from starting_at (either in perpetuity or until ending_before, if provided)\n",
        "operationId": "getRateSchedule-v1",
        "summary": "Get a rate schedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          }
        ],
        "tags": ["Rate cards"],
        "requestBody": {
          "description": "Rate schedule filter options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetRateSchedulePayload"
              },
              "example": {
                "rate_card_id": "f3d51ae8-f283-44e1-9933-a3cf9ad7a6fe",
                "starting_at": "2024-01-01T00:00:00.000Z",
                "selectors": [
                  {
                    "product_id": "d6300dbb-882e-4d2d-8dec-5125d16b65d0",
                    "partial_pricing_group_values": {
                      "region": "us-west-2",
                      "cloud": "aws"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RateSchedule"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/contract-pricing/rate-cards/getRates": {
      "post": {
        "description": "Get all rates for a rate card at a point in time\n",
        "operationId": "getRates-v1",
        "summary": "Get rates",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          }
        ],
        "tags": ["Rate cards"],
        "requestBody": {
          "description": "Rate schedule filter options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetRatesPayload"
              },
              "example": {
                "rate_card_id": "f3d51ae8-f283-44e1-9933-a3cf9ad7a6fe",
                "at": "2024-01-01T00:00:00.000Z",
                "selectors": [
                  {
                    "product_id": "d6300dbb-882e-4d2d-8dec-5125d16b65d0",
                    "partial_pricing_group_values": {
                      "region": "us-west-2",
                      "cloud": "aws"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RateSchedule"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/contract-pricing/rate-cards/get": {
      "post": {
        "description": "Get a specific rate card NOTE: Use `/contract-pricing/rate-cards/getRates` to retrieve rate card rates.\n",
        "operationId": "getRateCard-v1",
        "summary": "Get a rate card",
        "tags": ["Rate cards"],
        "requestBody": {
          "description": "The ID of the rate card to get",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Id"
              },
              "example": {
                "id": "f3d51ae8-f283-44e1-9933-a3cf9ad7a6fe"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/RateCard"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                    "name": "Test rate card",
                    "description": "Test rate card description",
                    "fiat_credit_type": {
                      "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                      "name": "USD (cents)"
                    },
                    "created_at": "2019-12-30T04:24:55.123Z",
                    "created_by": "Bob",
                    "aliases": [
                      {
                        "name": "test-rate-card"
                      }
                    ],
                    "custom_fields": {
                      "x_account_id": "KyVnHhSBWl7eY2bl"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contract-pricing/rate-cards/list": {
      "post": {
        "description": "List rate cards NOTE: Use `/contract-pricing/rate-cards/getRates` to retrieve rate card rates.\n",
        "operationId": "listRateCards-v1",
        "summary": "List rate cards",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          }
        ],
        "tags": ["Rate cards"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              },
              "example": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RateCard"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                      "name": "Test rate card",
                      "description": "Test rate card description",
                      "fiat_credit_type": {
                        "id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                        "name": "USD (cents)"
                      },
                      "created_at": "2019-12-30T04:24:55.123Z",
                      "created_by": "Bob",
                      "aliases": [],
                      "custom_fields": {
                        "x_account_id": "KyVnHhSBWl7eY2bl"
                      }
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      }
    },
    "/v1/contract-pricing/rate-cards/create": {
      "post": {
        "description": "Create a new rate card\n",
        "operationId": "createRateCard-v1",
        "summary": "Create a rate card",
        "tags": ["Rate cards"],
        "requestBody": {
          "description": "Create a new rate card",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRateCardPayload"
              },
              "example": {
                "name": "My Rate Card",
                "description": "My Rate Card Description",
                "fiat_credit_type_id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                "credit_type_conversions": [
                  {
                    "custom_credit_type_id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                    "fiat_per_custom_credit": 2
                  }
                ],
                "aliases": [
                  {
                    "name": "my-rate-card"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contract-pricing/rate-cards/update": {
      "post": {
        "description": "Update a rate card\n",
        "operationId": "updateRateCard-v1",
        "summary": "Update a rate card",
        "tags": ["Rate cards"],
        "requestBody": {
          "description": "Update a rate card. Must provide at least one of name or description.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRateCardPayload"
              },
              "example": {
                "rate_card_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "name": "My Updated Rate Card",
                "description": "My Updated Rate Card Description"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contract-pricing/rate-cards/archive": {
      "post": {
        "description": "Archive a rate card\n",
        "operationId": "archiveRateCard-v1",
        "summary": "Archive a rate card",
        "tags": ["Rate cards"],
        "requestBody": {
          "description": "The ID of the rate card to archive",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Id"
              },
              "example": {
                "id": "12b21470-4570-40df-8998-449d0b0bc52f"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contract-pricing/rate-cards/addRate": {
      "post": {
        "description": "Add a new rate\n",
        "operationId": "addRate-v1",
        "summary": "Add a rate",
        "tags": ["Rate cards"],
        "requestBody": {
          "description": "Add a new rate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRatePayload"
              },
              "example": {
                "rate_card_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "product_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "starting_at": "2020-01-01T00:00:00.000Z",
                "entitled": true,
                "rate_type": "FLAT",
                "price": 100,
                "credit_type_id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/RateWithCommitRate"
                    }
                  }
                },
                "example": {
                  "data": {
                    "rate_type": "FLAT",
                    "price": 100
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contract-pricing/rate-cards/addRates": {
      "post": {
        "description": "Add new rates\n",
        "operationId": "addRates-v1",
        "summary": "Add rates",
        "tags": ["Rate cards"],
        "requestBody": {
          "description": "Add new rates",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["rate_card_id", "rates"],
                "properties": {
                  "rate_card_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "rates": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RatePayload"
                    }
                  }
                }
              },
              "example": {
                "rate_card_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "rates": [
                  {
                    "product_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                    "starting_at": "2020-01-01T00:00:00.000Z",
                    "entitled": true,
                    "rate_type": "FLAT",
                    "price": 100,
                    "pricing_group_values": {
                      "region": "us-west-2",
                      "cloud": "aws"
                    }
                  },
                  {
                    "product_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                    "starting_at": "2020-01-01T00:00:00.000Z",
                    "entitled": true,
                    "rate_type": "FLAT",
                    "price": 120,
                    "pricing_group_values": {
                      "region": "us-east-2",
                      "cloud": "aws"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id",
                      "description": "The ID of the rate card to which the rates were added."
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contract-pricing/rate-cards/setRateCardProductsOrder": {
      "post": {
        "description": "Sets the ordering of products within a rate card\n",
        "operationId": "setRateCardProductsOrder-v1",
        "summary": "Set the rate card products order",
        "tags": ["Rate cards"],
        "requestBody": {
          "description": "New rate card product ordering",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetRateCardProductsOrderPayload"
              },
              "example": {
                "rate_card_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "product_order": [
                  "13117714-3f05-48e5-a6e9-a66093f13b4d",
                  "b086f2f4-9851-4466-9ca0-30d53e6a42ac"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contract-pricing/rate-cards/moveRateCardProducts": {
      "post": {
        "description": "Updates ordering of specified products\n",
        "operationId": "moveRateCardProducts-v1",
        "summary": "Update the rate card products order",
        "tags": ["Rate cards"],
        "requestBody": {
          "description": "New rate card product ordering",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveRateCardProductsPayload"
              },
              "example": {
                "rate_card_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "product_moves": [
                  {
                    "product_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                    "position": 0
                  },
                  {
                    "product_id": "b086f2f4-9851-4466-9ca0-30d53e6a42ac",
                    "position": 1
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/get": {
      "post": {
        "description": "This is the v1 endpoint to get a contract. New clients should implement using the v2 endpoint.\n",
        "operationId": "getContract-v1",
        "summary": "Get a contract (v1)",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "Contract and customer IDs",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["customer_id", "contract_id"],
                "properties": {
                  "customer_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "contract_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "include_ledgers": {
                    "type": "boolean",
                    "description": "Include commit ledgers in the response. Setting this flag may cause the query to be slower."
                  },
                  "include_balance": {
                    "type": "boolean",
                    "description": "Include the balance of credits and commits in the response. Setting this flag may cause the query to be slower."
                  }
                }
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Contract"
                    }
                  }
                },
                "example": {
                  "data": {
                    "$ref": "#/components/examples/ContractExample"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/list": {
      "post": {
        "description": "This is the v1 endpoint to list all contracts for a customer. New clients should implement using the v2 endpoint.",
        "operationId": "listContracts-v1",
        "summary": "List customer contracts (v1)",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "List all contracts for a customer",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["customer_id"],
                "properties": {
                  "customer_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "include_ledgers": {
                    "type": "boolean",
                    "description": "Include commit ledgers in the response. Setting this flag may cause the query to be slower."
                  },
                  "include_balance": {
                    "type": "boolean",
                    "description": "Include the balance of credits and commits in the response. Setting this flag may cause the query to be slower."
                  },
                  "include_archived": {
                    "type": "boolean",
                    "description": "Include archived contracts in the response"
                  },
                  "starting_at": {
                    "description": "Optional RFC 3339 timestamp. If provided, the response will include only contracts where effective_at is on or after the provided date.  This cannot be provided if the covering_date filter is provided.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "covering_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional RFC 3339 timestamp. If provided, the response will include only contracts effective on the provided date.  This cannot be provided if the starting_at filter is provided."
                  }
                }
              },
              "example": {
                "customer_id": "9b85c1c1-5238-4f2a-a409-61412905e1e1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contract"
                      }
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "$ref": "#/components/examples/ContractExample"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/create": {
      "post": {
        "description": "Create a new contract\n",
        "operationId": "createContract-v1",
        "summary": "Create a contract",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "Create a new contract",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContractPayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "rate_card_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "starting_at": "2020-01-01T00:00:00.000Z",
                "billing_provider_configuration": {
                  "billing_provider": "stripe",
                  "delivery_method": "direct_to_billing_provider"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/amend": {
      "post": {
        "description": "Amendments will be replaced by Contract editing. New clients should implement using the editContract endpoint. Read more about the migration to contract editing [here](https://docs.metronome.com/migrate-amendments-to-edits/) and reach out to your Metronome representative for more details. Once contract editing is enabled, access to this endpoint will be removed.\n",
        "operationId": "amendContract-v1",
        "summary": "Amend a contract",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "Amend a contract",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AmendContractPayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "starting_at": "2020-01-01T00:00:00.000Z"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/archive": {
      "post": {
        "description": "Archive a contract",
        "operationId": "archiveContract-v1",
        "summary": "Archive a contract",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "Archive a contract",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveContractPayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "void_invoices": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "8deed800-1b7a-495d-a207-6c52bac54dc9"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/setUsageFilter": {
      "post": {
        "description": "Set usage filter for a contract\n",
        "operationId": "setUsageFilter-v1",
        "summary": "Set a contract usage filter",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "Set usage filter for contract",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUsageFilterPayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "group_key": "business_subscription_id",
                "group_values": ["ID-1", "ID-2"],
                "starting_at": "2020-01-01T00:00:00.000Z"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/addManualBalanceLedgerEntry": {
      "post": {
        "description": "Add a manual balance entry\n",
        "operationId": "addManualBalanceLedgerEntry-v1",
        "summary": "Add a manual balance entry",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "Add a manual ledger entry to a balance",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddManualBalanceLedgerEntryPayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "id": "6162d87b-e5db-4a33-b7f2-76ce6ead4e85",
                "segment_id": "66368e29-3f97-4d15-a6e9-120897f0070a",
                "amount": -1000,
                "reason": "Reason for entry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/updateInvoiceIssueDate": {
      "post": {
        "description": "Update the issue date of a scheduled contract invoice. Using this endpoint will not update the invoice schedule of the scheduled charge or commit. Use the \"edit contract\" or \"edit commit\" endpoints to update both the invoice issue date and the invoice schedule on the object.\n",
        "operationId": "updateInvoiceIssueDate-v1",
        "summary": "Update invoice issue date",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "The invoice_id and new issue_date",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInvoiceIssueDatePayload"
              },
              "example": {
                "invoice_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "issue_date": "2020-01-01T00:00:00.000Z"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/updateEndDate": {
      "post": {
        "description": "Update the end date of a contract\n",
        "operationId": "updateContractEndDate-v1",
        "summary": "Update the contract end date",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "Update the end date of a contract",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContractEndDatePayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "ending_before": "2020-01-01T00:00:00.000Z"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/getContractRateSchedule": {
      "post": {
        "description": "Get the rate schedule for the rate card on a given contract.\n",
        "operationId": "getContractRateSchedule-v1",
        "summary": "Get the rate schedule for a contract",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/NextPage"
          }
        ],
        "tags": ["Contracts"],
        "requestBody": {
          "description": "Contract rate schedule filter options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetContractRateSchedulePayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "at": "2020-01-01T00:00:00.000Z",
                "selectors": [
                  {
                    "product_id": "d6300dbb-882e-4d2d-8dec-5125d16b65d0",
                    "partial_pricing_group_values": {
                      "region": "us-west-2",
                      "cloud": "aws"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContractRateSchedule"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/contracts/getSubscriptionQuantityHistory": {
      "post": {
        "description": "Fetch the quantity and price for a subscription over time. End-point does not return future scheduled changes.",
        "summary": "Get subscription quantity history",
        "operationId": "getSubscriptionQuantityHistory-v1",
        "tags": ["Contracts"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["customer_id", "contract_id", "subscription_id"],
                "properties": {
                  "customer_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "contract_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "subscription_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "subscription_id": "1a824d53-bde6-4d82-96d7-6347ff227d5c"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SubscriptionQuantityHistory"
                    }
                  }
                },
                "example": {
                  "data": {
                    "$ref": "#/components/examples/SubscriptionQuantityHistoryExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ContractNotFound",
                        "CustomerNotFound",
                        "SubscriptionNotFound"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/contracts/customerCommits/list": {
      "post": {
        "description": "List commits.\n",
        "operationId": "listCustomerCommits-v1",
        "summary": "List commits",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "List all commits for a customer",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["customer_id"],
                "properties": {
                  "customer_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "commit_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "covering_date": {
                    "description": "Include only commits that have access schedules that \"cover\" the provided date",
                    "type": "string",
                    "format": "date-time"
                  },
                  "starting_at": {
                    "description": "Include only commits that have any access on or after the provided date",
                    "type": "string",
                    "format": "date-time"
                  },
                  "effective_before": {
                    "description": "Include only commits that have any access before the provided date (exclusive)",
                    "type": "string",
                    "format": "date-time"
                  },
                  "include_contract_commits": {
                    "type": "boolean",
                    "description": "Include commits on the contract level."
                  },
                  "include_archived": {
                    "type": "boolean",
                    "description": "Include archived commits and commits from archived contracts."
                  },
                  "include_ledgers": {
                    "type": "boolean",
                    "description": "Include commit ledgers in the response. Setting this flag may cause the query to be slower."
                  },
                  "include_balance": {
                    "type": "boolean",
                    "description": "Include the balance in the response. Setting this flag may cause the query to be slower."
                  },
                  "next_page": {
                    "type": "string",
                    "description": "The next page token from a previous response."
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 25,
                    "default": 25,
                    "description": "The maximum number of commits to return. Defaults to 25."
                  }
                }
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "commit_id": "6162d87b-e5db-4a33-b7f2-76ce6ead4e85",
                "include_ledgers": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Commit"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "$ref": "#/components/examples/CommitExample"
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      }
    },
    "/v1/contracts/customerCommits/create": {
      "post": {
        "description": "Create a new commit at the customer level.\n",
        "operationId": "createCustomerCommit-v1",
        "summary": "Create a commit",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "Create a commit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerCommitPayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "type": "prepaid",
                "name": "My Commit",
                "priority": 100,
                "product_id": "f14d6729-6a44-4b13-9908-9387f1918790",
                "invoice_contract_id": "e57d6929-c2f1-4796-a9a8-63cedefe848d",
                "access_schedule": {
                  "credit_type_id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                  "schedule_items": [
                    {
                      "amount": 1000,
                      "starting_at": "2020-01-01T00:00:00.000Z",
                      "ending_before": "2020-02-01T00:00:00.000Z"
                    }
                  ]
                },
                "invoice_schedule": {
                  "credit_type_id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                  "schedule_items": [
                    {
                      "unit_price": 10000000,
                      "quantity": 1,
                      "timestamp": "2020-03-01T00:00:00.000Z"
                    }
                  ],
                  "do_not_invoice": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "6162d87b-e5db-4a33-b7f2-76ce6ead4e85"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/customerCommits/updateEndDate": {
      "post": {
        "description": "Pull forward the end date of a prepaid commit. Use the \"edit a commit\" endpoint to extend the end date of a prepaid commit, or to make other edits to the commit.\n",
        "operationId": "updateCommitEndDate-v1",
        "summary": "Update the commit end date",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "Update the access or invoice end date of a commit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCommitEndDatePayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "commit_id": "6162d87b-e5db-4a33-b7f2-76ce6ead4e85",
                "access_ending_before": "2020-01-01T00:00:00.000Z",
                "invoices_ending_before": "2020-01-01T00:00:00.000Z"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "6162d87b-e5db-4a33-b7f2-76ce6ead4e85"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/commits/threshold-billing/release": {
      "post": {
        "description": "When using an external payment provider to gate a threshold commit, use this end-point to either release or cancel the commit based on the outcome of the payment.\n",
        "operationId": "releaseExternalPaymentGateThresholdCommit-v1",
        "summary": "Release external payment gate threshold commit",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "Information to identify the workflow that is in progress to release the commit, and what action we should take to complete the workflow.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalPaymentGateThresholdCommitPayload"
              },
              "example": {
                "workflow_id": "5576ba1f-4a33-b473-3f05-6162d87b4a33",
                "outcome": "paid"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/contracts/commits/disableTrueup": {
      "post": {
        "description": "Disable trueup invoice for a POSTPAID commit\n",
        "operationId": "disableCommitTrueup-v1",
        "summary": "Disable trueup for commit",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "Information to identify the commit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableCommitTrueupPayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "commit_id": "6162d87b-e5db-4a33-b7f2-76ce6ead4e85",
                "contract_id": "7526bacf-f08a-47af-b473-bc57b88890e1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "6162d87b-e5db-4a33-b7f2-76ce6ead4e85"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/customerCredits/list": {
      "post": {
        "description": "List credits.\n",
        "operationId": "listCustomerCredits-v1",
        "summary": "List credits",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "List all credits for a customer",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["customer_id"],
                "properties": {
                  "customer_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "credit_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "covering_date": {
                    "description": "Return only credits that have access schedules that \"cover\" the provided date",
                    "type": "string",
                    "format": "date-time"
                  },
                  "starting_at": {
                    "description": "Include only credits that have any access on or after the provided date",
                    "type": "string",
                    "format": "date-time"
                  },
                  "effective_before": {
                    "description": "Include only credits that have any access before the provided date (exclusive)",
                    "type": "string",
                    "format": "date-time"
                  },
                  "include_contract_credits": {
                    "type": "boolean",
                    "description": "Include credits on the contract level."
                  },
                  "include_archived": {
                    "type": "boolean",
                    "description": "Include archived credits and credits from archived contracts."
                  },
                  "include_ledgers": {
                    "type": "boolean",
                    "description": "Include credit ledgers in the response. Setting this flag may cause the query to be slower."
                  },
                  "include_balance": {
                    "type": "boolean",
                    "description": "Include the balance in the response. Setting this flag may cause the query to be slower."
                  },
                  "next_page": {
                    "type": "string",
                    "description": "The next page token from a previous response."
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 25,
                    "default": 25,
                    "description": "The maximum number of commits to return. Defaults to 25."
                  }
                }
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "credit_id": "6162d87b-e5db-4a33-b7f2-76ce6ead4e85",
                "include_ledgers": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Credit"
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "$ref": "#/components/examples/CreditExample"
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      }
    },
    "/v1/contracts/customerCredits/create": {
      "post": {
        "description": "Create a new credit at the customer level.\n",
        "operationId": "createCustomerCredit-v1",
        "summary": "Create a credit",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "Create a credit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerCreditPayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "name": "My Credit",
                "priority": 100,
                "product_id": "f14d6729-6a44-4b13-9908-9387f1918790",
                "access_schedule": {
                  "credit_type_id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                  "schedule_items": [
                    {
                      "amount": 1000,
                      "starting_at": "2020-01-01T00:00:00.000Z",
                      "ending_before": "2020-02-01T00:00:00.000Z"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "6162d87b-e5db-4a33-b7f2-76ce6ead4e85"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/customerCredits/updateEndDate": {
      "post": {
        "description": "Pull forward the end date of a credit. Use the \"edit a credit\" endpoint to extend the end date of a credit, or to make other edits to the credit.\n",
        "operationId": "updateCreditEndDate-v1",
        "summary": "Update the credit end date",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "Update the access end date of a credit",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCreditEndDatePayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "credit_id": "6162d87b-e5db-4a33-b7f2-76ce6ead4e85",
                "access_ending_before": "2020-01-01T00:00:00.000Z"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "6162d87b-e5db-4a33-b7f2-76ce6ead4e85"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/contracts/customerBalances/list": {
      "post": {
        "description": "List balances (commits and credits).\n",
        "operationId": "listCustomerBalances-v1",
        "summary": "List balances",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "List all balances (commits and credits) for a customer",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["customer_id"],
                "properties": {
                  "customer_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "covering_date": {
                    "description": "Return only balances that have access schedules that \"cover\" the provided date",
                    "type": "string",
                    "format": "date-time"
                  },
                  "starting_at": {
                    "description": "Include only balances that have any access on or after the provided date",
                    "type": "string",
                    "format": "date-time"
                  },
                  "effective_before": {
                    "description": "Include only balances that have any access before the provided date (exclusive)",
                    "type": "string",
                    "format": "date-time"
                  },
                  "include_contract_balances": {
                    "type": "boolean",
                    "description": "Include balances on the contract level."
                  },
                  "include_archived": {
                    "type": "boolean",
                    "description": "Include archived credits and credits from archived contracts."
                  },
                  "include_ledgers": {
                    "type": "boolean",
                    "description": "Include ledgers in the response. Setting this flag may cause the query to be slower."
                  },
                  "include_balance": {
                    "type": "boolean",
                    "description": "Include the balance of credits and commits in the response. Setting this flag may cause the query to be slower."
                  },
                  "next_page": {
                    "type": "string",
                    "description": "The next page token from a previous response."
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 25,
                    "default": 25,
                    "description": "The maximum number of commits to return. Defaults to 25."
                  }
                }
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "id": "6162d87b-e5db-4a33-b7f2-76ce6ead4e85",
                "include_ledgers": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "next_page"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/Commit"
                          },
                          {
                            "$ref": "#/components/schemas/Credit"
                          }
                        ]
                      }
                    },
                    "next_page": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "$ref": "#/components/examples/CommitExample"
                    },
                    {
                      "$ref": "#/components/examples/CreditExample"
                    }
                  ],
                  "next_page": null
                }
              }
            }
          }
        }
      }
    },
    "/v1/contracts/createHistoricalInvoices": {
      "post": {
        "description": "Creates historical usage invoices for a contract",
        "operationId": "createHistoricalContractUsageInvoices-v1",
        "summary": "Create historical invoices",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "Create a historical usage invoice for a contract",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHistoricalContractUsageInvoiceRequestPayload"
              },
              "example": {
                "invoices": [
                  {
                    "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                    "contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                    "credit_type_id": "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
                    "inclusive_start_date": "2020-01-01T00:00:00.000Z",
                    "exclusive_end_date": "2020-02-01T00:00:00.000Z",
                    "issue_date": "2020-02-01T00:00:00.000Z",
                    "usage_line_items": [
                      {
                        "product_id": "f14d6729-6a44-4b13-9908-9387f1918790",
                        "inclusive_start_date": "2020-01-01T00:00:00.000Z",
                        "exclusive_end_date": "2020-02-01T00:00:00.000Z",
                        "quantity": 100
                      }
                    ]
                  }
                ],
                "preview": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/Invoice"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threshold-billing/update-active-recharge-config": {},
    "/v2/contracts/get": {
      "post": {
        "description": "Get a specific contract. New clients should use this endpoint rather than the v1 endpoint.\n",
        "operationId": "getContract-v2",
        "summary": "Get a contract (v2)",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "Contract and customer IDs",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["customer_id", "contract_id"],
                "properties": {
                  "customer_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "contract_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "include_ledgers": {
                    "type": "boolean",
                    "description": "Include commit/credit ledgers in the response. Setting this flag may cause the query to be slower. Cannot be used with as_of_date parameter."
                  },
                  "as_of_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional RFC 3339 timestamp. Return the contract as of this date. Cannot be used with include_ledgers parameter."
                  },
                  "include_balance": {
                    "type": "boolean",
                    "description": "Include the balance of credits and commits in the response. Setting this flag may cause the query to be slower."
                  }
                }
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ContractV2"
                    }
                  }
                },
                "example": {
                  "data": {
                    "$ref": "#/components/examples/ContractExampleV2"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["CustomerNotFound", "ContractNotFound"]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/contracts/getEditHistory": {
      "post": {
        "description": "Get the edit history of a specific contract. Contract editing must be enabled to use this endpoint.",
        "summary": "Get contract edit history",
        "operationId": "getContractEditHistory-v2",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "Contract ID",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["customer_id", "contract_id"],
                "properties": {
                  "customer_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "contract_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContractEdit"
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "$ref": "#/components/examples/ContractEditExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["ContractNotFound", "CustomerNotFound"]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/contracts/list": {
      "post": {
        "description": "List all contracts for a customer in chronological order. New clients should use this endpoint rather than the v1 endpoint.",
        "summary": "List customer contracts (v2)",
        "operationId": "listContracts-v2",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "Customer ID and optional filters",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["customer_id"],
                "properties": {
                  "customer_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "include_ledgers": {
                    "type": "boolean",
                    "description": "Include commit/credit ledgers in the response. Setting this flag may cause the response to be slower."
                  },
                  "include_archived": {
                    "type": "boolean",
                    "description": "Include archived contracts in the response."
                  },
                  "include_balance": {
                    "type": "boolean",
                    "description": "Include the balance of credits and commits in the response. Setting this flag may cause the response to be slower."
                  },
                  "starting_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional RFC 3339 timestamp. Only include contracts that started on or after this date. This cannot be provided if covering_date filter is provided."
                  },
                  "covering_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional RFC 3339 timestamp. Only include contracts active on the provided date. This cannot be provided if starting_at filter is provided."
                  }
                }
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContractV2"
                      }
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "$ref": "#/components/examples/ContractExampleV2"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["CustomerNotFound"]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/contracts/edit": {
      "post": {
        "description": "Edit a contract. Contract editing must be enabled to use this endpoint.",
        "summary": "Edit a contract",
        "operationId": "editContract-v2",
        "tags": ["Contracts"],
        "requestBody": {
          "description": "Contract and customer IDs and fields to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditContractPayload"
              },
              "example": {
                "customer_id": "13117714-3f05-48e5-a6e9-a66093f13b4d",
                "contract_id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
                "add_overrides": [
                  {
                    "type": "MULTIPLIER",
                    "starting_at": "2024-11-02T00:00:00Z",
                    "product_id": "d4fc086c-d8e5-4091-a235-fbba5da4ec14",
                    "multiplier": 2,
                    "priority": 100
                  }
                ],
                "add_scheduled_charges": [
                  {
                    "product_id": "2e30f074-d04c-412e-a134-851ebfa5ceb2",
                    "schedule": {
                      "schedule_items": [
                        {
                          "timestamp": "2020-02-15T00:00:00.000Z",
                          "unit_price": 1000000,
                          "quantity": 1
                        }
                      ]
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["CustomerNotFound", "ContractNotFound"]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/contracts/commits/edit": {
      "post": {
        "description": "Edit a customer or contract commit. Contract commits can only be edited using this endpoint if contract editing is enabled.",
        "summary": "Edit a commit",
        "operationId": "editCommit-v2",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "Commit and customer IDs and fields to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCommitPayload"
              },
              "example": {
                "customer_id": "4c91c473-fc12-445a-9c38-40421d47023f",
                "commit_id": "5e7e82cf-ccb7-428c-a96f-a8e4f67af822",
                "access_schedule": {
                  "update_schedule_items": [
                    {
                      "id": "d5edbd32-c744-48cb-9475-a9bca0e6fa39",
                      "ending_before": "2025-03-12T00:00:00Z"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["CustomerNotFound"]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/contracts/credits/edit": {
      "post": {
        "description": "Edit a customer or contract credit. Contract credits can only be edited using this endpoint if contract editing is enabled.",
        "summary": "Edit a credit",
        "operationId": "editCredit-v2",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "Credit and customer IDs and fields to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCreditPayload"
              },
              "example": {
                "customer_id": "4c91c473-fc12-445a-9c38-40421d47023f",
                "credit_id": "5e7e82cf-ccb7-428c-a96f-a8e4f67af822",
                "access_schedule": {
                  "update_schedule_items": [
                    {
                      "id": "d5edbd32-c744-48cb-9475-a9bca0e6fa39",
                      "ending_before": "2025-03-12T00:00:00Z"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["CustomerNotFound"]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/contracts/commits/archive": {
      "post": {
        "description": "Archive a customer or contract commit. Contract commits can only be archived using this endpoint if contract editing is enabled.",
        "summary": "Archive a commit",
        "operationId": "archiveCommit-v2",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "Customer ID and Commit ID to archive",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveCommitPayload"
              },
              "example": {
                "customer_id": "4c91c473-fc12-445a-9c38-40421d47023f",
                "commit_id": "5e7e82cf-ccb7-428c-a96f-a8e4f67af822"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["CustomerNotFound"]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/contracts/credits/archive": {
      "post": {
        "description": "Archive a customer or contract credit. Contract credits can only be archived using this endpoint if contract editing is enabled.",
        "summary": "Archive a credit",
        "operationId": "archiveCredit-v2",
        "tags": ["Credits and commits"],
        "requestBody": {
          "description": "Customer ID and Credit ID to archive",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveCreditPayload"
              },
              "example": {
                "customer_id": "4c91c473-fc12-445a-9c38-40421d47023f",
                "credit_id": "5e7e82cf-ccb7-428c-a96f-a8e4f67af822"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data"],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Id"
                    }
                  }
                },
                "example": {
                  "data": {
                    "id": "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["CustomerNotFound"]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.metronome.com",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Customers",
      "description": "[Customers](https://docs.metronome.com/provisioning/create-customers/) in Metronome represent your users for all billing and reporting. Use these endpoints to create, retrieve, update, and archive customers and their billing configuration."
    },
    {
      "name": "Billable metrics",
      "description": "[Billable metrics](https://docs.metronome.com/understanding-metronome/how-metronome-works#billable-metrics) in Metronome represent the various consumption components that Metronome meters and aggregates."
    },
    {
      "name": "Usage",
      "description": "[Usage events](https://docs.metronome.com/connecting-metronome/send-usage-data/) are the basis for billable metrics. Use these endpoints to send usage events to Metronome and retrieve aggregated event data."
    },
    {
      "name": "Products",
      "description": "Products are the items that customers purchase."
    },
    {
      "name": "Rate cards",
      "description": "Rate cards are used to define default pricing for products."
    },
    {
      "name": "Contracts",
      "description": "A contract defines a customer’s products, pricing, discounts, commitments, and more. Use these endpoints to create and update contracts data."
    },
    {
      "name": "Credits and commits",
      "description": "Credits and commits are used to manage customer balances."
    },
    {
      "name": "Invoices",
      "description": "[Invoices](https://docs.metronome.com/invoicing/) reflect how much a customer spent during a period, which is the basis for billing. Metronome automatically generates invoices based upon your pricing, packaging, and usage events. Use these endpoints to retrieve invoices."
    },
    {
      "name": "Alerts",
      "description": "[Alerts](https://docs.metronome.com/connecting-metronome/alerts/) monitor customer spending, balances, and other billing factors. Use these endpoints to create, retrieve, and archive customer alerts. To view sample alert payloads by alert type, navigate [here.](https://docs.metronome.com/manage-product-access/create-manage-alerts/#webhook-notifications)"
    },
    {
      "name": "Custom fields",
      "description": "[Custom fields](https://docs.metronome.com/integrations/custom-fields/) enable adding additional data to Metronome entities. Use these endpoints to create, retrieve, update, and delete custom fields."
    },
    {
      "name": "Security",
      "description": "[Security](https://docs.metronome.com/developer-resources/security/) endpoints allow you to retrieve security-related data."
    },
    {
      "name": "Settings",
      "description": "Use these endpoints to configure a billing API key, a webhook secret, or invoice finalization behavior."
    }
  ],
  "x-has-client-specific": false,
  "security": [
    {
      "bearerAuth": []
    }
  ]
}
